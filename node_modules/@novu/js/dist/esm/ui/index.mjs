import { Novu, isSameFilter } from '../chunk-JKFCSXQM.mjs';
import { parseMarkdownIntoTokens } from '../chunk-GPV65U5R.mjs';
import { __privateAdd, __privateSet, __privateMethod, __privateGet, __spreadProps, __spreadValues, __objRest, __async } from '../chunk-STZMOEWR.mjs';
import { delegateEvents, createComponent, mergeProps, render, Portal as Portal$1, spread, template, insert, memo, effect, className, use, setAttribute, Dynamic } from 'solid-js/web';
import { createSignal, createContext, useContext, onMount, onCleanup, For, createMemo, createEffect, splitProps, Show, Switch as Switch$1, Match, createResource, batch } from 'solid-js';
import { createStore } from 'solid-js/store';
import clsx from 'clsx';
import { extendTailwindMerge } from 'tailwind-merge';
import { cva } from 'class-variance-authority';
import { autoUpdate, offset, flip, shift } from '@floating-ui/dom';
import { useFloating } from 'solid-floating-ui';
import { Motion as Motion$1 } from 'solid-motionone';

// _4rw53wtx5:/Users/adamchmara/projects/novu/packages/js/src/ui/index.directcss
var ui_default = `.novu{scrollbar-color:var(--nv-color-secondary-foreground-alpha-300) #0000;:where(*),:where(*) :after,:where(*) :before,:where(*):after,:where(*):before{border:0 solid #e5e7eb;box-sizing:border-box}:where(html,:host){line-height:1.5;-webkit-text-size-adjust:100%;font-family:ui-sans-serif,system-ui,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;font-feature-settings:normal;font-variation-settings:normal;tab-size:4;-webkit-tap-highlight-color:transparent}:where(body){line-height:inherit;margin:0}:where(hr){border-top-width:1px;color:inherit;height:0}:where(abbr:where([title])){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}:where(h1,h2,h3,h4,h5,h6){font-size:inherit;font-weight:inherit}:where(a){color:inherit;text-decoration:inherit}:where(b,strong){font-weight:bolder}:where(code,kbd,samp,pre){font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-feature-settings:normal;font-size:1em;font-variation-settings:normal}:where(small){font-size:80%}:where(sub,sup){font-size:75%;line-height:0;position:relative;vertical-align:initial}:where(sub){bottom:-.25em}:where(sup){top:-.5em}:where(table){border-collapse:collapse;border-color:inherit;text-indent:0}:where(button,input,optgroup,select,textarea){color:inherit;font-family:inherit;font-feature-settings:inherit;font-size:100%;font-variation-settings:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;margin:0;padding:0}:where(button,select){text-transform:none}:where(button,input:where([type=button]),input:where([type=reset]),input:where([type=submit])){-webkit-appearance:button;background-color:initial;background-image:none}:where(:-moz-focusring){outline:auto}:where(:-moz-ui-invalid){box-shadow:none}:where(progress){vertical-align:initial}:where(*)::-webkit-inner-spin-button,:where(*)::-webkit-outer-spin-button{height:auto}:where([type=search]){-webkit-appearance:textfield;outline-offset:-2px}:where(*)::-webkit-search-decoration{-webkit-appearance:none}:where(*)::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}:where(summary){display:list-item}:where(blockquote,dl,dd,h1,h2,h3,h4,h5,h6,hr,figure,p,pre){margin:0}:where(fieldset){margin:0;padding:0}:where(legend){padding:0}:where(ol,ul,menu){list-style:none;margin:0;padding:0}:where(dialog){padding:0}:where(textarea){resize:vertical}:where(input)::placeholder,:where(textarea)::placeholder{color:#9ca3af;opacity:1}:where(button,[role=button]){cursor:pointer}:where(:disabled){cursor:default}:where(img,svg,video,canvas,audio,iframe,embed,object){display:block;vertical-align:middle}:where(img,video){height:auto;max-width:100%}:where([hidden]){display:none}:where(*),:where(*) :after,:where(*) :before,:where(*):after,:where(*):before{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:#3b82f680;--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }:where(*) ::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:#3b82f680;--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }::-webkit-scrollbar{height:.5rem;width:.5rem}::-webkit-scrollbar-thumb{background-clip:"padding-box";background-color:var(--nv-color-secondary-foreground-alpha-300);border-radius:.25rem}::-webkit-scrollbar-corner,::-webkit-scrollbar-track{background-color:initial}input::-webkit-inner-spin-button,input::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}input[type=number]{-moz-appearance:textfield}}.nt-sr-only{height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px;clip:rect(0,0,0,0);border-width:0;white-space:nowrap}.\\!nt-pointer-events-auto{pointer-events:auto!important}.nt-invisible{visibility:hidden}.nt-absolute{position:absolute}.nt-relative{position:relative}.nt-inset-0{inset:0}.nt-inset-2{inset:.5rem}.nt-left-0\\.5{left:.125rem}.nt-right-0{right:0}.nt-right-3{right:.75rem}.nt-top-0{top:0}.nt-top-0\\.5{top:.125rem}.nt-top-3{top:.75rem}.nt-z-10{z-index:10}.nt-z-\\[-1\\]{z-index:-1}.nt-mx-auto{margin-left:auto;margin-right:auto}.nt-mb-2{margin-bottom:.5rem}.nt-mb-4{margin-bottom:1rem}.nt-mb-\\[0\\.625rem\\]{margin-bottom:.625rem}.nt-ml-2{margin-left:.5rem}.nt-ml-auto{margin-left:auto}.nt-mr-2{margin-right:.5rem}.nt-mr-auto{margin-right:auto}.nt-mt-auto{margin-top:auto}.nt-block{display:block}.nt-flex{display:flex}.nt-inline-flex{display:inline-flex}.nt-grid{display:grid}.nt-hidden{display:none}.nt-aspect-square{aspect-ratio:1/1}.nt-size-1\\.5{height:.375rem;width:.375rem}.nt-size-2{height:.5rem;width:.5rem}.nt-size-2\\.5{height:.625rem;width:.625rem}.nt-size-3{height:.75rem;width:.75rem}.nt-size-4{height:1rem;width:1rem}.nt-size-5{height:1.25rem;width:1.25rem}.nt-size-8{height:2rem;width:2rem}.nt-size-fit{height:fit-content;width:fit-content}.nt-size-full{height:100%;width:100%}.nt-h-2{height:.5rem}.nt-h-3{height:.75rem}.nt-h-4{height:1rem}.nt-h-5{height:1.25rem}.nt-h-7{height:1.75rem}.nt-h-8{height:2rem}.nt-h-9{height:2.25rem}.nt-h-\\[600px\\]{height:600px}.nt-h-fit{height:fit-content}.nt-h-full{height:100%}.nt-min-h-0{min-height:0}.nt-w-1\\/3{width:33.333333%}.nt-w-2\\/3{width:66.666667%}.nt-w-5{width:1.25rem}.nt-w-7{width:1.75rem}.nt-w-8{width:2rem}.nt-w-\\[260px\\]{width:260px}.nt-w-\\[400px\\]{width:400px}.nt-w-\\[60px\\]{width:60px}.nt-w-\\[calc\\(2ch\\+2rem\\)\\]{width:calc(2ch + 2rem)}.nt-w-fit{width:fit-content}.nt-w-full{width:100%}.nt-w-max{width:max-content}.nt-min-w-52{min-width:13rem}.nt-flex-1{flex:1 1 0%}.nt-shrink-0{flex-shrink:0}.nt-transform{transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.nt-cursor-default{cursor:default}.nt-cursor-pointer{cursor:pointer}.nt-grid-cols-7{grid-template-columns:repeat(7,minmax(0,1fr))}.nt-flex-row{flex-direction:row}.nt-flex-col{flex-direction:column}.nt-flex-wrap{flex-wrap:wrap}.nt-flex-nowrap{flex-wrap:nowrap}.nt-items-start{align-items:flex-start}.nt-items-center{align-items:center}.nt-justify-end{justify-content:flex-end}.nt-justify-center{justify-content:center}.nt-justify-between{justify-content:space-between}.nt-gap-0\\.5{gap:.125rem}.nt-gap-1{gap:.25rem}.nt-gap-1\\.5{gap:.375rem}.nt-gap-2{gap:.5rem}.nt-gap-3{gap:.75rem}.nt-gap-4{gap:1rem}.nt-gap-6{gap:1.5rem}.nt-gap-8{gap:2rem}.nt-self-stretch{align-self:stretch}.nt-overflow-auto{overflow:auto}.nt-overflow-hidden{overflow:hidden}.nt-overflow-y-auto{overflow-y:auto}.nt-truncate{overflow:hidden;text-overflow:ellipsis}.nt-truncate,.nt-whitespace-nowrap{white-space:nowrap}.nt-whitespace-pre-wrap{white-space:pre-wrap}.nt-rounded{border-radius:var(--nv-radius-base)}.nt-rounded-full{border-radius:var(--nv-radius-full)}.nt-rounded-lg{border-radius:var(--nv-radius-lg)}.nt-rounded-md{border-radius:var(--nv-radius-md)}.nt-rounded-sm{border-radius:var(--nv-radius-sm)}.nt-rounded-xl{border-radius:var(--nv-radius-xl)}.nt-border{border-width:1px}.nt-border-b{border-bottom-width:1px}.nt-border-t{border-top-width:1px}.nt-border-background{border-color:var(--nv-color-background)}.nt-border-border{border-color:var(--nv-color-neutral-alpha-100)}.nt-border-neutral-200{--tw-border-opacity:1;border-color:rgb(229 229 229/var(--tw-border-opacity,1))}.nt-border-neutral-alpha-100{border-color:var(--nv-color-neutral-alpha-100)}.nt-border-neutral-alpha-50{border-color:var(--nv-color-neutral-alpha-50)}.nt-border-t-neutral-alpha-200{border-top-color:var(--nv-color-neutral-alpha-200)}.nt-bg-\\[oklch\\(from_var\\(--nv-color-stripes\\)_l_c_h_\\/_0\\.1\\)\\]{background-color:oklch(from var(--nv-color-stripes) l c h/.1)}.nt-bg-background{background-color:var(--nv-color-background)}.nt-bg-counter{background-color:var(--nv-color-counter)}.nt-bg-foreground{background-color:var(--nv-color-foreground)}.nt-bg-neutral-alpha-100{background-color:var(--nv-color-neutral-alpha-100)}.nt-bg-neutral-alpha-25{background-color:var(--nv-color-neutral-alpha-25)}.nt-bg-neutral-alpha-300{background-color:var(--nv-color-neutral-alpha-300)}.nt-bg-neutral-alpha-50{background-color:var(--nv-color-neutral-alpha-50)}.nt-bg-primary{background-color:var(--nv-color-primary)}.nt-bg-primary-alpha-300{background-color:var(--nv-color-primary-alpha-300)}.nt-bg-primary-alpha-400{background-color:var(--nv-color-primary-alpha-400)}.nt-bg-secondary{background-color:var(--nv-color-secondary)}.nt-bg-gradient-to-b{background-image:linear-gradient(to bottom,var(--tw-gradient-stops))}.nt-bg-gradient-to-r{background-image:linear-gradient(to right,var(--tw-gradient-stops))}.nt-from-foreground-alpha-50{--tw-gradient-from:var(--nv-color-foreground-alpha-50) var(--tw-gradient-from-position);--tw-gradient-to:#fff0 var(--tw-gradient-to-position);--tw-gradient-stops:var(--tw-gradient-from),var(--tw-gradient-to)}.nt-from-primary-foreground-alpha-200{--tw-gradient-from:var(--nv-color-primary-foreground-alpha-200) var(--tw-gradient-from-position);--tw-gradient-to:#fff0 var(--tw-gradient-to-position);--tw-gradient-stops:var(--tw-gradient-from),var(--tw-gradient-to)}.nt-from-transparent{--tw-gradient-from:#0000 var(--tw-gradient-from-position);--tw-gradient-to:#0000 var(--tw-gradient-to-position);--tw-gradient-stops:var(--tw-gradient-from),var(--tw-gradient-to)}.nt-from-20\\%{--tw-gradient-from-position:20%}.nt-to-background{--tw-gradient-to:var(--nv-color-background) var(--tw-gradient-to-position)}.nt-to-transparent{--tw-gradient-to:#0000 var(--tw-gradient-to-position)}.nt-object-cover{object-fit:cover}.nt-p-0{padding:0}.nt-p-0\\.5{padding:.125rem}.nt-p-1{padding:.25rem}.nt-p-2{padding:.5rem}.nt-p-2\\.5{padding:.625rem}.nt-p-3{padding:.75rem}.nt-p-4{padding:1rem}.nt-px-1{padding-left:.25rem;padding-right:.25rem}.nt-px-2{padding-left:.5rem;padding-right:.5rem}.nt-px-3{padding-left:.75rem;padding-right:.75rem}.nt-px-4{padding-left:1rem;padding-right:1rem}.nt-px-8{padding-left:2rem;padding-right:2rem}.nt-px-\\[6px\\]{padding-left:6px;padding-right:6px}.nt-py-1{padding-bottom:.25rem;padding-top:.25rem}.nt-py-2{padding-bottom:.5rem;padding-top:.5rem}.nt-py-3{padding-bottom:.75rem;padding-top:.75rem}.nt-py-3\\.5{padding-bottom:.875rem;padding-top:.875rem}.nt-py-4{padding-bottom:1rem;padding-top:1rem}.nt-py-px{padding-bottom:1px;padding-top:1px}.nt-pb-2{padding-bottom:.5rem}.nt-pb-\\[0\\.625rem\\]{padding-bottom:.625rem}.nt-pt-2\\.5{padding-top:.625rem}.nt-text-center{text-align:center}.nt-text-start{text-align:start}.nt-font-mono{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace}.nt-text-\\[0\\.8rem\\]{font-size:.8rem}.nt-text-base{font-size:var(--nv-font-size-base);line-height:var(--nv-line-height-base)}.nt-text-sm{font-size:var(--nv-font-size-sm);line-height:var(--nv-line-height-sm)}.nt-text-xl{font-size:var(--nv-font-size-xl);line-height:var(--nv-line-height-xl)}.nt-text-xs{font-size:var(--nv-font-size-xs);line-height:var(--nv-line-height-xs)}.nt-font-medium{font-weight:500}.nt-font-normal{font-weight:400}.nt-font-semibold{font-weight:600}.nt-leading-none{line-height:1}.nt-text-background{color:var(--nv-color-background)}.nt-text-counter-foreground{color:var(--nv-color-counter-foreground)}.nt-text-foreground{color:var(--nv-color-foreground)}.nt-text-foreground-alpha-300{color:var(--nv-color-foreground-alpha-300)}.nt-text-foreground-alpha-400{color:var(--nv-color-foreground-alpha-400)}.nt-text-foreground-alpha-600{color:var(--nv-color-foreground-alpha-600)}.nt-text-foreground-alpha-700{color:var(--nv-color-foreground-alpha-700)}.nt-text-primary-foreground{color:var(--nv-color-primary-foreground)}.nt-text-secondary-foreground{color:var(--nv-color-secondary-foreground)}.nt-text-stripes{color:var(--nv-color-stripes)}.nt-opacity-0{opacity:0}.nt-opacity-20{opacity:.2}.nt-shadow{--tw-shadow:0 1px 3px 0 #0000001a,0 1px 2px -1px #0000001a;--tw-shadow-colored:0 1px 3px 0 var(--tw-shadow-color),0 1px 2px -1px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.nt-shadow-\\[0_0_0_0\\.5px_var\\(--nv-color-primary-600\\)\\]{--tw-shadow:0 0 0 0.5px var(--nv-color-primary-600);--tw-shadow-colored:0 0 0 0.5px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.nt-shadow-\\[0_0_0_0\\.5px_var\\(--nv-color-secondary-600\\)\\]{--tw-shadow:0 0 0 0.5px var(--nv-color-secondary-600);--tw-shadow-colored:0 0 0 0.5px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.nt-shadow-\\[0px_1px_2px_0px_rgba\\(10\\,13\\,20\\,0\\.03\\)\\]{--tw-shadow:0px 1px 2px 0px #0a0d1408;--tw-shadow-colored:0px 1px 2px 0px var(--tw-shadow-color)}.nt-shadow-\\[0px_1px_2px_0px_rgba\\(10\\,13\\,20\\,0\\.03\\)\\],.nt-shadow-dropdown{box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.nt-shadow-dropdown{--tw-shadow:0px 12px 16px -4px oklch(from var(--nv-color-shadow) l c h/0.08),0px 4px 6px -2px oklch(from var(--nv-color-shadow) l c h/0.03);--tw-shadow-colored:0px 12px 16px -4px var(--tw-shadow-color),0px 4px 6px -2px var(--tw-shadow-color)}.nt-shadow-lg{--tw-shadow:0 10px 15px -3px #0000001a,0 4px 6px -4px #0000001a;--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color),0 4px 6px -4px var(--tw-shadow-color)}.nt-shadow-lg,.nt-shadow-popover{box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.nt-shadow-popover{--tw-shadow:0px 8px 26px 0px oklch(from var(--nv-color-shadow) l c h/0.08),0px 2px 6px 0px oklch(from var(--nv-color-shadow) l c h/0.12);--tw-shadow-colored:0px 8px 26px 0px var(--tw-shadow-color),0px 2px 6px 0px var(--tw-shadow-color)}.nt-shadow-tooltip{--tw-shadow:0 5px 20px 0 oklch(from var(--nv-color-shadow) l c h/0.08);--tw-shadow-colored:0 5px 20px 0 var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.nt-outline-none{outline:2px solid #0000;outline-offset:2px}.nt-backdrop-blur-lg{--tw-backdrop-blur:blur(16px);-webkit-backdrop-filter:var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);backdrop-filter:var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia)}.nt-transition{transition-duration:.15s;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,-webkit-backdrop-filter;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter,-webkit-backdrop-filter;transition-timing-function:cubic-bezier(.4,0,.2,1)}.nt-transition-all{transition-duration:.15s;transition-property:all;transition-timing-function:cubic-bezier(.4,0,.2,1)}.nt-transition-colors{transition-duration:.15s;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke;transition-timing-function:cubic-bezier(.4,0,.2,1)}.nt-duration-100{transition-duration:.1s}.nt-duration-200{transition-duration:.2s}.nt-ease-out{transition-timing-function:cubic-bezier(0,0,.2,1)}@keyframes enter{0%{opacity:var(--tw-enter-opacity,1);transform:translate3d(var(--tw-enter-translate-x,0),var(--tw-enter-translate-y,0),0) scale3d(var(--tw-enter-scale,1),var(--tw-enter-scale,1),var(--tw-enter-scale,1)) rotate(var(--tw-enter-rotate,0))}}@keyframes exit{to{opacity:var(--tw-exit-opacity,1);transform:translate3d(var(--tw-exit-translate-x,0),var(--tw-exit-translate-y,0),0) scale3d(var(--tw-exit-scale,1),var(--tw-exit-scale,1),var(--tw-exit-scale,1)) rotate(var(--tw-exit-rotate,0))}}.nt-animate-in{animation-duration:.15s;animation-name:enter;--tw-enter-opacity:initial;--tw-enter-scale:initial;--tw-enter-rotate:initial;--tw-enter-translate-x:initial;--tw-enter-translate-y:initial}.nt-fade-in{--tw-enter-opacity:0}.nt-slide-in-from-top-2{--tw-enter-translate-y:-0.5rem}.nt-duration-100{animation-duration:.1s}.nt-duration-200{animation-duration:.2s}.nt-ease-out{animation-timing-function:cubic-bezier(0,0,.2,1)}.before\\:nt-absolute:before{content:var(--tw-content);position:absolute}.before\\:nt-inset-0:before{content:var(--tw-content);inset:0}.before\\:-nt-right-\\[calc\\(0\\+var\\(--stripes-size\\)\\)\\]:before{content:var(--tw-content);right:calc(var(--stripes-size)*-1)}@keyframes nt-stripes{0%{content:var(--tw-content);transform:translateX(0)}to{content:var(--tw-content);transform:translateX(calc(var(--stripes-size)*-1))}}.before\\:nt-animate-stripes:before{animation:nt-stripes 1s linear infinite paused;content:var(--tw-content)}.before\\:nt-rounded-lg:before{border-radius:var(--nv-radius-lg);content:var(--tw-content)}.before\\:nt-rounded-md:before{border-radius:var(--nv-radius-md);content:var(--tw-content)}.before\\:nt-rounded-xl:before{border-radius:var(--nv-radius-xl);content:var(--tw-content)}.before\\:nt-border:before{border-width:1px;content:var(--tw-content)}.before\\:nt-border-primary-foreground-alpha-100:before{border-color:var(--nv-color-primary-foreground-alpha-100);content:var(--tw-content)}.before\\:nt-border-secondary-foreground-alpha-100:before{border-color:var(--nv-color-secondary-foreground-alpha-100);content:var(--tw-content)}.before\\:nt-bg-dev-stripes-gradient:before{background-image:repeating-linear-gradient(135deg,oklch(from var(--nv-color-stripes) l c h/.1) 25%,oklch(from var(--nv-color-stripes) l c h/.1) 50%,oklch(from var(--nv-color-stripes) l c h/.2) 50%,oklch(from var(--nv-color-stripes) l c h/.2) 75%);content:var(--tw-content)}.before\\:nt-bg-\\[length\\:var\\(--stripes-size\\)_var\\(--stripes-size\\)\\]:before{background-size:var(--stripes-size) var(--stripes-size);content:var(--tw-content)}.before\\:nt-content-\\[\\"\\"\\]:before{--tw-content:"";content:var(--tw-content)}.before\\:\\[mask-image\\:linear-gradient\\(transparent_0\\%\\2c black\\)\\]:before{content:var(--tw-content);-webkit-mask-image:linear-gradient(#0000,#000);mask-image:linear-gradient(#0000,#000)}.after\\:nt-absolute:after{content:var(--tw-content);position:absolute}.after\\:nt-inset-0:after{content:var(--tw-content);inset:0}.after\\:-nt-top-12:after{content:var(--tw-content);top:-3rem}.after\\:nt-bottom-0:after{bottom:0;content:var(--tw-content)}.after\\:nt-left-0:after{content:var(--tw-content);left:0}.after\\:nt-left-0\\.5:after{content:var(--tw-content);left:.125rem}.after\\:nt-top-0\\.5:after{content:var(--tw-content);top:.125rem}.after\\:nt-size-3:after{content:var(--tw-content);height:.75rem;width:.75rem}.after\\:nt-h-\\[2px\\]:after{content:var(--tw-content);height:2px}.after\\:nt-w-full:after{content:var(--tw-content);width:100%}.after\\:nt-rounded-full:after{border-radius:var(--nv-radius-full);content:var(--tw-content)}.after\\:nt-rounded-lg:after{border-radius:var(--nv-radius-lg);content:var(--tw-content)}.after\\:nt-rounded-md:after{border-radius:var(--nv-radius-md);content:var(--tw-content)}.after\\:nt-rounded-xl:after{border-radius:var(--nv-radius-xl);content:var(--tw-content)}.after\\:nt-border-b-2:after{border-bottom-width:2px;content:var(--tw-content)}.after\\:nt-border-b-primary:after{border-bottom-color:var(--nv-color-primary);content:var(--tw-content)}.after\\:nt-border-b-transparent:after{border-bottom-color:#0000;content:var(--tw-content)}.after\\:nt-bg-background:after{background-color:var(--nv-color-background);content:var(--tw-content)}.after\\:nt-bg-\\[linear-gradient\\(180deg\\2c transparent\\2c oklch\\(from_var\\(--nv-color-background\\)_l_c_h_\\/_0\\.9\\)_55\\%\\2c transparent\\)\\]:after{background-image:linear-gradient(180deg,#0000,oklch(from var(--nv-color-background) l c h/.9) 55%,#0000);content:var(--tw-content)}.after\\:nt-bg-\\[linear-gradient\\(180deg\\2c transparent\\2c oklch\\(from_var\\(--nv-color-stripes\\)_l_c_h_\\/_0\\.07\\)_55\\%\\2c transparent\\)\\2c linear-gradient\\(180deg\\2c transparent\\2c oklch\\(from_var\\(--nv-color-background\\)_l_c_h_\\/_0\\.9\\)_55\\%\\2c transparent\\)\\]:after{background-image:linear-gradient(180deg,#0000,oklch(from var(--nv-color-stripes) l c h/.07) 55%,#0000),linear-gradient(180deg,#0000,oklch(from var(--nv-color-background) l c h/.9) 55%,#0000);content:var(--tw-content)}.after\\:nt-bg-gradient-to-b:after{background-image:linear-gradient(to bottom,var(--tw-gradient-stops));content:var(--tw-content)}.after\\:nt-from-primary-foreground-alpha-50:after{content:var(--tw-content);--tw-gradient-from:var(--nv-color-primary-foreground-alpha-50) var(--tw-gradient-from-position);--tw-gradient-to:#fff0 var(--tw-gradient-to-position);--tw-gradient-stops:var(--tw-gradient-from),var(--tw-gradient-to)}.after\\:nt-from-secondary-foreground-alpha-50:after{content:var(--tw-content);--tw-gradient-from:var(--nv-color-secondary-foreground-alpha-50) var(--tw-gradient-from-position);--tw-gradient-to:#fff0 var(--tw-gradient-to-position);--tw-gradient-stops:var(--tw-gradient-from),var(--tw-gradient-to)}.after\\:nt-to-transparent:after{content:var(--tw-content);--tw-gradient-to:#0000 var(--tw-gradient-to-position)}.after\\:nt-opacity-0:after{content:var(--tw-content);opacity:0}.after\\:nt-transition-all:after{content:var(--tw-content);transition-duration:.15s;transition-property:all;transition-timing-function:cubic-bezier(.4,0,.2,1)}.after\\:nt-transition-opacity:after{content:var(--tw-content);transition-duration:.15s;transition-property:opacity;transition-timing-function:cubic-bezier(.4,0,.2,1)}.after\\:nt-duration-200:after{transition-duration:.2s}.after\\:nt-content-\\[\\"\\"\\]:after,.after\\:nt-content-\\[\\'\\'\\]:after{--tw-content:"";content:var(--tw-content)}.after\\:nt-duration-200:after{animation-duration:.2s;content:var(--tw-content)}.hover\\:nt-bg-neutral-alpha-100:hover{background-color:var(--nv-color-neutral-alpha-100)}.hover\\:nt-bg-neutral-alpha-50:hover{background-color:var(--nv-color-neutral-alpha-50)}.hover\\:nt-bg-primary-600:hover{background-color:var(--nv-color-primary-600)}.hover\\:nt-bg-primary-alpha-25:hover{background-color:var(--nv-color-primary-alpha-25)}.hover\\:nt-bg-primary-alpha-400:hover{background-color:var(--nv-color-primary-alpha-400)}.hover\\:nt-text-foreground-alpha-800:hover{color:var(--nv-color-foreground-alpha-800)}.before\\:hover\\:\\[animation-play-state\\:running\\]:hover:before{animation-play-state:running;content:var(--tw-content)}.hover\\:after\\:nt-opacity-100:hover:after{content:var(--tw-content);opacity:1}.focus\\:nt-outline-none:focus{outline:2px solid #0000;outline-offset:2px}.focus-visible\\:nt-rounded-lg:focus-visible{border-radius:var(--nv-radius-lg)}.focus-visible\\:nt-rounded-md:focus-visible{border-radius:var(--nv-radius-md)}.focus-visible\\:nt-rounded-xl:focus-visible{border-radius:var(--nv-radius-xl)}.focus-visible\\:nt-bg-neutral-alpha-50:focus-visible{background-color:var(--nv-color-neutral-alpha-50)}.focus-visible\\:nt-outline-none:focus-visible{outline:2px solid #0000;outline-offset:2px}.focus-visible\\:nt-ring-2:focus-visible{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000)}.focus-visible\\:nt-ring-primary:focus-visible{--tw-ring-color:var(--nv-color-primary)}.focus-visible\\:nt-ring-ring:focus-visible{--tw-ring-color:var(--nv-color-ring)}.focus-visible\\:nt-ring-offset-2:focus-visible{--tw-ring-offset-width:2px}.disabled\\:nt-pointer-events-none:disabled{pointer-events:none}.disabled\\:nt-opacity-20:disabled{opacity:.2}.disabled\\:nt-opacity-50:disabled{opacity:.5}.nt-group:focus-within .group-focus-within\\:nt-opacity-100,.nt-group:hover .group-hover\\:nt-opacity-100{opacity:1}.nt-peer:checked~.peer-checked\\:nt-border-neutral-alpha-400{border-color:var(--nv-color-neutral-alpha-400)}.nt-peer:checked~.peer-checked\\:nt-bg-primary{background-color:var(--nv-color-primary)}.nt-peer:checked~.peer-checked\\:nt-shadow-none{--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.nt-peer:checked~.peer-checked\\:after\\:nt-translate-x-full:after{content:var(--tw-content);--tw-translate-x:100%;transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.nt-peer:checked~.peer-checked\\:after\\:nt-border-background:after{border-color:var(--nv-color-background);content:var(--tw-content)}.data-\\[open\\=true\\]\\:nt-rotate-180[data-open=true]{--tw-rotate:180deg}.data-\\[open\\=true\\]\\:nt-rotate-180[data-open=true],.data-\\[open\\=true\\]\\:nt-transform[data-open=true]{transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.data-\\[disabled\\=true\\]\\:nt-text-foreground-alpha-400[data-disabled=true]{color:var(--nv-color-foreground-alpha-400)}.data-\\[disabled\\=true\\]\\:nt-text-foreground-alpha-600[data-disabled=true]{color:var(--nv-color-foreground-alpha-600)}.data-\\[state\\=active\\]\\:nt-text-foreground[data-state=active]{color:var(--nv-color-foreground)}.data-\\[state\\=active\\]\\:after\\:nt-border-b-2[data-state=active]:after{border-bottom-width:2px;content:var(--tw-content)}.data-\\[state\\=active\\]\\:after\\:nt-border-primary[data-state=active]:after{border-color:var(--nv-color-primary);content:var(--tw-content)}.data-\\[state\\=active\\]\\:after\\:nt-opacity-100[data-state=active]:after{content:var(--tw-content);opacity:1}.\\[\\&\\:not\\(\\:first-child\\)\\]\\:nt-border-t:not(:first-child){border-top-width:1px}.\\[\\&_svg\\]\\:nt-pointer-events-none svg{pointer-events:none}.\\[\\&_svg\\]\\:nt-shrink-0 svg{flex-shrink:0}`;

// src/ui/config/appearanceKeys.ts
var appearanceKeys = [
  // Primitives
  "button",
  "input",
  "icon",
  "badge",
  "popoverContent",
  "popoverTrigger",
  "popoverClose",
  "dropdownContent",
  "dropdownTrigger",
  "dropdownItem",
  "dropdownItemLabel",
  "dropdownItemLabelContainer",
  "dropdownItemLeft__icon",
  "dropdownItemRight__icon",
  "dropdownItem__icon",
  "collapsible",
  "tooltipContent",
  "tooltipTrigger",
  "datePicker",
  "datePickerGrid",
  "datePickerGridRow",
  "datePickerGridCell",
  "datePickerGridCellTrigger",
  "datePickerTrigger",
  "datePickerGridHeader",
  "datePickerControl",
  "datePickerControlPrevTrigger",
  "datePickerControlNextTrigger",
  "datePickerControlPrevTrigger__icon",
  "datePickerControlNextTrigger__icon",
  "datePickerCalendar",
  "datePickerHeaderMonth",
  "datePickerCalendarDay__button",
  "timePicker",
  "timePicker__hourSelect",
  "timePicker__minuteSelect",
  "timePicker__periodSelect",
  "timePicker__separator",
  "timePickerHour__input",
  "timePickerMinute__input",
  "snoozeDatePicker",
  "snoozeDatePicker__actions",
  "snoozeDatePickerCancel__button",
  "snoozeDatePickerApply__button",
  "snoozeDatePicker__timePickerContainer",
  "snoozeDatePicker__timePickerLabel",
  "back__button",
  "skeletonText",
  "skeletonAvatar",
  "skeletonSwitch",
  "skeletonSwitchThumb",
  "tabsRoot",
  "tabsList",
  "tabsContent",
  "tabsTrigger",
  "dots",
  // General
  "root",
  "bellIcon",
  "bellContainer",
  "bellDot",
  "preferences__button",
  "preferencesContainer",
  "inboxHeader",
  "loading",
  // Inbox
  "inboxContent",
  "inbox__popoverTrigger",
  "inbox__popoverContent",
  // Notifications
  "notificationListContainer",
  "notificationList",
  "notificationListEmptyNoticeContainer",
  "notificationListEmptyNoticeOverlay",
  "notificationListEmptyNoticeIcon",
  "notificationListEmptyNotice",
  "notificationList__skeleton",
  "notificationList__skeletonContent",
  "notificationList__skeletonItem",
  "notificationList__skeletonAvatar",
  "notificationList__skeletonText",
  "notificationListNewNotificationsNotice__button",
  "notification",
  "notificationContent",
  "notificationTextContainer",
  "notificationDot",
  "notificationSubject",
  "notificationSubject__strong",
  "notificationBody",
  "notificationBody__strong",
  "notificationBodyContainer",
  "notificationImage",
  "notificationImageLoadingFallback",
  "notificationDate",
  "notificationDateActionsContainer",
  "notificationDefaultActions",
  "notificationCustomActions",
  "notificationPrimaryAction__button",
  "notificationSecondaryAction__button",
  "notificationRead__button",
  "notificationUnread__button",
  "notificationArchive__button",
  "notificationUnarchive__button",
  "notificationSnooze__button",
  "notificationUnsnooze__button",
  "notificationRead__icon",
  "notificationUnread__icon",
  "notificationArchive__icon",
  "notificationUnarchive__icon",
  "notificationSnooze__icon",
  "notificationUnsnooze__icon",
  // Notifications tabs
  "notificationsTabs__tabsRoot",
  "notificationsTabs__tabsList",
  "notificationsTabs__tabsContent",
  "notificationsTabs__tabsTrigger",
  "notificationsTabsTriggerLabel",
  "notificationsTabsTriggerCount",
  // Inbox status
  "inboxStatus__title",
  "inboxStatus__dropdownTrigger",
  "inboxStatus__dropdownContent",
  "inboxStatus__dropdownItem",
  "inboxStatus__dropdownItemLabel",
  "inboxStatus__dropdownItemLabelContainer",
  "inboxStatus__dropdownItemLeft__icon",
  "inboxStatus__dropdownItemRight__icon",
  "inboxStatus__dropdownItem__icon",
  "inboxStatus__dropdownItemCheck__icon",
  // More actions
  "moreActionsContainer",
  "moreActions__dropdownTrigger",
  "moreActions__dropdownContent",
  "moreActions__dropdownItem",
  "moreActions__dropdownItemLabel",
  "moreActions__dropdownItemLeft__icon",
  "moreActions__dots",
  // More tabs
  "moreTabs__button",
  "moreTabs__icon",
  "moreTabs__dropdownTrigger",
  "moreTabs__dropdownContent",
  "moreTabs__dropdownItem",
  "moreTabs__dropdownItemLabel",
  "moreTabs__dropdownItemRight__icon",
  // workflow
  "workflowContainer",
  "workflowLabel",
  "workflowLabelHeader",
  "workflowLabelContainer",
  "workflowContainerDisabledNotice",
  "workflowLabelDisabled__icon",
  "workflowContainerRight__icon",
  "workflowArrow__icon",
  "workflowDescription",
  // channel
  "channelContainer",
  "channelIconContainer",
  "channel__icon",
  "channelsContainerCollapsible",
  "channelsContainer",
  "channelLabel",
  "channelLabelContainer",
  "channelName",
  "channelSwitchContainer",
  "channelSwitch",
  "channelSwitchThumb",
  // Preferences Header
  "preferencesHeader",
  "preferencesHeader__back__button",
  "preferencesHeader__back__button__icon",
  "preferencesHeader__title",
  "preferencesHeader__icon",
  // Preferences Loading
  "preferencesListEmptyNoticeContainer",
  "preferencesListEmptyNotice",
  "preferencesList__skeleton",
  "preferencesList__skeletonContent",
  "preferencesList__skeletonItem",
  "preferencesList__skeletonIcon",
  "preferencesList__skeletonSwitch",
  "preferencesList__skeletonSwitchThumb",
  "preferencesList__skeletonText",
  // Notification Snooze
  "notificationSnooze__dropdownContent",
  "notificationSnooze__dropdownItem",
  "notificationSnooze__dropdownItem__icon",
  "notificationSnoozeCustomTime_popoverContent",
  // Notification Delivered At
  "notificationDeliveredAt__badge",
  "notificationDeliveredAt__icon",
  "notificationSnoozedUntil__icon",
  // Text formatting
  "strong"
];
var defaultLocalization = {
  locale: "en-US",
  "inbox.filters.dropdownOptions.unread": "Unread only",
  "inbox.filters.dropdownOptions.default": "Unread & read",
  "inbox.filters.dropdownOptions.archived": "Archived",
  "inbox.filters.dropdownOptions.snoozed": "Snoozed",
  "inbox.filters.labels.unread": "Unread",
  "inbox.filters.labels.default": "Inbox",
  "inbox.filters.labels.archived": "Archived",
  "inbox.filters.labels.snoozed": "Snoozed",
  "notifications.emptyNotice": "Quiet for now. Check back later.",
  "notifications.actions.readAll": "Mark all as read",
  "notifications.actions.archiveAll": "Archive all",
  "notifications.actions.archiveRead": "Archive read",
  "notifications.newNotifications": ({ notificationCount }) => `${notificationCount > 99 ? "99+" : notificationCount} new ${notificationCount === 1 ? "notification" : "notifications"}`,
  "notification.actions.read.tooltip": "Mark as read",
  "notification.actions.unread.tooltip": "Mark as unread",
  "notification.actions.archive.tooltip": "Archive",
  "notification.actions.unarchive.tooltip": "Unarchive",
  "notification.actions.snooze.tooltip": "Snooze",
  "notification.actions.unsnooze.tooltip": "Unsnooze",
  "notification.snoozedUntil": "Snoozed until",
  "preferences.title": "Preferences",
  "preferences.emptyNotice": "No notification specific preferences yet.",
  "preferences.global": "Global Preferences",
  "preferences.workflow.disabled.notice": "Contact admin to enable subscription management for this critical notification.",
  "preferences.workflow.disabled.tooltip": "Contact admin to edit",
  "snooze.datePicker.timePickerLabel": "Time",
  "snooze.datePicker.apply": "Apply",
  "snooze.datePicker.cancel": "Cancel",
  "snooze.options.anHourFromNow": "An hour from now",
  "snooze.datePicker.pastDateTooltip": "Selected time must be at least 3 minutes in the future",
  "snooze.datePicker.noDateSelectedTooltip": "Please select a date",
  "snooze.datePicker.exceedingLimitTooltip": ({ days }) => `Selected time cannot exceed ${days === 1 ? "24 hours" : `${days} days`} from now`,
  "snooze.options.customTime": "Custom time...",
  "snooze.options.inOneDay": "Tomorrow",
  "snooze.options.inOneWeek": "Next week"
};
var [dynamicLocalization, setDynamicLocalization] = createSignal({});

// src/ui/config/defaultVariables.ts
var defaultVariables = {
  colorPrimary: "#7D52F4",
  colorPrimaryForeground: "white",
  colorSecondary: "#FFFFFF",
  colorSecondaryForeground: "#646464",
  colorCounter: "#FB3748",
  colorCounterForeground: "white",
  colorBackground: "#FCFCFC",
  colorRing: "#E1E4EA",
  colorForeground: "#1A1523",
  colorNeutral: "#525252",
  colorShadow: "rgb(0,0,0)",
  fontSize: "1rem",
  borderRadius: "0.375rem",
  colorStripes: "#FF9A68"
};

// src/ui/helpers/constants.ts
var DEFAULT_TARGET = "_blank";
var DEFAULT_REFERRER = "noopener noreferrer";
function createInfiniteScroll(fetcher, options) {
  const [data, setData] = createSignal([]);
  const [initialLoading, setInitialLoading] = createSignal(true);
  const [after, setAfter] = createSignal(void 0);
  const [end, setEnd] = createSignal(false);
  const [contents, { mutate, refetch }] = createResource(
    () => ({ trigger: true, after: after() }),
    (params) => fetcher(params.after)
  );
  let observedElement = null;
  let io = null;
  onMount(() => {
    io = new IntersectionObserver(
      (entries) => {
        var _a;
        const entry = entries[0];
        if (entry && entry.isIntersecting && !end() && !contents.loading) {
          const data2 = (_a = contents.latest) == null ? void 0 : _a.data;
          if (data2) {
            setAfter(data2[data2.length - 1][options.paginationField]);
          }
        }
      },
      {
        threshold: 0.1
      }
    );
    if (observedElement && io) {
      io.observe(observedElement);
    }
    onCleanup(() => {
      io == null ? void 0 : io.disconnect();
      io = null;
    });
  });
  createEffect(() => {
    if (contents.loading) return;
    const content = contents.latest;
    if (!content) return;
    setInitialLoading(false);
    batch(() => {
      if (!content.hasMore) setEnd(true);
      setData(content.data);
      requestAnimationFrame(() => {
        checkVisibilityAndLoadMore();
      });
    });
  });
  const checkVisibilityAndLoadMore = () => {
    if (observedElement && !end() && !contents.loading) {
      const observer = new IntersectionObserver(
        (entries) => {
          var _a;
          const entry = entries[0];
          if (entry.isIntersecting) {
            const data2 = (_a = contents.latest) == null ? void 0 : _a.data;
            if (data2) {
              setAfter(data2[data2.length - 1][options.paginationField]);
            }
          }
          observer.disconnect();
        },
        {
          threshold: [0.1]
        }
      );
      observer.observe(observedElement);
      onCleanup(() => {
        observer.disconnect();
      });
    }
  };
  const setEl = (el) => {
    if (io && observedElement) {
      io.unobserve(observedElement);
    }
    observedElement = el;
    if (io && el) {
      io.observe(el);
    }
    onCleanup(() => {
      if (io && el) io.unobserve(el);
    });
  };
  const reset = () => __async(this, null, function* () {
    setData([]);
    setInitialLoading(true);
    setEnd(false);
    if (after() !== void 0) {
      setAfter(void 0);
    } else {
      yield refetch();
    }
  });
  return [
    data,
    {
      initialLoading,
      setEl,
      after,
      end,
      mutate,
      reset
    }
  ];
}

// src/ui/helpers/formatToRelativeTime.ts
var DEFAULT_LOCALE = "en-US";
var SECONDS = {
  inMinute: 60,
  inHour: 3600,
  inDay: 86400,
  inWeek: 604800,
  inMonth: 2592e3
};
function formatToRelativeTime({
  fromDate,
  locale = DEFAULT_LOCALE,
  toDate = /* @__PURE__ */ new Date()
}) {
  const elapsed = toDate.getTime() - fromDate.getTime();
  const formatter = new Intl.RelativeTimeFormat(locale, { style: "narrow" });
  const diffInSeconds = Math.floor(elapsed / 1e3);
  if (Math.abs(diffInSeconds) < SECONDS.inMinute) {
    return "Just now";
  } else if (Math.abs(diffInSeconds) < SECONDS.inHour) {
    return formatter.format(Math.floor(-diffInSeconds / SECONDS.inMinute), "minute");
  } else if (Math.abs(diffInSeconds) < SECONDS.inDay) {
    return formatter.format(Math.floor(-diffInSeconds / SECONDS.inHour), "hour");
  } else if (Math.abs(diffInSeconds) < SECONDS.inMonth) {
    return formatter.format(Math.floor(-diffInSeconds / SECONDS.inDay), "day");
  } else {
    return new Intl.DateTimeFormat(locale, { month: "short", day: "numeric" }).format(fromDate);
  }
}
function formatSnoozedUntil({ untilDate, locale = DEFAULT_LOCALE }) {
  const remaining = untilDate.getTime() - (/* @__PURE__ */ new Date()).getTime();
  const diffInSeconds = Math.floor(remaining / 1e3);
  if (diffInSeconds < 0) {
    return "soon";
  }
  if (diffInSeconds < SECONDS.inMinute) {
    return "a moment";
  } else if (diffInSeconds < SECONDS.inHour) {
    const minutes = Math.floor(diffInSeconds / SECONDS.inMinute);
    return `${minutes} ${minutes === 1 ? "minute" : "minutes"}`;
  } else if (diffInSeconds < SECONDS.inDay) {
    const hours = Math.floor(diffInSeconds / SECONDS.inHour);
    return `${hours} ${hours === 1 ? "hour" : "hours"}`;
  } else if (diffInSeconds < SECONDS.inWeek) {
    const days = Math.floor(diffInSeconds / SECONDS.inDay);
    return `${days} ${days === 1 ? "day" : "days"}`;
  } else {
    return new Intl.DateTimeFormat(locale, { month: "short", day: "numeric" }).format(untilDate);
  }
}
var twMerge = extendTailwindMerge({
  prefix: "nt-"
});
var publicFacingTwMerge = extendTailwindMerge({});
function cn(...inputs) {
  return twMerge(clsx(inputs));
}
function generateRandomString(length) {
  const characters = "abcdefghijklmnopqrstuvwxyz";
  let result = "";
  const charactersLength = characters.length;
  for (let i = 0; i < length; i += 1) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }
  return result;
}
function generateUniqueRandomString(set, length) {
  let randomString;
  do {
    randomString = generateRandomString(length);
  } while (set.has(randomString));
  return randomString;
}
function cssObjectToString(styles) {
  return Object.entries(styles).map(([key, value]) => {
    const kebabKey = key.replace(/([A-Z])/g, "-$1").toLowerCase();
    return `${kebabKey}: ${value};`;
  }).join(" ");
}
function createClassAndRuleFromCssString(classNameSet, styles) {
  const className = `novu-css-${generateUniqueRandomString(classNameSet, 8)}`;
  const rule = `.${className} { ${styles} }`;
  classNameSet.add(className);
  return { className, rule };
}
var shades = [25, 50, 100, 200, 300, 400, 500, 600, 700, 800, 900];
function generateDefaultColor(props) {
  const cssVariableDefaultRule = `.${props.id} { --nv-${props.key}: oklch(from ${props.color} l c h); }`;
  return cssVariableDefaultRule;
}
function generateSolidShadeRulesFromColor({ color, key, id }) {
  const rules = [];
  const adjustLightness = (factor) => {
    if (factor >= 0) {
      return `min(1, calc(l + ${factor} * (1 - l)))`;
    } else {
      return `max(0, calc(l * (1 + ${factor})))`;
    }
  };
  const lightnessOffsets = {
    25: adjustLightness(0.475),
    50: adjustLightness(0.45),
    100: adjustLightness(0.4),
    200: adjustLightness(0.3),
    300: adjustLightness(0.2),
    400: adjustLightness(0.1),
    500: "l",
    600: adjustLightness(-0.1),
    700: adjustLightness(-0.2),
    800: adjustLightness(-0.3),
    900: adjustLightness(-0.4)
  };
  shades.forEach((shade) => {
    const newLightness = lightnessOffsets[shade];
    const cssVariableRule = `.${id} { --nv-${key}-${shade}: oklch(from ${color} ${newLightness} c h); }`;
    rules.push(cssVariableRule);
  });
  return rules;
}
function generateAlphaShadeRulesFromColor({ color, key, id }) {
  const rules = [];
  const alphaMap = {
    25: 0.025,
    50: 0.05,
    100: 0.1,
    200: 0.2,
    300: 0.3,
    400: 0.4,
    500: 0.5,
    600: 0.6,
    700: 0.7,
    800: 0.8,
    900: 0.9
  };
  Object.entries(alphaMap).forEach(([shade, alpha]) => {
    const cssVariableAlphaRule = `.${id} { --nv-${key}-${shade}: oklch(from ${color} l c h / ${alpha}); }`;
    rules.push(cssVariableAlphaRule);
  });
  return rules;
}
function generateFontSizeRules(props) {
  const { id, baseFontSize } = props;
  const sizeRatios = {
    xs: 0.65625,
    sm: 0.765625,
    base: 0.875,
    lg: 0.984375,
    xl: 1.09375,
    "2xl": 1.3125,
    "3xl": 1.640625,
    "4xl": 1.96875
  };
  const rules = [];
  Object.entries(sizeRatios).forEach(([key, ratio]) => {
    const size = `calc(${baseFontSize} * ${ratio})`;
    const lineHeight = `calc(${baseFontSize} * ${ratio} * 1.33)`;
    const cssVariableRule = `.${id} { --nv-font-size-${key}: ${size}; --nv-line-height-${key}: ${lineHeight}; }`;
    rules.push(cssVariableRule);
  });
  return rules;
}
function generateBorderRadiusRules(props) {
  const { id, baseRadius } = props;
  const radiusRatios = {
    none: 0,
    xs: 0.333,
    sm: 0.667,
    md: 1,
    lg: 1.333,
    xl: 2,
    "2xl": 2.667,
    "3xl": 4,
    full: 9999
  };
  const rules = [];
  Object.entries(radiusRatios).forEach(([key, ratio]) => {
    const value = key === "none" ? "0px" : key === "full" ? "9999px" : `calc(${baseRadius} * ${ratio})`;
    const cssVariableRule = `.${id} { --nv-radius-${key}: ${value}; }`;
    rules.push(cssVariableRule);
  });
  return rules;
}
var parseVariables = (variables, id) => {
  const rules = [
    generateDefaultColor({ color: variables.colorBackground, key: "color-background", id }),
    generateDefaultColor({ color: variables.colorForeground, key: "color-foreground", id }),
    generateDefaultColor({ color: variables.colorPrimary, key: "color-primary", id }),
    generateDefaultColor({ color: variables.colorPrimaryForeground, key: "color-primary-foreground", id }),
    generateDefaultColor({ color: variables.colorSecondary, key: "color-secondary", id }),
    generateDefaultColor({ color: variables.colorSecondaryForeground, key: "color-secondary-foreground", id }),
    generateDefaultColor({ color: variables.colorCounter, key: "color-counter", id }),
    generateDefaultColor({ color: variables.colorCounterForeground, key: "color-counter-foreground", id }),
    generateDefaultColor({ color: variables.colorShadow, key: "color-shadow", id }),
    generateDefaultColor({ color: variables.colorRing, key: "color-ring", id }),
    generateDefaultColor({ color: variables.colorStripes, key: "color-stripes", id }),
    ...generateAlphaShadeRulesFromColor({ color: variables.colorBackground, key: "color-background-alpha", id }),
    ...generateAlphaShadeRulesFromColor({ color: variables.colorForeground, key: "color-foreground-alpha", id }),
    ...generateSolidShadeRulesFromColor({ color: variables.colorPrimary, key: "color-primary", id }),
    ...generateAlphaShadeRulesFromColor({ color: variables.colorPrimary, key: "color-primary-alpha", id }),
    ...generateAlphaShadeRulesFromColor({
      color: variables.colorPrimaryForeground,
      key: "color-primary-foreground-alpha",
      id
    }),
    ...generateSolidShadeRulesFromColor({ color: variables.colorSecondary, key: "color-secondary", id }),
    ...generateAlphaShadeRulesFromColor({ color: variables.colorSecondary, key: "color-secondary-alpha", id }),
    ...generateAlphaShadeRulesFromColor({
      color: variables.colorSecondaryForeground,
      key: "color-secondary-foreground-alpha",
      id
    }),
    ...generateAlphaShadeRulesFromColor({ color: variables.colorNeutral, key: "color-neutral-alpha", id }),
    ...generateFontSizeRules({ id, baseFontSize: variables.fontSize }),
    ...generateBorderRadiusRules({ id, baseRadius: variables.borderRadius })
  ];
  return rules;
};
var parseElements = (elements) => {
  const elementsStyleData = [];
  const generatedClassNames = /* @__PURE__ */ new Set();
  for (const key in elements) {
    if (elements.hasOwnProperty(key)) {
      const value = elements[key];
      if (typeof value === "object") {
        const cssString = cssObjectToString(value);
        const { className, rule } = createClassAndRuleFromCssString(generatedClassNames, cssString);
        elementsStyleData.push({ key, rule, className });
      }
    }
  }
  const sortedElementsStyleData = elementsStyleData.sort((a, b) => {
    const countA = (a.key.match(/__/g) || []).length;
    const countB = (b.key.match(/__/g) || []).length;
    return countA - countB;
  });
  return sortedElementsStyleData;
};
var getTagsFromTab = (tab) => {
  var _a;
  return ((_a = tab == null ? void 0 : tab.filter) == null ? void 0 : _a.tags) || (tab == null ? void 0 : tab.value) || [];
};

// src/ui/helpers/useStyle.ts
var useStyle = () => {
  const appearance = useAppearance();
  const [isServer, setIsServer] = createSignal(true);
  onMount(() => {
    setIsServer(false);
  });
  const styleFuncMemo = createMemo(() => (appearanceKey, className) => {
    const appearanceKeyParts = appearanceKey.split("__");
    let finalAppearanceKeys = [];
    for (let i = 0; i < appearanceKeyParts.length; i += 1) {
      const accumulated = appearanceKeyParts.slice(i).join("__");
      if (appearanceKeys.includes(accumulated)) {
        finalAppearanceKeys.push(accumulated);
      }
    }
    const classes = (className == null ? void 0 : className.split(/\s+/).map((className2) => className2.replace(/^nv-/, ""))) || [];
    const appearanceKeysInClasses = classes.filter(
      (className2) => appearanceKeys.includes(className2)
    );
    finalAppearanceKeys = Array.from(
      /* @__PURE__ */ new Set([...finalAppearanceKeys, ...appearanceKeysInClasses])
    );
    finalAppearanceKeys.sort((a, b) => {
      const countA = (a.match(/__/g) || []).length;
      const countB = (b.match(/__/g) || []).length;
      return countB - countA;
    });
    const finalClassName = classes.filter((className2) => !finalAppearanceKeys.includes(className2)).join(" ");
    let appearanceClassnames = [];
    const reversedFinalAppearanceKeys = finalAppearanceKeys.reverse();
    for (let i = 0; i < reversedFinalAppearanceKeys.length; i += 1) {
      if (typeof appearance.elements()[reversedFinalAppearanceKeys[i]] === "string") {
        appearanceClassnames.push(appearance.elements()[reversedFinalAppearanceKeys[i]]);
      }
    }
    appearanceClassnames = [publicFacingTwMerge(appearanceClassnames)];
    const cssInJsClasses = !!finalAppearanceKeys.length && !isServer() ? finalAppearanceKeys.map((appKey) => appearance.appearanceKeyToCssInJsClass[appKey]) : [];
    return cn(
      ...finalAppearanceKeys.map((key) => `nv-${key}`),
      "\u{1F514}",
      finalClassName,
      // default styles
      appearanceClassnames,
      ...cssInJsClasses
    );
  });
  return styleFuncMemo();
};
function useUncontrolledState(props) {
  const [uncontrolledValue, setUncontrolledValue] = createSignal(!!props.fallbackValue);
  if (props.value !== void 0) {
    const accessor = () => !!props.value;
    return [accessor, setUncontrolledValue];
  }
  return [uncontrolledValue, setUncontrolledValue];
}

// src/ui/context/AppearanceContext.tsx
var AppearanceContext = createContext(void 0);
var AppearanceProvider = (props) => {
  const [store, setStore] = createStore({
    appearanceKeyToCssInJsClass: {}
  });
  const [styleElement, setStyleElement] = createSignal(null);
  const [elementRules, setElementRules] = createSignal([]);
  const [variableRules, setVariableRules] = createSignal([]);
  const themes = createMemo(() => {
    var _a, _b, _c;
    return Array.isArray((_a = props.appearance) == null ? void 0 : _a.baseTheme) ? ((_b = props.appearance) == null ? void 0 : _b.baseTheme) || [] : [((_c = props.appearance) == null ? void 0 : _c.baseTheme) || {}];
  });
  const id = () => props.id;
  const variables = () => {
    var _a;
    return ((_a = props.appearance) == null ? void 0 : _a.variables) || {};
  };
  const animations = () => {
    var _a, _b;
    return (_b = (_a = props.appearance) == null ? void 0 : _a.animations) != null ? _b : true;
  };
  const allElements = createMemo(() => {
    var _a;
    const baseElements = themes().reduce((acc, obj) => __spreadValues(__spreadValues({}, acc), obj.elements || {}), {});
    return __spreadValues(__spreadValues({}, baseElements), ((_a = props.appearance) == null ? void 0 : _a.elements) || {});
  });
  onMount(() => {
    const el = document.getElementById(props.id);
    if (el) {
      setStyleElement(el);
      return;
    }
    const styleEl = document.createElement("style");
    styleEl.id = props.id;
    document.head.appendChild(styleEl);
    setStyleElement(styleEl);
    onCleanup(() => {
      const element = document.getElementById(props.id);
      if (element) {
        element.remove();
      }
    });
  });
  createEffect(() => {
    var _a;
    const styleEl = styleElement();
    if (!styleEl) {
      return;
    }
    const baseVariables = __spreadValues(__spreadValues({}, defaultVariables), themes().reduce((acc, obj) => __spreadValues(__spreadValues({}, acc), obj.variables || {}), {}));
    setVariableRules(parseVariables(__spreadValues(__spreadValues({}, baseVariables), ((_a = props.appearance) == null ? void 0 : _a.variables) || {}), props.id));
  });
  createEffect(() => {
    const styleEl = styleElement();
    if (!styleEl) {
      return;
    }
    const elementsStyleData = parseElements(allElements());
    setStore("appearanceKeyToCssInJsClass", (obj) => __spreadValues(__spreadValues({}, obj), elementsStyleData.reduce((acc, item) => {
      acc[item.key] = item.className;
      return acc;
    }, {})));
    setElementRules(elementsStyleData.map((el) => el.rule));
  });
  createEffect(() => {
    const styleEl = styleElement();
    if (!styleEl) {
      return;
    }
    styleEl.innerHTML = [...variableRules(), ...elementRules()].join(" ");
  });
  return createComponent(AppearanceContext.Provider, {
    get value() {
      return {
        elements: allElements,
        variables,
        appearanceKeyToCssInJsClass: store.appearanceKeyToCssInJsClass,
        // stores are reactive
        animations,
        id
      };
    },
    get children() {
      return props.children;
    }
  });
};
function useAppearance() {
  const context = useContext(AppearanceContext);
  if (!context) {
    throw new Error("useAppearance must be used within an AppearanceProvider");
  }
  return context;
}
var useNovuEvent = ({
  event,
  eventHandler
}) => {
  const novu = useNovu();
  onMount(() => {
    const cleanup = novu.on(event, eventHandler);
    onCleanup(() => {
      cleanup();
    });
  });
};

// src/ui/helpers/browser.ts
function requestLock(id, cb) {
  let isFulfilled = false;
  let promiseResolve;
  const promise = new Promise((resolve) => {
    promiseResolve = resolve;
  });
  navigator.locks.request(id, () => {
    if (!isFulfilled) {
      cb(id);
    }
    return promise;
  });
  return () => {
    isFulfilled = true;
    promiseResolve();
  };
}
var useBrowserTabsChannel = ({
  channelName,
  onMessage
}) => {
  const [tabsChannel] = createSignal(new BroadcastChannel(channelName));
  const postMessage = (args) => {
    const channel = tabsChannel();
    channel.postMessage(args);
  };
  onMount(() => {
    const listener = (event) => {
      onMessage(event.data);
    };
    const channel = tabsChannel();
    channel.addEventListener("message", listener);
    onCleanup(() => {
      channel.removeEventListener("message", listener);
    });
  });
  return { postMessage };
};

// src/ui/helpers/useWebSocketEvent.ts
var useWebSocketEvent = ({
  event: webSocketEvent,
  eventHandler: onMessage
}) => {
  const novu = useNovu();
  const channelName = `nv_ws_connection:a=${novu.applicationIdentifier}:s=${novu.subscriberId}:e=${webSocketEvent}`;
  const { postMessage } = useBrowserTabsChannel({ channelName, onMessage });
  const updateReadCount = (data) => {
    onMessage(data);
    postMessage(data);
  };
  onMount(() => {
    let cleanup;
    const resolveLock = requestLock(channelName, () => {
      cleanup = novu.on(webSocketEvent, updateReadCount);
    });
    onCleanup(() => {
      if (cleanup) {
        cleanup();
      }
      resolveLock();
    });
  });
};
var LocalizationContext = createContext(void 0);
var LocalizationProvider = (props) => {
  const localization = createMemo(() => {
    const _a = props.localization || {}, {
      dynamic
    } = _a, localizationObject = __objRest(_a, [
      "dynamic"
    ]);
    return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, defaultLocalization), dynamicLocalization()), dynamic || {}), localizationObject);
  });
  const t = (key, ...args) => {
    const value = localization()[key];
    if (typeof value === "function") {
      return value(args[0]);
    }
    return value;
  };
  const locale = createMemo(() => localization().locale);
  return createComponent(LocalizationContext.Provider, {
    value: {
      t,
      locale
    },
    get children() {
      return props.children;
    }
  });
};
function useLocalization() {
  const context = useContext(LocalizationContext);
  if (!context) {
    throw new Error("useLocalization must be used within an LocalizationProvider");
  }
  return context;
}

// src/ui/types.ts
var NotificationStatus = /* @__PURE__ */ ((NotificationStatus2) => {
  NotificationStatus2["UNREAD_READ"] = "unreadRead";
  NotificationStatus2["UNREAD"] = "unread";
  NotificationStatus2["ARCHIVED"] = "archived";
  NotificationStatus2["SNOOZED"] = "snoozed";
  return NotificationStatus2;
})(NotificationStatus || {});

// src/ui/context/InboxContext.tsx
var InboxContext = createContext(void 0);
var STATUS_TO_FILTER = {
  ["unreadRead" /* UNREAD_READ */]: {
    archived: false,
    snoozed: false
  },
  ["unread" /* UNREAD */]: {
    read: false,
    snoozed: false
  },
  ["archived" /* ARCHIVED */]: {
    archived: true
  },
  ["snoozed" /* SNOOZED */]: {
    snoozed: true
  }
};
var DEFAULT_LIMIT = 10;
var InboxProvider = (props) => {
  var _a;
  const [isOpened, setIsOpened] = createSignal(false);
  const [tabs, setTabs] = createSignal(props.tabs);
  const [activeTab, setActiveTab] = createSignal((_a = props.tabs[0] && props.tabs[0].label) != null ? _a : "");
  const [status, setStatus] = createSignal("unreadRead" /* UNREAD_READ */);
  const [limit, setLimit] = createSignal(DEFAULT_LIMIT);
  const [filter, setFilter] = createSignal(__spreadProps(__spreadValues({}, STATUS_TO_FILTER["unreadRead" /* UNREAD_READ */]), {
    tags: props.tabs.length > 0 ? getTagsFromTab(props.tabs[0]) : []
  }));
  const [hideBranding, setHideBranding] = createSignal(false);
  const [isDevelopmentMode, setIsDevelopmentMode] = createSignal(false);
  const [maxSnoozeDurationHours, setMaxSnoozeDurationHours] = createSignal(0);
  const isSnoozeEnabled = createMemo(() => maxSnoozeDurationHours() > 0);
  const [preferencesFilter, setPreferencesFilter] = createSignal(props.preferencesFilter);
  const setNewStatus = (newStatus) => {
    setStatus(newStatus);
    setFilter((old) => __spreadProps(__spreadValues({}, STATUS_TO_FILTER[newStatus]), {
      tags: old.tags
    }));
  };
  const setNewActiveTab = (newActiveTab) => {
    const tab = tabs().find((tab2) => tab2.label === newActiveTab);
    const tags = getTagsFromTab(tab);
    if (!tags) {
      return;
    }
    setActiveTab(newActiveTab);
    setFilter((old) => __spreadProps(__spreadValues({}, old), {
      tags
    }));
  };
  const navigate = (url, target) => {
    if (!url) {
      return;
    }
    const isAbsoluteUrl = !url.startsWith("/");
    if (isAbsoluteUrl) {
      window.open(url, target != null ? target : DEFAULT_TARGET, DEFAULT_REFERRER);
      return;
    }
    if (props.routerPush) {
      props.routerPush(url);
      return;
    }
    const fullUrl = new URL(url, window.location.href);
    const pushState = window.history.pushState.bind(window.history);
    pushState({}, "", fullUrl);
  };
  createEffect(() => {
    var _a2;
    setTabs(props.tabs);
    const firstTab = props.tabs[0];
    const tags = getTagsFromTab(firstTab);
    setActiveTab((_a2 = firstTab == null ? void 0 : firstTab.label) != null ? _a2 : "");
    setFilter((old) => __spreadProps(__spreadValues({}, old), {
      tags
    }));
    setPreferencesFilter(props.preferencesFilter);
  });
  useNovuEvent({
    event: "session.initialize.resolved",
    eventHandler: ({
      data
    }) => {
      if (!data) {
        return;
      }
      setHideBranding(data.removeNovuBranding);
      setIsDevelopmentMode(data.isDevelopmentMode);
      setMaxSnoozeDurationHours(data.maxSnoozeDurationHours);
    }
  });
  return createComponent(InboxContext.Provider, {
    value: {
      status,
      setStatus: setNewStatus,
      filter,
      tabs,
      activeTab,
      setActiveTab: setNewActiveTab,
      limit,
      setLimit,
      isOpened,
      setIsOpened,
      navigate,
      hideBranding,
      preferencesFilter,
      isDevelopmentMode,
      maxSnoozeDurationHours,
      isSnoozeEnabled
    },
    get children() {
      return props.children;
    }
  });
};
var useInboxContext = () => {
  const context = useContext(InboxContext);
  if (!context) {
    throw new Error("useInboxContext must be used within a InboxProvider");
  }
  return context;
};
var NovuContext = createContext(void 0);
function NovuProvider(props) {
  const novu = createMemo(() => props.novu || new Novu(props.options));
  return createComponent(NovuContext.Provider, {
    get value() {
      return novu();
    },
    get children() {
      return props.children;
    }
  });
}
function useNovu() {
  const context = useContext(NovuContext);
  if (!context) {
    throw new Error("useNovu must be used within a NovuProvider");
  }
  return context;
}

// src/ui/context/CountContext.tsx
var MIN_AMOUNT_OF_NOTIFICATIONS = 1;
var CountContext = createContext(void 0);
var CountProvider = (props) => {
  const novu = useNovu();
  const {
    isOpened,
    tabs,
    filter,
    limit
  } = useInboxContext();
  const [totalUnreadCount, setTotalUnreadCount] = createSignal(0);
  const [unreadCounts, setUnreadCounts] = createSignal(/* @__PURE__ */ new Map());
  const [newNotificationCounts, setNewNotificationCounts] = createSignal(/* @__PURE__ */ new Map());
  const updateTabCounts = () => __async(void 0, null, function* () {
    if (tabs().length === 0) {
      return;
    }
    const filters = tabs().map((tab) => ({
      tags: getTagsFromTab(tab),
      read: false,
      archived: false,
      snoozed: false
    }));
    const {
      data
    } = yield novu.notifications.count({
      filters
    });
    if (!data) {
      return;
    }
    const newMap = /* @__PURE__ */ new Map();
    const {
      counts
    } = data;
    for (let i = 0; i < counts.length; i += 1) {
      const tagsKey = createKey(counts[i].filter.tags);
      newMap.set(tagsKey, data == null ? void 0 : data.counts[i].count);
    }
    setUnreadCounts(newMap);
  });
  onMount(() => {
    updateTabCounts();
  });
  useWebSocketEvent({
    event: "notifications.unread_count_changed",
    eventHandler: (data) => {
      setTotalUnreadCount(data.result);
      updateTabCounts();
    }
  });
  useNovuEvent({
    event: "session.initialize.resolved",
    eventHandler: ({
      data
    }) => {
      if (!data) {
        return;
      }
      setTotalUnreadCount(data.totalUnreadCount);
    }
  });
  const updateNewNotificationCountsOrCache = (notification, tags) => {
    const notificationsCache = novu.notifications.cache;
    const limitValue = limit();
    const tabFilter = __spreadProps(__spreadValues({}, filter()), {
      tags,
      after: void 0,
      limit: limitValue
    });
    const hasEmptyCache = !notificationsCache.has(tabFilter);
    if (!isOpened() && hasEmptyCache) {
      return;
    }
    const cachedData = notificationsCache.getAll(tabFilter) || {
      hasMore: false,
      filter: tabFilter,
      notifications: []
    };
    const hasLessThenMinAmount = ((cachedData == null ? void 0 : cachedData.notifications.length) || 0) < MIN_AMOUNT_OF_NOTIFICATIONS;
    if (hasLessThenMinAmount) {
      notificationsCache.update(tabFilter, __spreadProps(__spreadValues({}, cachedData), {
        notifications: [notification, ...cachedData.notifications]
      }));
      return;
    }
    setNewNotificationCounts((oldMap) => {
      const tagsKey = createKey(tags);
      const newMap = new Map(oldMap);
      newMap.set(tagsKey, (oldMap.get(tagsKey) || 0) + 1);
      return newMap;
    });
  };
  useWebSocketEvent({
    event: "notifications.notification_received",
    eventHandler: (_0) => __async(void 0, [_0], function* ({
      result: notification
    }) {
      if (filter().archived || filter().snoozed) {
        return;
      }
      const tagsMap = tabs().reduce((acc, tab) => {
        const tags = getTagsFromTab(tab);
        const tagsKey = createKey(tags);
        acc.set(tagsKey, tags);
        return acc;
      }, /* @__PURE__ */ new Map());
      const uniqueTags = Array.from(tagsMap.values());
      if (uniqueTags.length > 0) {
        for (let i = 0; i < uniqueTags.length; i += 1) {
          const tags = uniqueTags[i];
          const allNotifications = tags.length === 0;
          const includesAtLeastOneTag = tags.some((tag) => {
            var _a;
            return (_a = notification.tags) == null ? void 0 : _a.includes(tag);
          });
          if (!allNotifications && !includesAtLeastOneTag) {
            continue;
          }
          updateNewNotificationCountsOrCache(notification, tags);
        }
      } else {
        updateNewNotificationCountsOrCache(notification, []);
      }
    })
  });
  useWebSocketEvent({
    event: "notifications.notification_received",
    eventHandler: updateTabCounts
  });
  const resetNewNotificationCounts = (key) => {
    setNewNotificationCounts((oldMap) => {
      const newMap = new Map(oldMap);
      newMap.set(key, 0);
      return newMap;
    });
  };
  return createComponent(CountContext.Provider, {
    value: {
      totalUnreadCount,
      unreadCounts,
      newNotificationCounts,
      resetNewNotificationCounts
    },
    get children() {
      return props.children;
    }
  });
};
var createKey = (tags) => {
  return JSON.stringify({
    tags: tags != null ? tags : []
  });
};
var useTotalUnreadCount = () => {
  const context = useContext(CountContext);
  if (!context) {
    throw new Error("useTotalUnreadCount must be used within a CountProvider");
  }
  return {
    totalUnreadCount: context.totalUnreadCount
  };
};
var useNewMessagesCount = (props) => {
  const context = useContext(CountContext);
  if (!context) {
    throw new Error("useNewMessagesCount must be used within a CountProvider");
  }
  const key = createMemo(() => createKey(props.filter.tags));
  const count = createMemo(() => context.newNotificationCounts().get(key()) || 0);
  const reset = () => context.resetNewNotificationCounts(key());
  return {
    count,
    reset
  };
};
var useUnreadCount = (props) => {
  const context = useContext(CountContext);
  if (!context) {
    throw new Error("useUnreadCount must be used within a CountProvider");
  }
  const count = createMemo(() => context.unreadCounts().get(createKey(props.filter.tags)) || 0);
  return count;
};
var useUnreadCounts = (props) => {
  const context = useContext(CountContext);
  if (!context) {
    throw new Error("useUnreadCounts must be used within a CountProvider");
  }
  const counts = createMemo(() => props.filters.map((filter) => {
    return context.unreadCounts().get(createKey(filter.tags)) || 0;
  }));
  return counts;
};
function createFocusTrap({ element, enabled }) {
  createEffect(() => {
    const trapElement = element();
    if (!trapElement || !enabled()) return;
    const focusableElementsString = "a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex], [contenteditable]";
    const getFocusableElements = () => {
      return Array.from(trapElement.querySelectorAll(focusableElementsString)).filter(
        (el) => el.tabIndex >= 0 && !el.hasAttribute("disabled")
      );
    };
    const handleKeyDown = (event) => {
      if (event.key !== "Tab") return;
      const focusableElements2 = getFocusableElements();
      const firstFocusableElement = focusableElements2[0];
      const lastFocusableElement = focusableElements2[focusableElements2.length - 1];
      if (event.shiftKey) {
        if (document.activeElement === firstFocusableElement) {
          lastFocusableElement.focus();
          event.preventDefault();
        }
      } else {
        if (document.activeElement === lastFocusableElement) {
          firstFocusableElement.focus();
          event.preventDefault();
        }
      }
    };
    trapElement.addEventListener("keydown", handleKeyDown);
    const focusableElements = getFocusableElements();
    if (focusableElements.length > 0) {
      focusableElements[0].focus();
    }
    onCleanup(() => {
      trapElement.removeEventListener("keydown", handleKeyDown);
    });
  });
}
var useFocusTrap_default = createFocusTrap;

// src/ui/context/FocusManagerContext.tsx
var FocusManagerContext = createContext(void 0);
var FocusManagerProvider = (props) => {
  const [focusTraps, setFocusTraps] = createSignal([]);
  const setActive = (element) => {
    setFocusTraps((traps) => [...traps, element]);
  };
  const removeActive = (element) => {
    setFocusTraps((traps) => traps.filter((item) => item !== element));
  };
  const active = createMemo(() => focusTraps().length ? focusTraps()[focusTraps().length - 1] : null);
  useFocusTrap_default({
    element: () => active(),
    enabled: () => true
  });
  return createComponent(FocusManagerContext.Provider, {
    value: {
      focusTraps,
      active,
      setActive,
      removeActive
    },
    get children() {
      return props.children;
    }
  });
};
function useFocusManager() {
  const context = useContext(FocusManagerContext);
  if (!context) {
    throw new Error("useFocusManager must be used within an FocusManagerProvider");
  }
  return context;
}
var _tmpl$ = /* @__PURE__ */ template(`<div>`);
var ExternalElementRenderer = (props) => {
  let ref;
  const [local, rest] = splitProps(props, ["render"]);
  createEffect(() => {
    const unmount = local.render(ref);
    onCleanup(() => {
      unmount();
    });
  });
  return (() => {
    var _el$ = _tmpl$();
    use((el) => {
      ref = el;
    }, _el$);
    spread(_el$, rest, false, false);
    return _el$;
  })();
};
var _tmpl$2 = /* @__PURE__ */ template(`<svg xmlns=http://www.w3.org/2000/svg fill=none viewBox="0 0 20 20"><path fill=currentColor d="M5.833 8.333L10 12.5l4.166-4.167H5.833z">`);
var ArrowDropDown = (props) => {
  return (() => {
    var _el$ = _tmpl$2();
    spread(_el$, props, true, true);
    return _el$;
  })();
};
var _tmpl$3 = /* @__PURE__ */ template(`<svg viewBox="0 0 20 20"fill=none xmlns=http://www.w3.org/2000/svg><path d="M9.20425 9.99907L12.9168 13.7116L11.8563 14.7721L7.08325 9.99907L11.8563 5.22607L12.9168 6.28657L9.20425 9.99907Z"fill=currentColor>`);
var ArrowLeft = (props) => {
  return (() => {
    var _el$ = _tmpl$3();
    spread(_el$, props, true, true);
    return _el$;
  })();
};
var _tmpl$4 = /* @__PURE__ */ template(`<svg viewBox="0 0 10 12"fill=none xmlns=http://www.w3.org/2000/svg><path d="M5 12C5.6875 12 6.25 11.4462 6.25 10.7692H3.75C3.75 11.4462 4.3125 12 5 12ZM8.75 8.30769V5.23077C8.75 3.34154 7.73125 1.76 5.9375 1.34154V0.923077C5.9375 0.412308 5.51875 0 5 0C4.48125 0 4.0625 0.412308 4.0625 0.923077V1.34154C2.275 1.76 1.25 3.33538 1.25 5.23077V8.30769L0 9.53846V10.1538H10V9.53846L8.75 8.30769ZM7.5 8.92308H2.5V5.23077C2.5 3.70462 3.44375 2.46154 5 2.46154C6.55625 2.46154 7.5 3.70462 7.5 5.23077V8.92308Z"fill=currentColor>`);
function Bell(props) {
  return (() => {
    var _el$ = _tmpl$4();
    spread(_el$, props, true, true);
    return _el$;
  })();
}
var _tmpl$5 = /* @__PURE__ */ template(`<svg viewBox="0 0 10 10"fill=none xmlns=http://www.w3.org/2000/svg><path d="M0.625 9.375L2.93989 8.86059C3.5538 9.18889 4.25516 9.375 5 9.375C7.41622 9.375 9.375 7.41622 9.375 5C9.375 2.58375 7.41622 0.625 5 0.625C2.58375 0.625 0.625 2.58375 0.625 5C0.625 5.74484 0.81113 6.4462 1.13942 7.0601L0.625 9.375ZM6.50881 2.8125L6.43224 3.68761H7.1875V4.56259H6.35568L6.27912 5.43759H7.1875V6.31259H6.2026L6.12604 7.1875H5.24771L5.32423 6.31259H4.44591L4.36934 7.1875H3.49101L3.56755 6.31259H2.8125V5.43759H3.64411L3.72066 4.56259H2.8125V3.68761H3.79721L3.87377 2.8125H4.75211L4.67555 3.68761H5.55392L5.63048 2.8125H6.50881ZM4.59899 4.56259L4.52247 5.43759H5.40079L5.47736 4.56259H4.59899Z"fill=currentColor>`);
var Chat = (props) => {
  return (() => {
    var _el$ = _tmpl$5();
    spread(_el$, props, true, true);
    return _el$;
  })();
};
var _tmpl$6 = /* @__PURE__ */ template(`<svg viewBox="0 0 8 6"fill=none xmlns=http://www.w3.org/2000/svg><path d="M2.99994 4.58847L7.33298 0L8 0.705765L2.99994 6L0 2.82356L0.666549 2.11779L2.99994 4.58847Z"fill=currentColor>`);
var Check = (props) => {
  return (() => {
    var _el$ = _tmpl$6();
    spread(_el$, props, true, true);
    return _el$;
  })();
};
var _tmpl$7 = /* @__PURE__ */ template(`<svg xmlns=http://www.w3.org/2000/svg fill=none viewBox="0 0 20 20"><path fill=currentColor d="M5 8.333c-.917 0-1.667.75-1.667 1.667s.75 1.667 1.667 1.667c.916 0 1.666-.75 1.666-1.667S5.916 8.333 5 8.333zm10 0c-.917 0-1.667.75-1.667 1.667s.75 1.667 1.667 1.667c.916 0 1.666-.75 1.666-1.667S15.916 8.333 15 8.333zm-5 0c-.917 0-1.667.75-1.667 1.667s.75 1.667 1.667 1.667c.916 0 1.666-.75 1.666-1.667S10.916 8.333 10 8.333z">`);
var Dots = (props) => {
  return (() => {
    var _el$ = _tmpl$7();
    spread(_el$, props, true, true);
    return _el$;
  })();
};
var _tmpl$8 = /* @__PURE__ */ template(`<svg viewBox="0 0 10 10"fill=none xmlns=http://www.w3.org/2000/svg><path d="M4.20703 1.875H2.8125H2.10547H1.875V2.04688V2.8125V3.60156V5.33984L0.00390625 3.95508C0.0351562 3.60156 0.216797 3.27344 0.505859 3.06055L0.9375 2.74023V1.875C0.9375 1.35742 1.35742 0.9375 1.875 0.9375H3.37109L4.3457 0.216797C4.53516 0.0761719 4.76367 0 5 0C5.23633 0 5.46484 0.0761719 5.6543 0.214844L6.62891 0.9375H8.125C8.64258 0.9375 9.0625 1.35742 9.0625 1.875V2.74023L9.49414 3.06055C9.7832 3.27344 9.96484 3.60156 9.99609 3.95508L8.125 5.33984V3.60156V2.8125V2.04688V1.875H7.89453H7.1875H5.79297H4.20508H4.20703ZM0 8.75V4.72852L4.25 7.87695C4.4668 8.03711 4.73047 8.125 5 8.125C5.26953 8.125 5.5332 8.03906 5.75 7.87695L10 4.72852V8.75C10 9.43945 9.43945 10 8.75 10H1.25C0.560547 10 0 9.43945 0 8.75ZM3.4375 3.125H6.5625C6.73438 3.125 6.875 3.26562 6.875 3.4375C6.875 3.60938 6.73438 3.75 6.5625 3.75H3.4375C3.26562 3.75 3.125 3.60938 3.125 3.4375C3.125 3.26562 3.26562 3.125 3.4375 3.125ZM3.4375 4.375H6.5625C6.73438 4.375 6.875 4.51562 6.875 4.6875C6.875 4.85938 6.73438 5 6.5625 5H3.4375C3.26562 5 3.125 4.85938 3.125 4.6875C3.125 4.51562 3.26562 4.375 3.4375 4.375Z"fill=currentColor>`);
var Email = (props) => {
  return (() => {
    var _el$ = _tmpl$8();
    spread(_el$, props, true, true);
    return _el$;
  })();
};
var _tmpl$9 = /* @__PURE__ */ template(`<svg viewBox="0 0 10 12"fill=none xmlns=http://www.w3.org/2000/svg><path d="M4.99962 0.856934C4.64404 0.856934 4.35676 1.14421 4.35676 1.49979V1.88551C2.89024 2.18283 1.78533 3.48059 1.78533 5.03551V5.41318C1.78533 6.35738 1.43779 7.26943 0.810999 7.97658L0.662339 8.14332C0.493589 8.33216 0.45341 8.60336 0.555865 8.83439C0.658321 9.06542 0.889348 9.21408 1.14247 9.21408H8.85676C9.10988 9.21408 9.3389 9.06542 9.44337 8.83439C9.54783 8.60336 9.50564 8.33216 9.33689 8.14332L9.18823 7.97658C8.56145 7.26943 8.2139 6.35939 8.2139 5.41318V5.03551C8.2139 3.48059 7.10899 2.18283 5.64247 1.88551V1.49979C5.64247 1.14421 5.3552 0.856934 4.99962 0.856934ZM5.90966 10.767C6.15073 10.5259 6.28533 10.1985 6.28533 9.85693H4.99962H3.7139C3.7139 10.1985 3.8485 10.5259 4.08957 10.767C4.33064 11.008 4.6581 11.1426 4.99962 11.1426C5.34113 11.1426 5.66859 11.008 5.90966 10.767Z"fill=currentColor>`);
var InApp = (props) => {
  return (() => {
    var _el$ = _tmpl$9();
    spread(_el$, props, true, true);
    return _el$;
  })();
};
var _tmpl$10 = /* @__PURE__ */ template(`<svg viewBox="0 0 10 10"fill=none xmlns=http://www.w3.org/2000/svg><path d="M2.29671 10C1.78742 10 1.39807 9.85716 1.12864 9.57149C0.862497 9.28581 0.729426 8.86623 0.729426 8.31274V2.64594H1.69543V8.29668C1.69543 8.52163 1.74964 8.69487 1.85806 8.81624C1.96978 8.93408 2.12914 8.99301 2.33614 8.99301H7.66389C7.86764 8.99301 8.02366 8.93408 8.13209 8.81624C8.24385 8.69487 8.29965 8.52163 8.29965 8.29668V2.64594H9.27059V8.31274C9.27059 8.8627 9.13591 9.28048 8.86648 9.56608C8.59705 9.85536 8.20931 10 7.70333 10H2.29671ZM3.41056 5.34543C3.29556 5.34543 3.20028 5.30438 3.1247 5.22226C3.04913 5.14015 3.01134 5.03304 3.01134 4.90089V4.72949C3.01134 4.59737 3.04749 4.49204 3.11977 4.41348C3.19535 4.33492 3.29227 4.29564 3.41056 4.29564H6.5944C6.71271 4.29564 6.80795 4.33492 6.88026 4.41348C6.95582 4.49204 6.9936 4.59737 6.9936 4.72949V4.90089C6.9936 5.03304 6.95582 5.14015 6.88026 5.22226C6.8047 5.30438 6.70939 5.34543 6.5944 5.34543H3.41056ZM1.05964 3.16014C0.724502 3.16014 0.463285 3.05301 0.276004 2.83877C0.0920037 2.62095 0 2.33172 0 1.97107V1.18907C0 0.824846 0.0952841 0.535614 0.28586 0.321373C0.476428 0.107124 0.734358 0 1.05964 0H8.94536C9.27715 0 9.53511 0.107124 9.71911 0.321373C9.90642 0.535614 10 0.824846 10 1.18907V1.97107C10 2.33172 9.90642 2.62095 9.71911 2.83877C9.53511 3.05301 9.27715 3.16014 8.94536 3.16014H1.05964ZM1.24693 2.19067H8.75805C8.87304 2.19067 8.95516 2.16211 9.00448 2.10497C9.05372 2.04427 9.07838 1.95322 9.07838 1.83181V1.32833C9.07838 1.20335 9.05372 1.1123 9.00448 1.05517C8.95516 0.99803 8.87304 0.969462 8.75805 0.969462H1.24693C1.13193 0.969462 1.04814 0.99803 0.995567 1.05517C0.946281 1.1123 0.921638 1.20335 0.921638 1.32833V1.83181C0.921638 1.95322 0.946281 2.04427 0.995567 2.10497C1.04814 2.16211 1.13193 2.19067 1.24693 2.19067Z"fill=currentColor>`);
var MarkAsArchived = (props) => {
  return (() => {
    var _el$ = _tmpl$10();
    spread(_el$, props, true, true);
    return _el$;
  })();
};
var _tmpl$11 = /* @__PURE__ */ template(`<svg viewBox="0 0 11 11"fill=none xmlns=http://www.w3.org/2000/svg><path d="M2.17256 10.999C1.69081 10.999 1.3225 10.8562 1.06763 10.5705C0.815875 10.2848 0.689997 9.86525 0.689997 9.31177V3.64497H1.60378V9.2957C1.60378 9.52066 1.65506 9.6939 1.75763 9.81526C1.8633 9.93311 2.01405 9.99203 2.20986 9.99203H7.24963C7.44236 9.99203 7.58995 9.93311 7.69252 9.81526C7.79823 9.6939 7.85102 9.52066 7.85102 9.2957V3.64497H8.76947V9.31177C8.76947 9.86173 8.64208 10.2795 8.38721 10.5651C8.13235 10.8544 7.76556 10.999 7.28693 10.999H2.17256ZM1.00236 4.15916C0.68534 4.15916 0.438242 4.05204 0.261085 3.83779C0.0870305 3.61997 0 3.33074 0 2.97009V2.18809C0 1.82387 0.0901336 1.53464 0.270408 1.3204C0.450675 1.10615 0.694663 0.999023 1.00236 0.999023H8.46182C8.77568 0.999023 9.0197 1.10615 9.19375 1.3204C9.37094 1.53464 9.45946 1.82387 9.45946 2.18809V2.97009C9.45946 3.33074 9.37094 3.61997 9.19375 3.83779C9.0197 4.05204 8.77568 4.15916 8.46182 4.15916H1.00236ZM1.17953 3.1897H8.28464C8.39342 3.1897 8.4711 3.16113 8.51775 3.10399C8.56433 3.04329 8.58765 2.95224 8.58765 2.83083V2.32735C8.58765 2.20238 8.56433 2.11132 8.51775 2.05419C8.4711 1.99705 7.51461 1.96849 7.40583 1.96849H1.17953C1.07074 1.96849 0.991485 1.99705 0.941753 2.05419C0.895131 2.11132 0.87182 2.20238 0.87182 2.32735V2.83083C0.87182 2.95224 0.895131 3.04329 0.941753 3.10399C0.991485 3.16113 1.07074 3.1897 1.17953 3.1897Z"fill=currentColor></path><path d="M9.67298 0.553711C9.84703 0.556646 10.0146 0.614475 10.1535 0.716797L10.2208 0.771484L10.2814 0.833008C10.3958 0.960612 10.4679 1.11928 10.4913 1.28711L10.4992 1.37109L10.4982 1.45605C10.4872 1.64689 10.4124 1.8301 10.2833 1.97559L10.2843 1.97656L7.55482 5.15039L7.55384 5.14941C7.40234 5.3265 7.18382 5.43557 6.94642 5.44336L6.93861 5.44434H6.92005V5.44336C6.69203 5.44397 6.47619 5.35201 6.31947 5.19141L6.31849 5.18945L5.29505 4.13184C5.08531 3.91498 5.00658 3.60427 5.08118 3.31641L5.11634 3.21094C5.2129 2.97124 5.41476 2.78187 5.67396 2.70996L5.78626 2.68652C6.01138 2.65637 6.23763 2.72008 6.41419 2.85938L6.49818 2.93555L6.8849 3.33496L9.0138 0.859375V0.860352C9.15512 0.688807 9.35911 0.576792 9.58509 0.556641L9.67298 0.553711Z"fill=currentColor stroke=white>`);
var MarkAsArchivedRead = (props) => {
  return (() => {
    var _el$ = _tmpl$11();
    spread(_el$, props, true, true);
    return _el$;
  })();
};
var _tmpl$12 = /* @__PURE__ */ template(`<svg viewBox="0 0 10 10"fill=none xmlns=http://www.w3.org/2000/svg><g clip-path=url(#clip0_3445_1172)><path d="M9 9.99902H1C0.867383 9.99902 0.7402 9.94635 0.64645 9.85257C0.552667 9.75882 0.5 9.63164 0.5 9.49902V0.499023C0.5 0.366407 0.552669 0.239223 0.64645 0.145473C0.7402 0.0516901 0.867383 -0.000976562 1 -0.000976562H6.25C6.42865 -0.000976562 6.59368 0.0943401 6.68301 0.249023C6.77233 0.403707 6.77233 0.59434 6.68301 0.749023C6.59368 0.903707 6.42865 0.999023 6.25 0.999023H1.5V8.99902H8.5V4.49902C8.5 4.32037 8.59532 4.15534 8.75 4.06602C8.90468 3.97669 9.09532 3.97669 9.25 4.06602C9.40468 4.15534 9.5 4.32037 9.5 4.49902V9.49902C9.5 9.63164 9.44733 9.75882 9.35355 9.85257C9.2598 9.94636 9.13262 9.99902 9 9.99902Z"fill=currentColor></path><path d="M7.5 8.24902H2.5C2.32135 8.24902 2.15632 8.15371 2.06699 7.99902C1.97767 7.84434 1.97767 7.65371 2.06699 7.49902C2.15632 7.34434 2.32135 7.24902 2.5 7.24902H7.5C7.67865 7.24902 7.84368 7.34434 7.93301 7.49902C8.02233 7.65371 8.02233 7.84434 7.93301 7.99902C7.84368 8.15371 7.67865 8.24902 7.5 8.24902Z"fill=currentColor></path><path d="M4.75 6.49901C4.61709 6.49979 4.48936 6.44761 4.39498 6.35403L2.89498 4.85403C2.76816 4.72717 2.71865 4.54235 2.76507 4.36907C2.81149 4.19583 2.94681 4.06051 3.12005 4.01409C3.29332 3.96767 3.47816 4.01718 3.60501 4.14401L4.73001 5.269L8.37501 1.16901C8.46056 1.06279 8.58578 0.996155 8.72169 0.984497C8.8576 0.972843 8.99233 1.01718 9.09474 1.10728C9.19712 1.19738 9.25825 1.32541 9.26398 1.46167C9.26968 1.59796 9.21948 1.73065 9.12502 1.82902L5.12502 6.32902C5.03371 6.43306 4.90337 6.49461 4.76502 6.49901L4.75 6.49901Z"fill=currentColor></path></g><defs><clipPath id=clip0_3445_1172><rect width=10 height=10 fill=white transform="translate(0 -0.000976562)">`);
var MarkAsRead = (props) => {
  return (() => {
    var _el$ = _tmpl$12();
    spread(_el$, props, true, true);
    return _el$;
  })();
};
var _tmpl$13 = /* @__PURE__ */ template(`<svg viewBox="0 0 10 10"fill=none xmlns=http://www.w3.org/2000/svg><path d="M3.15789 2.99902V4.99902L0 2.49902L3.15789 -0.000976562V1.99902H5.78947C6.90618 1.99902 7.97714 2.42045 8.76677 3.1706C9.55639 3.92074 10 4.93816 10 5.99902C10 7.05989 9.55639 8.0773 8.76677 8.82745C7.97714 9.5776 6.90618 9.99902 5.78947 9.99902H1.05263V8.99902H5.78947C6.627 8.99902 7.43022 8.68295 8.02244 8.12034C8.61466 7.55773 8.94737 6.79467 8.94737 5.99902C8.94737 5.20337 8.61466 4.44031 8.02244 3.8777C7.43022 3.31509 6.627 2.99902 5.78947 2.99902H3.15789Z"fill=currentColor>`);
var MarkAsUnarchived = (props) => {
  return (() => {
    var _el$ = _tmpl$13();
    spread(_el$, props, true, true);
    return _el$;
  })();
};
var _tmpl$14 = /* @__PURE__ */ template(`<svg viewBox="0 0 11 11"fill=none xmlns=http://www.w3.org/2000/svg><path d="M6.8 1.49902H1.5C0.947715 1.49902 0.5 1.94674 0.5 2.49902V9.49902C0.5 10.0513 0.947715 10.499 1.5 10.499H8.5C9.05228 10.499 9.5 10.0513 9.5 9.49902V4.19902"stroke=currentColor stroke-miterlimit=1 stroke-linecap=round></path><circle cx=9.25 cy=1.74902 r=1.25 fill=currentColor>`);
var MarkAsUnread = (props) => {
  return (() => {
    var _el$ = _tmpl$14();
    spread(_el$, props, true, true);
    return _el$;
  })();
};
var _tmpl$15 = /* @__PURE__ */ template(`<svg xmlns=http://www.w3.org/2000/svg fill=none viewBox="0 0 13 12"><path fill=currentColor d="M9.787.98A5.972 5.972 0 006.5 0c-.668 0-1.31.11-1.911.31L9.187 4.94c.221.222.6.065.6-.248V.98z"></path><path fill=currentColor d="M2.879 1.216A5.99 5.99 0 00.5 6c0 1.134.315 2.195.862 3.1V7.309c0-1.966 2.379-2.946 3.764-1.552l4.995 5.027A5.99 5.99 0 0012.5 6a5.972 5.972 0 00-.862-3.1v1.791c0 1.966-2.379 2.946-3.764 1.552L2.879 1.216z"></path><path fill=currentColor d="M8.411 11.69L3.813 7.06a.351.351 0 00-.6.248v3.711c.944.62 2.073.98 3.287.98.668 0 1.31-.11 1.911-.31z">`);
var Novu2 = (props) => {
  return (() => {
    var _el$ = _tmpl$15();
    spread(_el$, props, true, true);
    return _el$;
  })();
};
var _tmpl$16 = /* @__PURE__ */ template(`<svg viewBox="0 0 10 16"fill=none xmlns=http://www.w3.org/2000/svg><path d="M4.12531 1.8999C3.94958 1.8999 3.80713 2.04235 3.80713 2.21808C3.80713 2.39382 3.94958 2.53627 4.12531 2.53627H6.0344C6.21013 2.53627 6.35258 2.39382 6.35258 2.21808C6.35258 2.04235 6.21013 1.8999 6.0344 1.8999H4.12531Z"fill=currentColor></path><path d="M4.12531 1.8999C3.94958 1.8999 3.80713 2.04235 3.80713 2.21808C3.80713 2.39382 3.94958 2.53627 4.12531 2.53627H6.0344C6.21013 2.53627 6.35258 2.39382 6.35258 2.21808C6.35258 2.04235 6.21013 1.8999 6.0344 1.8999H4.12531Z"stroke=currentColor></path><path d="M2.69329 1.46818H7.30693C7.75127 1.46818 8.11147 1.82839 8.11147 2.27273V13.7273C8.11147 14.1716 7.75127 14.5318 7.30693 14.5318H2.69329C2.24896 14.5318 1.88875 14.1716 1.88875 13.7273V2.27273C1.88875 1.82839 2.24896 1.46818 2.69329 1.46818ZM2.69329 0.85C1.90754 0.85 1.27057 1.48698 1.27057 2.27273V2.95695C1.17568 3.00972 1.11147 3.111 1.11147 3.22727V3.54545C1.11147 3.64155 1.15532 3.7274 1.22411 3.78409C1.15532 3.84078 1.11147 3.92663 1.11147 4.02273V4.65909C1.11147 4.75519 1.15532 4.84104 1.22411 4.89773C1.15532 4.95442 1.11147 5.04027 1.11147 5.13636V6.09091C1.11147 6.20718 1.17568 6.30846 1.27057 6.36123V13.7273C1.27057 14.513 1.90754 15.15 2.69329 15.15H7.30693C8.09268 15.15 8.72966 14.513 8.72966 13.7273V6.36123C8.82454 6.30846 8.88875 6.20718 8.88875 6.09091V4.81818C8.88875 4.70191 8.82454 4.60063 8.72966 4.54786V2.27273C8.72966 1.48698 8.09268 0.85 7.30693 0.85H2.69329Z"fill=currentColor stroke=currentColor stroke-width=0.3>`);
var Push = (props) => {
  return (() => {
    var _el$ = _tmpl$16();
    spread(_el$, props, true, true);
    return _el$;
  })();
};
var _tmpl$17 = /* @__PURE__ */ template(`<svg viewBox="0 0 20 20"fill=none xmlns=http://www.w3.org/2000/svg><path d="M10 1.75L17.125 5.875V14.125L10 18.25L2.875 14.125V5.875L10 1.75ZM10 3.48325L4.375 6.73975V13.2603L10 16.5167L15.625 13.2603V6.73975L10 3.48325ZM10 13C9.20435 13 8.44129 12.6839 7.87868 12.1213C7.31607 11.5587 7 10.7956 7 10C7 9.20435 7.31607 8.44129 7.87868 7.87868C8.44129 7.31607 9.20435 7 10 7C10.7956 7 11.5587 7.31607 12.1213 7.87868C12.6839 8.44129 13 9.20435 13 10C13 10.7956 12.6839 11.5587 12.1213 12.1213C11.5587 12.6839 10.7956 13 10 13ZM10 11.5C10.3978 11.5 10.7794 11.342 11.0607 11.0607C11.342 10.7794 11.5 10.3978 11.5 10C11.5 9.60218 11.342 9.22064 11.0607 8.93934C10.7794 8.65804 10.3978 8.5 10 8.5C9.60218 8.5 9.22064 8.65804 8.93934 8.93934C8.65804 9.22064 8.5 9.60218 8.5 10C8.5 10.3978 8.65804 10.7794 8.93934 11.0607C9.22064 11.342 9.60218 11.5 10 11.5Z"fill=currentColor>`);
var Settings = (props) => {
  return (() => {
    var _el$ = _tmpl$17();
    spread(_el$, props, true, true);
    return _el$;
  })();
};
var _tmpl$18 = /* @__PURE__ */ template(`<svg viewBox="0 0 10 10"fill=none xmlns=http://www.w3.org/2000/svg><path d="M5.00051 9.28364C7.76195 9.28364 10 7.20598 10 4.64182C10 2.07766 7.76195 0 5.00051 0C2.23907 0 0.00101462 2.07766 0.00101462 4.64182C0.00101462 5.64829 0.346683 6.57889 0.932561 7.33988C0.895455 7.88663 0.709927 8.37313 0.514634 8.74358C0.407223 8.94889 0.297859 9.11404 0.21779 9.22562C0.176778 9.28141 0.145531 9.32381 0.122096 9.35282C0.110379 9.36621 0.102567 9.37737 0.096708 9.38407L0.0908493 9.39076C0.00101462 9.49342 -0.0243734 9.64517 0.0244497 9.77907C0.0732729 9.91297 0.186543 10 0.313483 10C0.873973 10 1.43837 9.80138 1.90707 9.56929C2.35429 9.34613 2.73511 9.08056 2.96751 8.88641C3.58854 9.14305 4.27597 9.28587 5.00051 9.28587V9.28364ZM1.87582 4.03481C1.87582 3.58179 2.19806 3.21357 2.5945 3.21357H2.96946C3.14132 3.21357 3.28193 3.37425 3.28193 3.57063C3.28193 3.76702 3.14132 3.92769 2.96946 3.92769H2.5945C2.54177 3.92769 2.50076 3.97679 2.50076 4.03481C2.50076 4.07052 2.51638 4.10399 2.54373 4.12408L3.11789 4.56148C3.31904 4.71323 3.43817 4.96987 3.43817 5.2466C3.43817 5.69962 3.11593 6.06784 2.71949 6.06784L2.18829 6.07007C2.01644 6.07007 1.87582 5.9094 1.87582 5.71301C1.87582 5.51663 2.01644 5.35595 2.18829 5.35595H2.71949C2.77222 5.35595 2.81323 5.30685 2.81323 5.24883C2.81323 5.21312 2.79761 5.17965 2.77026 5.15956L2.1961 4.72216C1.99691 4.56818 1.87582 4.31154 1.87582 4.03481ZM7.28153 3.21357H7.65649C7.82834 3.21357 7.96896 3.37425 7.96896 3.57063C7.96896 3.76702 7.82834 3.92769 7.65649 3.92769H7.28153C7.2288 3.92769 7.18779 3.97679 7.18779 4.03481C7.18779 4.07052 7.20341 4.10399 7.23075 4.12408L7.80491 4.56148C8.00411 4.71323 8.12519 4.96987 8.12519 5.2466C8.12519 5.69962 7.80296 6.06784 7.40651 6.06784L6.87532 6.07007C6.70346 6.07007 6.56285 5.9094 6.56285 5.71301C6.56285 5.51663 6.70346 5.35595 6.87532 5.35595H7.40651C7.45924 5.35595 7.50025 5.30685 7.50025 5.24883C7.50025 5.21312 7.48463 5.17965 7.45729 5.15956L6.88313 4.72216C6.68393 4.57041 6.56285 4.31377 6.56285 4.03705C6.56285 3.58402 6.88508 3.2158 7.28153 3.2158V3.21357ZM4.31308 3.35639L5.00051 4.40304L5.68794 3.35639C5.76801 3.23365 5.90862 3.18233 6.03751 3.23142C6.1664 3.28052 6.25038 3.41665 6.25038 3.57063V5.71301C6.25038 5.9094 6.10977 6.07007 5.93791 6.07007C5.76605 6.07007 5.62544 5.9094 5.62544 5.71301V4.64182L5.25048 5.21312C5.19189 5.30239 5.09815 5.35595 5.00051 5.35595C4.90286 5.35595 4.80912 5.30239 4.75053 5.21312L4.37557 4.64182V5.71301C4.37557 5.9094 4.23496 6.07007 4.0631 6.07007C3.89124 6.07007 3.75063 5.9094 3.75063 5.71301V3.57063C3.75063 3.41665 3.83656 3.28052 3.9635 3.23142C4.09044 3.18233 4.23105 3.23365 4.31308 3.35639Z"fill=currentColor>`);
var Sms = (props) => {
  return (() => {
    var _el$ = _tmpl$18();
    spread(_el$, props, true, true);
    return _el$;
  })();
};
var _tmpl$19 = /* @__PURE__ */ template(`<svg viewBox="0 0 10 8"fill=none xmlns=http://www.w3.org/2000/svg><path d="M1.0119 0.347055C1.06274 0.143703 1.26565 -0.000976562 1.5 -0.000976562H8.5C8.73435 -0.000976562 8.93725 0.143703 8.9881 0.347055L9.9881 4.34707C9.996 4.37871 10 4.41102 10 4.44347V7.55458C10 7.80005 9.77615 7.99902 9.5 7.99902H0.5C0.22386 7.99902 0 7.80005 0 7.55458V4.44347C0 4.41102 0.00399495 4.37871 0.011905 4.34707L1.0119 0.347055ZM1.90108 0.887912L1.12331 3.99902H3.5C3.5 4.73542 4.17155 5.33236 5 5.33236C5.82845 5.33236 6.5 4.73542 6.5 3.99902H8.8767L8.0989 0.887912H1.90108ZM7.292 4.88791C6.9062 5.67276 6.02515 6.22125 5 6.22125C3.97484 6.22125 3.0938 5.67276 2.70802 4.88791H1V7.11013H9V4.88791H7.292Z"fill=currentColor>`);
var UnreadRead = (props) => {
  return (() => {
    var _el$ = _tmpl$19();
    spread(_el$, props, true, true);
    return _el$;
  })();
};

// src/ui/components/elements/Bell/DefaultBellContainer.tsx
var _tmpl$20 = /* @__PURE__ */ template(`<span>`);
var BellContainer = (props) => {
  const style = useStyle();
  return (() => {
    var _el$ = _tmpl$20();
    insert(_el$, createComponent(Bell, {
      get ["class"]() {
        return style("bellIcon", "nt-size-4");
      }
    }), null);
    insert(_el$, createComponent(Show, {
      get when() {
        return props.unreadCount > 0;
      },
      get children() {
        var _el$2 = _tmpl$20();
        effect(() => className(_el$2, style("bellDot", "nt-absolute nt-top-0 nt-right-0 nt-block nt-size-2 nt-transform nt-bg-counter nt-rounded-full nt-border nt-border-background")));
        return _el$2;
      }
    }), null);
    effect(() => className(_el$, style("bellContainer", `nt-size-4 nt-flex nt-justify-center nt-items-center nt-relative nt-text-foreground nt-cursor-pointer`)));
    return _el$;
  })();
};

// src/ui/components/elements/Bell/Bell.tsx
var Bell2 = (props) => {
  const {
    totalUnreadCount
  } = useTotalUnreadCount();
  return createComponent(Show, {
    get when() {
      return props.renderBell;
    },
    get fallback() {
      return createComponent(BellContainer, {
        get unreadCount() {
          return totalUnreadCount();
        }
      });
    },
    get children() {
      return createComponent(ExternalElementRenderer, {
        render: (el) => props.renderBell(el, totalUnreadCount())
      });
    }
  });
};

// src/utils/is-browser.ts
function isBrowser() {
  return typeof window !== "undefined";
}

// src/ui/components/elements/Footer.tsx
var _tmpl$21 = /* @__PURE__ */ template(`<span class="nt-z-10 nt-text-xs nt-text-stripes">Development mode`);
var _tmpl$22 = /* @__PURE__ */ template(`<span class="nt-z-10 nt-text-xs">\u2022`);
var _tmpl$32 = /* @__PURE__ */ template(`<a target=_blank class="nt-z-10 nt-flex nt-items-center nt-gap-1 nt-justify-center"><span class=nt-text-xs>Inbox by</span><span class=nt-text-xs>Novu`);
var _tmpl$42 = /* @__PURE__ */ template(`<div>`);
var stripes = `before:nt-content-[""] before:nt-absolute before:nt-inset-0 before:-nt-right-[calc(0+var(--stripes-size))] before:[mask-image:linear-gradient(transparent_0%,black)] before:nt-bg-dev-stripes-gradient before:nt-bg-[length:var(--stripes-size)_var(--stripes-size)] before:nt-animate-stripes before:hover:[animation-play-state:running]`;
var commonAfter = 'after:nt-content-[""] after:nt-absolute after:nt-inset-0 after:-nt-top-12';
var devModeGradient = `${commonAfter} after:nt-bg-[linear-gradient(180deg,transparent,oklch(from_var(--nv-color-stripes)_l_c_h_/_0.07)_55%,transparent),linear-gradient(180deg,transparent,oklch(from_var(--nv-color-background)_l_c_h_/_0.9)_55%,transparent)]`;
var prodModeGradient = `${commonAfter} after:nt-bg-[linear-gradient(180deg,transparent,oklch(from_var(--nv-color-background)_l_c_h_/_0.9)_55%,transparent)]`;
var Footer = () => {
  const {
    hideBranding,
    isDevelopmentMode
  } = useInboxContext();
  return createComponent(Show, {
    get when() {
      return !hideBranding() || isDevelopmentMode();
    },
    get children() {
      var _el$ = _tmpl$42();
      _el$.style.setProperty("--stripes-size", "15px");
      insert(_el$, createComponent(Show, {
        get when() {
          return isDevelopmentMode();
        },
        get children() {
          return _tmpl$21();
        }
      }), null);
      insert(_el$, createComponent(Show, {
        get when() {
          return memo(() => !!isDevelopmentMode())() && !hideBranding();
        },
        get children() {
          return _tmpl$22();
        }
      }), null);
      insert(_el$, createComponent(Show, {
        get when() {
          return !hideBranding();
        },
        get children() {
          var _el$4 = _tmpl$32(), _el$5 = _el$4.firstChild, _el$6 = _el$5.nextSibling;
          insert(_el$4, createComponent(Novu2, {
            "class": "nt-size-2.5"
          }), _el$6);
          effect(() => setAttribute(_el$4, "href", `https://go.novu.co/powered?ref=${getCurrentDomain()}`));
          return _el$4;
        }
      }), null);
      effect(() => className(_el$, cn(`nt-relative nt-flex nt-shrink-0 nt-justify-center nt-items-center nt-gap-1 nt-mt-auto nt-py-3 nt-text-foreground-alpha-400`, {
        [stripes]: isDevelopmentMode(),
        [devModeGradient]: isDevelopmentMode(),
        "nt-bg-[oklch(from_var(--nv-color-stripes)_l_c_h_/_0.1)]": isDevelopmentMode(),
        [prodModeGradient]: !isDevelopmentMode()
      })));
      return _el$;
    }
  });
};
function getCurrentDomain() {
  if (isBrowser()) {
    return window.location.hostname;
  }
  return "";
}
var _tmpl$23 = /* @__PURE__ */ template(`<button>`);
var buttonVariants = cva(cn('nt-inline-flex nt-gap-4 nt-items-center nt-justify-center nt-whitespace-nowrap nt-text-sm nt-font-medium nt-transition-colors disabled:nt-pointer-events-none disabled:nt-opacity-50 after:nt-absolute after:nt-content-[""] before:nt-content-[""] before:nt-absolute [&_svg]:nt-pointer-events-none [&_svg]:nt-shrink-0', `focus-visible:nt-outline-none focus-visible:nt-ring-2 focus-visible:nt-rounded-md focus-visible:nt-ring-ring focus-visible:nt-ring-offset-2`), {
  variants: {
    variant: {
      default: "nt-bg-gradient-to-b nt-from-20% nt-from-primary-foreground-alpha-200 nt-to-transparent nt-bg-primary nt-text-primary-foreground nt-shadow-[0_0_0_0.5px_var(--nv-color-primary-600)] nt-relative before:nt-absolute before:nt-inset-0 before:nt-border before:nt-border-primary-foreground-alpha-100 after:nt-absolute after:nt-inset-0 after:nt-opacity-0 hover:after:nt-opacity-100 after:nt-transition-opacity after:nt-bg-gradient-to-b after:nt-from-primary-foreground-alpha-50 after:nt-to-transparent",
      secondary: "nt-bg-secondary nt-text-secondary-foreground nt-shadow-[0_0_0_0.5px_var(--nv-color-secondary-600)] nt-relative before:nt-absolute before:nt-inset-0 before:nt-border before:nt-border-secondary-foreground-alpha-100 after:nt-absolute after:nt-inset-0 after:nt-opacity-0 hover:after:nt-opacity-100 after:nt-transition-opacity after:nt-bg-gradient-to-b after:nt-from-secondary-foreground-alpha-50 after:nt-to-transparent",
      ghost: "hover:nt-bg-neutral-alpha-100 nt-text-foreground-alpha-600 hover:nt-text-foreground-alpha-800",
      unstyled: ""
    },
    size: {
      none: "",
      iconSm: "nt-p-1 nt-rounded-md after:nt-rounded-md before:nt-rounded-md focus-visible:nt-rounded-md",
      icon: "nt-p-2.5 nt-rounded-xl before:nt-rounded-xl after:nt-rounded-xl focus-visible:nt-rounded-xl",
      default: "nt-px-2 nt-py-1 nt-rounded-lg focus-visible:nt-rounded-lg before:nt-rounded-lg after:nt-rounded-lg",
      sm: "nt-px-1 nt-py-px nt-rounded-md nt-text-xs nt-px-1 before:nt-rounded-md focus-visible:nt-rounded-md after:nt-rounded-md",
      lg: "nt-px-8 nt-py-2 nt-text-base before:nt-rounded-lg after:nt-rounded-lg focus-visible:nt-rounded-lg"
    }
  },
  defaultVariants: {
    variant: "default",
    size: "default"
  }
});
var Button = (props) => {
  const [local, rest] = splitProps(props, ["class", "appearanceKey"]);
  const style = useStyle();
  return (() => {
    var _el$ = _tmpl$23();
    spread(_el$, mergeProps({
      get ["data-variant"]() {
        return props.variant;
      },
      get ["data-size"]() {
        return props.size;
      },
      get ["class"]() {
        return style(local.appearanceKey || "button", cn(buttonVariants({
          variant: props.variant,
          size: props.size
        }), local.class));
      }
    }, rest), false, false);
    return _el$;
  })();
};
var _tmpl$24 = /* @__PURE__ */ template(`<button>`);
var PopoverClose = (props) => {
  const {
    onClose
  } = usePopover();
  const style = useStyle();
  const [local, rest] = splitProps(props, ["onClick", "asChild", "appearanceKey", "class"]);
  const handleClick = (e) => {
    if (typeof local.onClick === "function") {
      local.onClick(e);
    }
    onClose();
  };
  if (local.asChild) {
    return createComponent(Dynamic, mergeProps({
      get component() {
        return local.asChild;
      },
      onClick: handleClick
    }, rest));
  }
  return (() => {
    var _el$ = _tmpl$24();
    _el$.$$click = handleClick;
    spread(_el$, mergeProps({
      get ["class"]() {
        return style(local.appearanceKey || "popoverClose", local.class);
      }
    }, rest), false, false);
    return _el$;
  })();
};
delegateEvents(["click"]);
var _tmpl$25 = /* @__PURE__ */ template(`<div>`);
var Portal = (props) => {
  const appearance = useAppearance();
  let currentElement;
  return [(() => {
    var _el$ = _tmpl$25();
    use((el) => {
      currentElement = el;
    }, _el$);
    _el$.style.setProperty("display", "none");
    return _el$;
  })(), createComponent(Portal$1, mergeProps({
    get mount() {
      return closestNovuRootParent(currentElement, appearance.id());
    }
  }, props))];
};
var closestNovuRootParent = (el, id) => {
  let element = el;
  while (element && element.id !== `novu-root-${id}`) {
    element = element.parentElement;
  }
  if (element && element.id === `novu-root-${id}`) {
    return element;
  }
  return void 0;
};
var PopoverContext = createContext(void 0);
function PopoverRoot(props) {
  var _a;
  const [uncontrolledIsOpen, setUncontrolledIsOpen] = createSignal((_a = props.open) != null ? _a : false);
  const onOpenChange = () => {
    var _a2;
    return (_a2 = props.onOpenChange) != null ? _a2 : setUncontrolledIsOpen;
  };
  const open = () => {
    var _a2;
    return (_a2 = props.open) != null ? _a2 : uncontrolledIsOpen();
  };
  const [reference, setReference] = createSignal(null);
  const [floating, setFloating] = createSignal(null);
  const position = useFloating(reference, floating, {
    strategy: "absolute",
    placement: props.placement,
    whileElementsMounted: autoUpdate,
    middleware: [offset(10), flip({
      fallbackPlacements: props.fallbackPlacements
    }), shift()]
  });
  const floatingStyles = createMemo(() => {
    var _a2, _b;
    return {
      position: position.strategy,
      top: `${(_a2 = position.y) != null ? _a2 : 0}px`,
      left: `${(_b = position.x) != null ? _b : 0}px`
    };
  });
  const onClose = () => {
    onOpenChange()(false);
  };
  const onToggle = () => {
    onOpenChange()((prev) => !prev);
  };
  return createComponent(PopoverContext.Provider, {
    value: {
      onToggle,
      onClose,
      reference,
      setReference,
      floating,
      setFloating,
      open,
      floatingStyles
    },
    get children() {
      return props.children;
    }
  });
}
function usePopover() {
  const context = useContext(PopoverContext);
  if (!context) {
    throw new Error("usePopover must be used within Popover.Root component");
  }
  return context;
}

// src/ui/components/primitives/Popover/PopoverContent.tsx
var _tmpl$26 = /* @__PURE__ */ template(`<div>`);
var popoverContentVariants = () => cn("nt-w-[400px] nt-h-[600px] nt-rounded-xl nt-bg-background", "nt-shadow-popover nt-animate-in nt-slide-in-from-top-2 nt-fade-in nt-cursor-default nt-flex nt-flex-col nt-overflow-hidden nt-border nt-border-border nt-z-10");
var PopoverContentBody = (props) => {
  const {
    open,
    setFloating,
    floating,
    floatingStyles
  } = usePopover();
  const {
    setActive,
    removeActive
  } = useFocusManager();
  const [local, rest] = splitProps(props, ["class", "appearanceKey", "style"]);
  const style = useStyle();
  onMount(() => {
    const floatingEl = floating();
    setActive(floatingEl);
    onCleanup(() => {
      removeActive(floatingEl);
    });
  });
  return (() => {
    var _el$ = _tmpl$26();
    use(setFloating, _el$);
    spread(_el$, mergeProps({
      get ["class"]() {
        return style(local.appearanceKey || "popoverContent", cn(popoverContentVariants(), local.class));
      },
      get style() {
        return floatingStyles();
      },
      get ["data-open"]() {
        return open();
      }
    }, rest), false, false);
    return _el$;
  })();
};
var PopoverContent = (props) => {
  const {
    open,
    onClose,
    reference,
    floating
  } = usePopover();
  const {
    active
  } = useFocusManager();
  const handleClickOutside = (e) => {
    var _a, _b;
    if ((_a = reference()) == null ? void 0 : _a.contains(e.target)) {
      return;
    }
    if (active() !== floating() || ((_b = floating()) == null ? void 0 : _b.contains(e.target))) {
      return;
    }
    onClose();
  };
  const handleEscapeKey = (e) => {
    if (active() !== floating()) {
      return;
    }
    if (e.key === "Escape") {
      onClose();
    }
  };
  onMount(() => {
    document.body.addEventListener("click", handleClickOutside);
    document.body.addEventListener("keydown", handleEscapeKey);
  });
  onCleanup(() => {
    document.body.removeEventListener("click", handleClickOutside);
    document.body.removeEventListener("keydown", handleEscapeKey);
  });
  return createComponent(Show, {
    get when() {
      return open();
    },
    get children() {
      return createComponent(Portal, {
        get children() {
          return createComponent(PopoverContentBody, props);
        }
      });
    }
  });
};

// src/ui/helpers/mergeRefs.ts
function chain(callbacks) {
  return (...args) => {
    for (const callback of callbacks) callback && callback(...args);
  };
}
function mergeRefs(...refs) {
  return chain(refs);
}

// src/ui/components/primitives/Popover/PopoverTrigger.tsx
var _tmpl$27 = /* @__PURE__ */ template(`<button>`);
var PopoverTrigger = (props) => {
  const {
    setReference,
    onToggle
  } = usePopover();
  const style = useStyle();
  const [local, rest] = splitProps(props, ["appearanceKey", "asChild", "onClick", "ref"]);
  const handleClick = (e) => {
    if (typeof local.onClick === "function") {
      local.onClick(e);
    }
    onToggle();
  };
  const ref = createMemo(() => local.ref ? mergeRefs(setReference, local.ref) : setReference);
  if (local.asChild) {
    return createComponent(Dynamic, mergeProps({
      get component() {
        return local.asChild;
      },
      ref(r$) {
        var _ref$ = ref();
        typeof _ref$ === "function" && _ref$(r$);
      },
      onClick: handleClick
    }, rest));
  }
  return (() => {
    var _el$ = _tmpl$27();
    _el$.$$click = handleClick;
    var _ref$2 = ref();
    typeof _ref$2 === "function" && use(_ref$2, _el$);
    spread(_el$, mergeProps({
      get ["class"]() {
        return style(local.appearanceKey || "dropdownTrigger");
      }
    }, rest), false, true);
    insert(_el$, () => props.children);
    return _el$;
  })();
};
delegateEvents(["click"]);

// src/ui/components/primitives/Popover/index.ts
var Popover = {
  Root: PopoverRoot,
  /**
   * Popover.Trigger renders a `button` and has no default styling.
   */
  Trigger: PopoverTrigger,
  /**
   * Popover.Content renders a `div` and has popover specific styling.
   */
  Content: PopoverContent,
  /**
   * Popover.Close renders a `button` and has no styling.
   * Closes the popover when clicked.
   * `onClick` function is propagated.
   */
  Close: PopoverClose
};
var dropdownContentVariants = () => "nt-p-1 nt-text-sm nt-min-w-52 nt-shadow-dropdown nt-h-fit nt-min-w-52 nt-w-max";
var DropdownContent = (props) => {
  const [local, rest] = splitProps(props, ["appearanceKey", "class"]);
  return createComponent(Popover.Content, mergeProps({
    get appearanceKey() {
      return local.appearanceKey || "dropdownContent";
    },
    get ["class"]() {
      return cn(dropdownContentVariants(), local.class);
    }
  }, rest));
};
var dropdownItemVariants = () => "focus:nt-outline-none nt-flex nt-items-center nt-gap-1.5 nt-text-sm nt-rounded-lg nt-items-center hover:nt-bg-neutral-alpha-50 focus-visible:nt-bg-neutral-alpha-50 nt-py-1 nt-px-2";
var DropdownItem = (props) => {
  const [local, rest] = splitProps(props, ["appearanceKey", "onClick", "class", "asChild"]);
  const {
    onClose
  } = usePopover();
  const handleClick = (e) => {
    if (typeof local.onClick === "function") {
      local.onClick(e);
    }
    onClose();
  };
  if (local.asChild) {
    return createComponent(Dynamic, mergeProps({
      get component() {
        return local.asChild;
      },
      onClick: handleClick
    }, rest));
  }
  return createComponent(Popover.Close, mergeProps({
    get appearanceKey() {
      return local.appearanceKey || "dropdownItem";
    },
    get ["class"]() {
      return cn(dropdownItemVariants(), local.class);
    },
    onClick: (e) => {
      if (typeof local.onClick === "function") {
        local.onClick(e);
      }
      onClose();
    }
  }, rest));
};
var DropdownRoot = (props) => {
  return createComponent(Popover.Root, mergeProps({
    placement: "bottom",
    fallbackPlacements: ["top"]
  }, props));
};
var dropdownTriggerButtonVariants = () => `nt-relative nt-transition nt-outline-none focus-visible:nt-outline-nonefocus-visible:nt-ring-2 focus-visible:nt-ring-primary focus-visible:nt-ring-offset-2`;
var DropdownTrigger = (props) => {
  const style = useStyle();
  const [local, rest] = splitProps(props, ["appearanceKey", "class"]);
  return createComponent(Popover.Trigger, mergeProps({
    get ["class"]() {
      return style(local.appearanceKey || "dropdownTrigger", cn(dropdownTriggerButtonVariants(), local.class));
    }
  }, rest));
};

// src/ui/components/primitives/Dropdown/index.ts
var Dropdown = {
  Root: DropdownRoot,
  /**
   * Dropdown.Trigger renders a `button` and has no default styling.
   */
  Trigger: DropdownTrigger,
  /**
   * Dropdown.Content renders a `Popover.Content` by default.
   */
  Content: DropdownContent,
  /**
   * Dropdown.Close renders a `Popover.Close` by default.
   */
  Close: Popover.Close,
  /**
   * Dropdown.Item renders a `Popover.Close` with dropdown specific styling.
   * Closes the popover when clicked.
   * `onClick` function is propagated.
   */
  Item: DropdownItem
};
var Motion = new Proxy(Motion$1, {
  get: (_, tag) => (props) => {
    const {
      animations
    } = useAppearance();
    return createComponent(Motion$1, mergeProps(props, {
      tag,
      get transition() {
        return animations() ? props.transition : {
          duration: 0
        };
      }
    }));
  }
});
var useKeyboardNavigation = ({
  activeTab,
  setActiveTab,
  tabsContainer
}) => {
  const [keyboardNavigation, setKeyboardNavigation] = createSignal(false);
  createEffect(() => {
    const handleTabKey = (event) => {
      var _a;
      if (event.key !== "Tab") {
        return;
      }
      const tabs = (_a = tabsContainer()) == null ? void 0 : _a.querySelectorAll('[role="tab"]');
      if (!tabs || !document.activeElement) {
        return;
      }
      setKeyboardNavigation(Array.from(tabs).includes(document.activeElement));
    };
    document.addEventListener("keyup", handleTabKey);
    return onCleanup(() => document.removeEventListener("keyup", handleTabKey));
  });
  createEffect(() => {
    const handleArrowKeys = (event) => {
      var _a, _b;
      if (!keyboardNavigation() || event.key !== "ArrowLeft" && event.key !== "ArrowRight") {
        return;
      }
      const tabElements = Array.from((_b = (_a = tabsContainer()) == null ? void 0 : _a.querySelectorAll('[role="tab"]')) != null ? _b : []);
      const tabIds = tabElements.map((tab) => tab.id);
      const currentIndex = tabIds.indexOf(activeTab());
      const { length } = tabIds;
      let activeIndex = currentIndex;
      let newTab = activeTab();
      if (event.key === "ArrowLeft") {
        activeIndex = currentIndex === 0 ? length - 1 : currentIndex - 1;
        newTab = tabIds[activeIndex];
      } else if (event.key === "ArrowRight") {
        activeIndex = currentIndex === length - 1 ? 0 : currentIndex + 1;
        newTab = tabIds[activeIndex];
      }
      tabElements[activeIndex].focus();
      setActiveTab(newTab);
    };
    document.addEventListener("keydown", handleArrowKeys);
    return onCleanup(() => document.removeEventListener("keydown", handleArrowKeys));
  });
};

// src/ui/components/primitives/Tabs/TabsRoot.tsx
var _tmpl$28 = /* @__PURE__ */ template(`<div>`);
var TabsContext = createContext(void 0);
var useTabsContext = () => {
  const context = useContext(TabsContext);
  if (!context) {
    throw new Error("useTabsContext must be used within an TabsContext.Provider");
  }
  return context;
};
var tabsRootVariants = () => "nt-flex nt-flex-col";
var TabsRoot = (props) => {
  var _a;
  const [local, rest] = splitProps(props, ["defaultValue", "value", "class", "appearanceKey", "onChange", "children"]);
  const [tabsContainer, setTabsContainer] = createSignal();
  const [visibleTabs, setVisibleTabs] = createSignal([]);
  const [activeTab, setActiveTab] = createSignal((_a = local.defaultValue) != null ? _a : "");
  const style = useStyle();
  useKeyboardNavigation({
    tabsContainer,
    activeTab,
    setActiveTab
  });
  createEffect(() => {
    if (local.value) {
      setActiveTab(local.value);
    }
  });
  createEffect(() => {
    var _a2;
    (_a2 = local.onChange) == null ? void 0 : _a2.call(local, activeTab());
  });
  return createComponent(TabsContext.Provider, {
    value: {
      activeTab,
      setActiveTab,
      visibleTabs,
      setVisibleTabs
    },
    get children() {
      var _el$ = _tmpl$28();
      use(setTabsContainer, _el$);
      spread(_el$, mergeProps({
        get ["class"]() {
          return style(local.appearanceKey || "tabsRoot", cn(tabsRootVariants(), local.class));
        }
      }, rest), false, true);
      insert(_el$, () => local.children);
      return _el$;
    }
  });
};

// src/ui/components/primitives/Tabs/TabsContent.tsx
var _tmpl$29 = /* @__PURE__ */ template(`<div role=tabpanel>`);
var TabsContent = (props) => {
  const [local, rest] = splitProps(props, ["value", "class", "appearanceKey", "children"]);
  const style = useStyle();
  const {
    activeTab
  } = useTabsContext();
  return createComponent(Show, {
    get when() {
      return activeTab() === local.value;
    },
    get children() {
      var _el$ = _tmpl$29();
      spread(_el$, mergeProps({
        get ["class"]() {
          return memo(() => !!local.class)() ? local.class : style(local.appearanceKey || "tabsContent", activeTab() === local.value ? "nt-block" : "nt-hidden");
        },
        get id() {
          return `tabpanel-${local.value}`;
        },
        get ["aria-labelledby"]() {
          return local.value;
        },
        get ["data-state"]() {
          return activeTab() === local.value ? "active" : "inactive";
        }
      }, rest), false, true);
      insert(_el$, () => local.children);
      return _el$;
    }
  });
};
var _tmpl$30 = /* @__PURE__ */ template(`<div role=tablist>`);
var _tmpl$210 = /* @__PURE__ */ template(`<div class="nt-relative nt-z-[-1]">`);
var tabsListVariants = () => "nt-flex nt-gap-6";
var TabsList = (props) => {
  const [local, rest] = splitProps(props, ["class", "appearanceKey", "ref", "children"]);
  const style = useStyle();
  return [(() => {
    var _el$ = _tmpl$30();
    var _ref$ = local.ref;
    typeof _ref$ === "function" ? use(_ref$, _el$) : local.ref = _el$;
    spread(_el$, mergeProps({
      get ["class"]() {
        return style(local.appearanceKey || "tabsList", cn(tabsListVariants(), local.class));
      }
    }, rest), false, true);
    insert(_el$, () => local.children);
    return _el$;
  })(), _tmpl$210()];
};
var tabsTriggerVariants = () => cn("nt-relative nt-transition nt-outline-none nt-text-foreground-alpha-600 nt-pb-[0.625rem]", `after:nt-absolute after:nt-content-[''] after:nt-bottom-0 after:nt-left-0 after:nt-w-full after:nt-h-[2px]`, "after:nt-transition-opacity after:nt-duration-200", "data-[state=active]:after:nt-border-b-2 data-[state=active]:after:nt-border-primary data-[state=active]:after:nt-opacity-100", "data-[state=active]:nt-text-foreground after:nt-border-b-transparent after:nt-opacity-0", "focus-visible:nt-outline-none focus-visible:nt-rounded-lg focus-visible:nt-ring-2 focus-visible:nt-ring-ring focus-visible:nt-ring-offset-2");
var TabsTrigger = (props) => {
  const [local, rest] = splitProps(props, ["value", "class", "appearanceKey", "ref", "onClick", "children"]);
  const style = useStyle();
  const {
    activeTab,
    setActiveTab
  } = useTabsContext();
  const clickHandler = () => setActiveTab(local.value);
  return createComponent(Button, mergeProps({
    variant: "unstyled",
    size: "none",
    ref(r$) {
      var _ref$ = local.ref;
      typeof _ref$ === "function" ? _ref$(r$) : local.ref = r$;
    },
    get id() {
      return local.value;
    },
    get appearanceKey() {
      var _a;
      return (_a = local.appearanceKey) != null ? _a : "tabsTrigger";
    },
    get ["class"]() {
      return memo(() => !!local.class)() ? local.class : style(local.appearanceKey || "tabsTrigger", tabsTriggerVariants());
    },
    get onClick() {
      var _a;
      return (_a = local.onClick) != null ? _a : clickHandler;
    },
    role: "tab",
    tabIndex: 0,
    get ["aria-selected"]() {
      return activeTab() === local.value;
    },
    get ["aria-controls"]() {
      return `tabpanel-${local.value}`;
    },
    get ["data-state"]() {
      return activeTab() === local.value ? "active" : "inactive";
    }
  }, rest, {
    get children() {
      return local.children;
    }
  }));
};

// src/ui/components/primitives/Tabs/index.ts
var Tabs = {
  Root: TabsRoot,
  List: TabsList,
  Trigger: TabsTrigger,
  Content: TabsContent
};

// src/ui/components/elements/InboxStatus/constants.ts
var notificationStatusOptionsLocalizationKeys = {
  unreadRead: "inbox.filters.dropdownOptions.default",
  unread: "inbox.filters.dropdownOptions.unread",
  archived: "inbox.filters.dropdownOptions.archived",
  snoozed: "inbox.filters.dropdownOptions.snoozed"
};
var inboxFilterLocalizationKeys = {
  unreadRead: "inbox.filters.labels.default",
  unread: "inbox.filters.labels.unread",
  archived: "inbox.filters.labels.archived",
  snoozed: "inbox.filters.labels.snoozed"
};
var _tmpl$31 = /* @__PURE__ */ template(`<svg viewBox="0 0 12 12"fill=none xmlns=http://www.w3.org/2000/svg><path d="M6 2.99902V5.99902H8.25M11 5.99902C11 8.76045 8.76142 10.999 6 10.999C3.23858 10.999 1 8.76045 1 5.99902C1 3.2376 3.23858 0.999023 6 0.999023C8.76142 0.999023 11 3.2376 11 5.99902Z"stroke=currentColor stroke-linecap=round stroke-linejoin=round>`);
var Snooze = (props) => {
  return (() => {
    var _el$ = _tmpl$31();
    spread(_el$, props, true, true);
    return _el$;
  })();
};

// src/ui/components/elements/InboxStatus/InboxStatusOptions.tsx
var _tmpl$33 = /* @__PURE__ */ template(`<span><span></span><span>`);
var cases = [{
  status: "unreadRead" /* UNREAD_READ */,
  icon: UnreadRead
}, {
  status: "unread" /* UNREAD */,
  icon: MarkAsUnread
}, {
  status: "snoozed" /* SNOOZED */,
  icon: Snooze
}, {
  status: "archived" /* ARCHIVED */,
  icon: MarkAsArchived
}];
var StatusOptions = (props) => {
  const {
    isSnoozeEnabled
  } = useInboxContext();
  const filteredCases = () => {
    return cases.filter((c) => c.status !== "snoozed" /* SNOOZED */ || isSnoozeEnabled());
  };
  return createComponent(For, {
    get each() {
      return filteredCases();
    },
    children: (c) => createComponent(StatusItem, {
      get localizationKey() {
        return notificationStatusOptionsLocalizationKeys[c.status];
      },
      onClick: () => {
        props.setStatus(c.status);
      },
      get isSelected() {
        return props.status === c.status;
      },
      get icon() {
        return c.icon;
      }
    })
  });
};
var StatusItem = (props) => {
  const style = useStyle();
  const {
    t
  } = useLocalization();
  return createComponent(Dropdown.Item, {
    get ["class"]() {
      return style("inboxStatus__dropdownItem", cn(dropdownItemVariants(), "nt-flex nt-gap-8 nt-justify-between"));
    },
    get onClick() {
      return props.onClick;
    },
    get children() {
      return [(() => {
        var _el$ = _tmpl$33(), _el$2 = _el$.firstChild, _el$3 = _el$2.nextSibling;
        insert(_el$2, () => props.icon());
        insert(_el$3, () => t(props.localizationKey));
        effect((_p$) => {
          var _v$ = style("inboxStatus__dropdownItemLabelContainer", "nt-flex nt-gap-2 nt-items-center"), _v$2 = style("inboxStatus__dropdownItemLeft__icon", "nt-size-3"), _v$3 = props.localizationKey, _v$4 = style("inboxStatus__dropdownItemLabel", "nt-leading-none");
          _v$ !== _p$.e && className(_el$, _p$.e = _v$);
          _v$2 !== _p$.t && className(_el$2, _p$.t = _v$2);
          _v$3 !== _p$.a && setAttribute(_el$3, "data-localization", _p$.a = _v$3);
          _v$4 !== _p$.o && className(_el$3, _p$.o = _v$4);
          return _p$;
        }, {
          e: void 0,
          t: void 0,
          a: void 0,
          o: void 0
        });
        return _el$;
      })(), createComponent(Show, {
        get when() {
          return props.isSelected;
        },
        get children() {
          return createComponent(Check, {
            get ["class"]() {
              return style("inboxStatus__dropdownItemCheck__icon", "nt-size-3");
            }
          });
        }
      })];
    }
  });
};

// src/ui/components/elements/InboxStatus/InboxStatusDropdown.tsx
var _tmpl$34 = /* @__PURE__ */ template(`<span>`);
var StatusDropdown = () => {
  const style = useStyle();
  const {
    status,
    setStatus
  } = useInboxContext();
  const {
    t
  } = useLocalization();
  return createComponent(Dropdown.Root, {
    get children() {
      return [createComponent(Dropdown.Trigger, {
        get ["class"]() {
          return style("inboxStatus__dropdownTrigger", cn(buttonVariants({
            variant: "unstyled",
            size: "none"
          }), "nt-gap-0.5"));
        },
        asChild: (triggerProps) => createComponent(Button, mergeProps({
          variant: "unstyled",
          size: "none"
        }, triggerProps, {
          get children() {
            return [(() => {
              var _el$ = _tmpl$34();
              insert(_el$, () => t(inboxFilterLocalizationKeys[status()]));
              effect((_p$) => {
                var _v$ = inboxFilterLocalizationKeys[status()], _v$2 = style("inboxStatus__title", "nt-text-base");
                _v$ !== _p$.e && setAttribute(_el$, "data-localization", _p$.e = _v$);
                _v$2 !== _p$.t && className(_el$, _p$.t = _v$2);
                return _p$;
              }, {
                e: void 0,
                t: void 0
              });
              return _el$;
            })(), createComponent(ArrowDropDown, {
              get ["class"]() {
                return style("inboxStatus__dropdownItemRight__icon", "nt-text-foreground-alpha-600 nt-size-4");
              }
            })];
          }
        }))
      }), createComponent(Dropdown.Content, {
        appearanceKey: "inboxStatus__dropdownContent",
        get children() {
          return createComponent(StatusOptions, {
            setStatus,
            get status() {
              return status();
            }
          });
        }
      })];
    }
  });
};

// src/ui/api/hooks/useArchiveAll.ts
var useArchiveAll = (props) => {
  const novu = useNovu();
  const archiveAll = (..._0) => __async(void 0, [..._0], function* ({ tags } = {}) {
    var _a, _b;
    try {
      yield novu.notifications.archiveAll({ tags });
      (_a = props == null ? void 0 : props.onSuccess) == null ? void 0 : _a.call(props);
    } catch (error) {
      (_b = void 0 ) == null ? void 0 : _b.call(props, error);
    }
  });
  return { archiveAll };
};

// src/ui/api/hooks/useArchiveAllRead.ts
var useArchiveAllRead = (props) => {
  const novu = useNovu();
  const archiveAllRead = (..._0) => __async(void 0, [..._0], function* ({ tags } = {}) {
    var _a, _b;
    try {
      yield novu.notifications.archiveAllRead({ tags });
      (_a = props == null ? void 0 : props.onSuccess) == null ? void 0 : _a.call(props);
    } catch (error) {
      (_b = void 0 ) == null ? void 0 : _b.call(props, error);
    }
  });
  return { archiveAllRead };
};
var useNotificationsInfiniteScroll = (props) => {
  const novu = useNovu();
  let filter = __spreadValues({}, props.options());
  const [data, { initialLoading, setEl, end, mutate, reset }] = createInfiniteScroll(
    (after) => __async(void 0, null, function* () {
      var _a, _b;
      const { data: data2 } = yield novu.notifications.list(__spreadProps(__spreadValues({}, props.options() || {}), { after }));
      return { data: (_a = data2 == null ? void 0 : data2.notifications) != null ? _a : [], hasMore: (_b = data2 == null ? void 0 : data2.hasMore) != null ? _b : false };
    }),
    {
      paginationField: "id"
    }
  );
  onMount(() => {
    const listener = ({ data: data2 }) => {
      if (!data2 || !isSameFilter(filter, data2.filter)) {
        return;
      }
      mutate({ data: data2.notifications, hasMore: data2.hasMore });
    };
    const cleanup = novu.on("notifications.list.updated", listener);
    onCleanup(() => cleanup());
  });
  createEffect(() => __async(void 0, null, function* () {
    const newFilter = __spreadValues({}, props.options());
    if (isSameFilter(filter, newFilter)) {
      return;
    }
    novu.notifications.clearCache();
    yield reset();
    filter = newFilter;
  }));
  const refetch = (_0) => __async(void 0, [_0], function* ({ filter: filter2 }) {
    novu.notifications.clearCache({ filter: filter2 });
    yield reset();
  });
  return { data, initialLoading, setEl, end, refetch };
};
var usePreferences = (options) => {
  const novu = useNovu();
  const [loading, setLoading] = createSignal(true);
  const [preferences, { mutate, refetch }] = createResource(options || {}, (_0) => __async(void 0, [_0], function* ({ tags }) {
    try {
      const response = yield novu.preferences.list({ tags });
      return response.data;
    } catch (error) {
      console.error("Error fetching preferences:", error);
      throw error;
    }
  }));
  onMount(() => {
    const listener = ({ data }) => {
      if (!data) {
        return;
      }
      mutate(data);
    };
    const cleanup = novu.on("preferences.list.updated", listener);
    onCleanup(() => cleanup());
  });
  createEffect(() => {
    setLoading(preferences.loading);
  });
  return { preferences, loading, mutate, refetch };
};

// src/ui/api/hooks/useReadAll.ts
var useReadAll = (props) => {
  const novu = useNovu();
  const readAll = (..._0) => __async(void 0, [..._0], function* ({ tags } = {}) {
    var _a, _b;
    try {
      yield novu.notifications.readAll({ tags });
      (_a = props == null ? void 0 : props.onSuccess) == null ? void 0 : _a.call(props);
    } catch (error) {
      (_b = void 0 ) == null ? void 0 : _b.call(props, error);
    }
  });
  return { readAll };
};

// src/ui/components/elements/Header/MoreActionsOptions.tsx
var _tmpl$35 = /* @__PURE__ */ template(`<span>`);
var MoreActionsOptions = () => {
  const {
    filter
  } = useInboxContext();
  const {
    readAll
  } = useReadAll();
  const {
    archiveAll
  } = useArchiveAll();
  const {
    archiveAllRead
  } = useArchiveAllRead();
  return [createComponent(ActionsItem, {
    localizationKey: "notifications.actions.readAll",
    onClick: () => readAll({
      tags: filter().tags
    }),
    icon: MarkAsRead
  }), createComponent(ActionsItem, {
    localizationKey: "notifications.actions.archiveAll",
    onClick: () => archiveAll({
      tags: filter().tags
    }),
    icon: MarkAsArchived
  }), createComponent(ActionsItem, {
    localizationKey: "notifications.actions.archiveRead",
    onClick: () => archiveAllRead({
      tags: filter().tags
    }),
    icon: MarkAsArchivedRead
  })];
};
var ActionsItem = (props) => {
  const style = useStyle();
  const {
    t
  } = useLocalization();
  return createComponent(Dropdown.Item, {
    get ["class"]() {
      return style("moreActions__dropdownItem", cn(dropdownItemVariants(), "nt-flex nt-gap-2"));
    },
    get onClick() {
      return props.onClick;
    },
    get children() {
      return [(() => {
        var _el$ = _tmpl$35();
        insert(_el$, () => props.icon());
        effect(() => className(_el$, style("moreActions__dropdownItemLeft__icon", "nt-size-3")));
        return _el$;
      })(), (() => {
        var _el$2 = _tmpl$35();
        insert(_el$2, () => t(props.localizationKey));
        effect((_p$) => {
          var _v$ = props.localizationKey, _v$2 = style("moreActions__dropdownItemLabel", "nt-leading-none");
          _v$ !== _p$.e && setAttribute(_el$2, "data-localization", _p$.e = _v$);
          _v$2 !== _p$.t && className(_el$2, _p$.t = _v$2);
          return _p$;
        }, {
          e: void 0,
          t: void 0
        });
        return _el$2;
      })()];
    }
  });
};

// src/ui/components/elements/Header/MoreActionsDropdown.tsx
var MoreActionsDropdown = () => {
  const style = useStyle();
  const {
    status
  } = useInboxContext();
  return createComponent(Show, {
    get when() {
      return memo(() => status() !== "archived" /* ARCHIVED */)() && status() !== "snoozed" /* SNOOZED */;
    },
    get children() {
      return createComponent(Dropdown.Root, {
        get children() {
          return [createComponent(Dropdown.Trigger, {
            get ["class"]() {
              return style("moreActions__dropdownTrigger");
            },
            asChild: (triggerProps) => createComponent(Button, mergeProps({
              variant: "ghost",
              size: "iconSm"
            }, triggerProps, {
              get children() {
                return createComponent(Dots, {
                  get ["class"]() {
                    return style("moreActions__dots", "nt-size-5");
                  }
                });
              }
            }))
          }), createComponent(Dropdown.Content, {
            appearanceKey: "moreActions__dropdownContent",
            get children() {
              return createComponent(MoreActionsOptions, {});
            }
          })];
        }
      });
    }
  });
};

// src/ui/components/elements/Header/ActionsContainer.tsx
var _tmpl$36 = /* @__PURE__ */ template(`<div>`);
var ActionsContainer = (props) => {
  const style = useStyle();
  return (() => {
    var _el$ = _tmpl$36();
    insert(_el$, createComponent(MoreActionsDropdown, {}), null);
    insert(_el$, createComponent(Show, {
      get when() {
        return props.showPreferences;
      },
      children: (showPreferences) => createComponent(Button, {
        appearanceKey: "preferences__button",
        variant: "ghost",
        size: "iconSm",
        get onClick() {
          return showPreferences();
        },
        get children() {
          return createComponent(Settings, {
            get ["class"]() {
              return style("preferences__icon", "nt-size-5");
            }
          });
        }
      })
    }), null);
    effect(() => className(_el$, style("moreActionsContainer", "nt-flex nt-gap-3")));
    return _el$;
  })();
};

// src/ui/components/elements/Header/Header.tsx
var _tmpl$37 = /* @__PURE__ */ template(`<div>`);
var Header = (props) => {
  const style = useStyle();
  return (() => {
    var _el$ = _tmpl$37();
    insert(_el$, createComponent(StatusDropdown, {}), null);
    insert(_el$, createComponent(ActionsContainer, {
      get showPreferences() {
        return props.navigateToPreferences;
      }
    }), null);
    effect(() => className(_el$, style("inboxHeader", cn("nt-flex nt-bg-neutral-alpha-25 nt-shrink-0 nt-justify-between nt-items-center nt-w-full nt-pb-2 nt-pt-2.5 nt-px-4"))));
    return _el$;
  })();
};
var _tmpl$38 = /* @__PURE__ */ template(`<div>`);
var Root = (props) => {
  const [_, rest] = splitProps(props, ["class"]);
  const {
    id
  } = useAppearance();
  const style = useStyle();
  const {
    hideBranding
  } = useInboxContext();
  return [createComponent(Show, {
    get when() {
      return !hideBranding();
    },
    children: new Comment(" Powered by Novu - https://novu.co ")
  }), (() => {
    var _el$ = _tmpl$38();
    spread(_el$, mergeProps({
      get id() {
        return `novu-root-${id()}`;
      },
      get ["class"]() {
        return style("root"), cn("novu", id(), "nt-text-foreground nt-h-full");
      }
    }, rest), false, false);
    return _el$;
  })()];
};
var _tmpl$39 = /* @__PURE__ */ template(`<div>`);
var Collapsible = (props) => {
  const style = useStyle();
  let contentRef;
  const [enableTransition, setEnableTransition] = createSignal(false);
  createEffect(() => {
    requestAnimationFrame(() => setEnableTransition(true));
  });
  return (() => {
    var _el$ = _tmpl$39();
    var _ref$ = contentRef;
    typeof _ref$ === "function" ? use(_ref$, _el$) : contentRef = _el$;
    spread(_el$, mergeProps({
      get ["class"]() {
        return style("collapsible", props.class);
      },
      get style() {
        return {
          overflow: "hidden",
          opacity: props.open ? 1 : 0,
          transition: enableTransition() ? "height 250ms ease-in-out, opacity 250ms ease-in-out" : "none",
          height: props.open ? `${contentRef == null ? void 0 : contentRef.scrollHeight}px` : "0px"
        };
      }
    }, props), false, false);
    return _el$;
  })();
};
var _tmpl$40 = /* @__PURE__ */ template(`<label><input type=checkbox class="nt-peer nt-sr-only"><div>`);
var Switch = (props) => {
  const style = useStyle();
  return (() => {
    var _el$ = _tmpl$40(), _el$2 = _el$.firstChild, _el$3 = _el$2.nextSibling;
    _el$2.addEventListener("change", (e) => {
      props.onChange(e.target.checked);
    });
    effect((_p$) => {
      var _v$ = style("channelSwitch", `nt-relative nt-inline-flex nt-cursor-pointer nt-items-center`), _v$2 = style("channelSwitchThumb", `nt-peer nt-h-4 nt-w-7 nt-rounded-full peer-checked:nt-shadow-none peer-checked:nt-border-neutral-alpha-400 nt-bg-neutral-alpha-300 after:nt-absolute after:nt-top-0.5 after:nt-size-3 after:nt-left-0.5 after:nt-rounded-full after:nt-bg-background after:nt-transition-all after:nt-content-[''] peer-checked:nt-bg-primary peer-checked:after:nt-translate-x-full peer-checked:after:nt-border-background nt-transition-all nt-duration-200 after:nt-duration-200 shadow-sm`), _v$3 = props.checked;
      _v$ !== _p$.e && className(_el$, _p$.e = _v$);
      _v$2 !== _p$.t && className(_el$3, _p$.t = _v$2);
      _v$3 !== _p$.a && setAttribute(_el$3, "data-checked", _p$.a = _v$3);
      return _p$;
    }, {
      e: void 0,
      t: void 0,
      a: void 0
    });
    effect(() => _el$2.checked = props.checked);
    return _el$;
  })();
};

// src/ui/components/elements/Preferences/ChannelRow.tsx
var _tmpl$41 = /* @__PURE__ */ template(`<div><div><div></div><span></span></div><div>`);
var ChannelRow = (props) => {
  const style = useStyle();
  const updatePreference = (enabled) => __async(void 0, null, function* () {
    props.onChange({
      channel: props.channel,
      enabled,
      workflowId: props.workflowId
    });
  });
  const onChange = (checked) => __async(void 0, null, function* () {
    yield updatePreference(checked);
  });
  return (() => {
    var _el$ = _tmpl$41(), _el$2 = _el$.firstChild, _el$3 = _el$2.firstChild, _el$4 = _el$3.nextSibling, _el$5 = _el$2.nextSibling;
    insert(_el$3, createComponent(ChannelIcon, {
      appearanceKey: "channel__icon",
      get channel() {
        return props.channel;
      },
      "class": "nt-size-3"
    }));
    insert(_el$4, () => getLabel(props.channel));
    insert(_el$5, createComponent(Switch, {
      get checked() {
        return props.enabled;
      },
      onChange: (checked) => onChange(checked)
    }));
    effect((_p$) => {
      var _v$ = style("channelContainer", "nt-flex nt-justify-between nt-items-center nt-gap-2 data-[disabled=true]:nt-text-foreground-alpha-600"), _v$2 = style("channelLabelContainer", "nt-flex nt-items-center nt-gap-2 nt-text-foreground"), _v$3 = style("channelIconContainer", "nt-p-1 nt-rounded-md nt-bg-neutral-alpha-25 nt-text-foreground-alpha-300"), _v$4 = style("channelLabel", "nt-text-sm nt-font-semibold"), _v$5 = style("channelSwitchContainer", "nt-flex nt-items-center");
      _v$ !== _p$.e && className(_el$, _p$.e = _v$);
      _v$2 !== _p$.t && className(_el$2, _p$.t = _v$2);
      _v$3 !== _p$.a && className(_el$3, _p$.a = _v$3);
      _v$4 !== _p$.o && className(_el$4, _p$.o = _v$4);
      _v$5 !== _p$.i && className(_el$5, _p$.i = _v$5);
      return _p$;
    }, {
      e: void 0,
      t: void 0,
      a: void 0,
      o: void 0,
      i: void 0
    });
    return _el$;
  })();
};
var ChannelIcon = (props) => {
  const style = useStyle();
  switch (props.channel) {
    case "in_app" /* IN_APP */:
      return createComponent(InApp, {
        get ["class"]() {
          return style(props.appearanceKey, props.class);
        }
      });
    case "email" /* EMAIL */:
      return createComponent(Email, {
        get ["class"]() {
          return style(props.appearanceKey, props.class);
        }
      });
    case "push" /* PUSH */:
      return createComponent(Push, {
        get ["class"]() {
          return style(props.appearanceKey, props.class);
        }
      });
    case "sms" /* SMS */:
      return createComponent(Sms, {
        get ["class"]() {
          return style(props.appearanceKey, props.class);
        }
      });
    case "chat" /* CHAT */:
      return createComponent(Chat, {
        get ["class"]() {
          return style(props.appearanceKey, props.class);
        }
      });
    default:
      return null;
  }
};
var getLabel = (channel) => {
  switch (channel) {
    case "in_app" /* IN_APP */:
      return "In-App";
    case "email" /* EMAIL */:
      return "Email";
    case "push" /* PUSH */:
      return "Push";
    case "sms" /* SMS */:
      return "SMS";
    case "chat" /* CHAT */:
      return "Chat";
    default:
      return "";
  }
};
var _tmpl$43 = /* @__PURE__ */ template(`<div>`);
var _tmpl$211 = /* @__PURE__ */ template(`<div><div></div><div>`);
var SkeletonText = (props) => {
  const style = useStyle();
  return (() => {
    var _el$ = _tmpl$43();
    effect(() => className(_el$, style(props.appearanceKey, cn("nt-w-full nt-h-3 nt-rounded nt-bg-gradient-to-r nt-from-foreground-alpha-50 nt-to-transparent", props.class))));
    return _el$;
  })();
};
var SkeletonAvatar = (props) => {
  const style = useStyle();
  return (() => {
    var _el$2 = _tmpl$43();
    effect(() => className(_el$2, style(props.appearanceKey, cn("nt-size-8 nt-rounded-lg nt-bg-gradient-to-r nt-from-foreground-alpha-50 nt-to-transparent", props.class))));
    return _el$2;
  })();
};
var SkeletonSwitch = (props) => {
  const style = useStyle();
  return (() => {
    var _el$3 = _tmpl$211(), _el$4 = _el$3.firstChild, _el$5 = _el$4.nextSibling;
    effect((_p$) => {
      var _v$ = style(props.appearanceKey, cn("nt-relative nt-inline-flex nt-items-center", props.class)), _v$2 = style(props.appearanceKey, "nt-h-4 nt-w-7 nt-rounded-full nt-bg-gradient-to-r nt-from-foreground-alpha-50 nt-to-transparent"), _v$3 = style(props.thumbAppearanceKey, "nt-absolute nt-top-0.5 nt-left-0.5 nt-size-3 nt-rounded-full nt-bg-background nt-shadow");
      _v$ !== _p$.e && className(_el$3, _p$.e = _v$);
      _v$2 !== _p$.t && className(_el$4, _p$.t = _v$2);
      _v$3 !== _p$.a && className(_el$5, _p$.a = _v$3);
      return _p$;
    }, {
      e: void 0,
      t: void 0,
      a: void 0
    });
    return _el$3;
  })();
};

// src/ui/components/elements/Preferences/PreferencesListSkeleton.tsx
var _tmpl$44 = /* @__PURE__ */ template(`<div>`);
var channelIcons = [InApp, Email, Sms, Push, Chat];
var PreferencesListSkeleton = (props) => {
  const style = useStyle();
  const {
    t
  } = useLocalization();
  return (() => {
    var _el$ = _tmpl$44();
    insert(_el$, createComponent(Motion.div, {
      get animate() {
        return {
          scale: props.loading ? 1 : 0.7
        };
      },
      transition: {
        duration: 0.6,
        easing: [0.39, 0.24, 0.3, 1],
        delay: 0.3
      },
      get ["class"]() {
        return style("preferencesList__skeleton", "nt-flex nt-relative nt-mx-auto nt-flex-col nt-w-full nt-mb-4");
      },
      get children() {
        return [memo(() => Array.from({
          length: 5
        }).map((_, i) => {
          const Icon = channelIcons[i];
          return createComponent(Motion.div, {
            get animate() {
              return {
                marginBottom: props.loading ? 0 : "16px",
                borderWidth: props.loading ? 0 : "1px",
                borderRadius: props.loading ? 0 : "var(--nv-radius-lg)"
              };
            },
            transition: {
              duration: 0.5,
              delay: 0.3,
              easing: "ease-in-out"
            },
            get ["class"]() {
              return style("preferencesList__skeletonContent", "nt-flex nt-border-neutral-alpha-50 nt-items-center nt-gap-3 nt-p-3 nt-bg-neutral-alpha-25");
            },
            get children() {
              return [createComponent(Icon, {
                get ["class"]() {
                  return style("preferencesList__skeletonIcon", "nt-size-8 nt-p-2 nt-rounded-lg nt-bg-neutral-alpha-100");
                }
              }), (() => {
                var _el$3 = _tmpl$44();
                insert(_el$3, createComponent(SkeletonText, {
                  appearanceKey: "notificationList__skeletonText",
                  "class": "nt-h-2 nt-w-1/3 nt-bg-neutral-alpha-50 nt-rounded"
                }), null);
                insert(_el$3, createComponent(SkeletonText, {
                  appearanceKey: "preferencesList__skeletonText",
                  "class": "nt-h-2 nt-w-2/3 nt-bg-neutral-alpha-50 nt-rounded"
                }), null);
                effect(() => className(_el$3, style("preferencesList__skeletonItem", "nt-flex nt-flex-col nt-gap-2 nt-flex-1")));
                return _el$3;
              })(), createComponent(SkeletonSwitch, {
                appearanceKey: "preferencesList__skeletonSwitch",
                thumbAppearanceKey: "preferencesList__skeletonSwitchThumb"
              })];
            }
          });
        })), (() => {
          var _el$2 = _tmpl$44();
          effect(() => className(_el$2, style("notificationListEmptyNoticeOverlay", "nt-absolute nt-size-full nt-z-10 nt-inset-0 nt-bg-gradient-to-b nt-from-transparent nt-to-background")));
          return _el$2;
        })()];
      }
    }), null);
    insert(_el$, createComponent(Show, {
      get when() {
        return !props.loading;
      },
      get children() {
        return createComponent(Motion.p, {
          initial: {
            opacity: 0,
            y: -4,
            filter: "blur(4px)"
          },
          get animate() {
            return {
              opacity: props.loading ? 0 : 1,
              y: 0,
              filter: "blur(0px)"
            };
          },
          transition: {
            duration: 0.7,
            easing: [0.39, 0.24, 0.3, 1],
            delay: 0.6
          },
          get ["class"]() {
            return style("preferencesListEmptyNotice"), "nt-text-center";
          },
          "data-localization": "preferences.emptyNotice",
          get children() {
            return t("preferences.emptyNotice");
          }
        });
      }
    }), null);
    effect(() => className(_el$, style("preferencesListEmptyNoticeContainer", "nt-flex nt-flex-col nt-items-center nt-h-fit nt-w-full nt-text-sm nt-text-foreground-alpha-400 nt-text-center")));
    return _el$;
  })();
};

// src/ui/components/elements/Preferences/Preferences.tsx
var _tmpl$45 = /* @__PURE__ */ template(`<div>`);
var _tmpl$212 = /* @__PURE__ */ template(`<span>`);
var _tmpl$310 = /* @__PURE__ */ template(`<div><div><div><div></div></div><span>`);
var Preferences = () => {
  var _a;
  const style = useStyle();
  const {
    preferencesFilter
  } = useInboxContext();
  const {
    preferences,
    loading
  } = usePreferences({
    tags: (_a = preferencesFilter()) == null ? void 0 : _a.tags
  });
  const allPreferences = createMemo(() => {
    var _a2, _b;
    const globalPreference = (_a2 = preferences()) == null ? void 0 : _a2.find((preference) => preference.level === "global" /* GLOBAL */);
    const workflowPreferences = (_b = preferences()) == null ? void 0 : _b.filter((preference) => preference.level === "template" /* TEMPLATE */);
    const workflowPreferencesIds = workflowPreferences == null ? void 0 : workflowPreferences.map((preference) => {
      var _a3;
      return (_a3 = preference.workflow) == null ? void 0 : _a3.id;
    });
    return {
      globalPreference,
      workflowPreferences,
      workflowPreferencesIds
    };
  });
  createEffect(() => {
    setDynamicLocalization((prev) => {
      var _a2;
      return __spreadValues(__spreadValues({}, prev), (_a2 = allPreferences().workflowPreferences) == null ? void 0 : _a2.reduce((acc, preference) => {
        acc[preference.workflow.identifier] = preference.workflow.name;
        return acc;
      }, {}));
    });
  });
  const optimisticUpdate = (preference) => (_0) => __async(void 0, [_0], function* ({
    channel,
    enabled
  }) {
    yield preference == null ? void 0 : preference.update({
      channels: {
        [channel]: enabled
      }
    });
  });
  return (() => {
    var _el$ = _tmpl$45();
    insert(_el$, createComponent(PreferencesRow, {
      localizationKey: "preferences.global",
      get channels() {
        var _a2;
        return ((_a2 = allPreferences().globalPreference) == null ? void 0 : _a2.channels) || {};
      },
      get onChange() {
        return optimisticUpdate(allPreferences().globalPreference);
      }
    }), null);
    insert(_el$, createComponent(Show, {
      get when() {
        var _a2;
        return (_a2 = allPreferences().workflowPreferences) == null ? void 0 : _a2.length;
      },
      get fallback() {
        return createComponent(PreferencesListSkeleton, {
          get loading() {
            return loading();
          }
        });
      },
      get children() {
        return createComponent(For, {
          get each() {
            return allPreferences().workflowPreferencesIds;
          },
          children: (_, index) => {
            const preference = () => {
              var _a2;
              return (_a2 = allPreferences().workflowPreferences) == null ? void 0 : _a2[index()];
            };
            if (!preference()) {
              return null;
            }
            return createComponent(PreferencesRow, {
              get localizationKey() {
                return preference().workflow.identifier;
              },
              get channels() {
                return preference().channels;
              },
              get workflowId() {
                var _a2;
                return (_a2 = preference().workflow) == null ? void 0 : _a2.id;
              },
              get onChange() {
                return optimisticUpdate(preference());
              }
            });
          }
        });
      }
    }), null);
    effect(() => className(_el$, style("preferencesContainer", "nt-px-3 nt-py-4 nt-flex nt-flex-col nt-gap-1 nt-overflow-y-auto nt-h-full")));
    return _el$;
  })();
};
var WorkflowDescription = (props) => {
  const style = useStyle();
  const channelNames = () => {
    const channels = [];
    for (const key in props.channels) {
      if (props.channels[key] !== void 0) {
        const isDisabled = !props.channels[key];
        const element = (() => {
          var _el$2 = _tmpl$212();
          setAttribute(_el$2, "data-disabled", isDisabled);
          insert(_el$2, () => getLabel(key));
          effect(() => className(_el$2, style("channelName", "data-[disabled=true]:nt-text-foreground-alpha-400")));
          return _el$2;
        })();
        channels.push(element);
      }
    }
    return channels.map((c, index) => [c, memo(() => index < channels.length - 1 && ", ")]);
  };
  return (() => {
    var _el$3 = _tmpl$45();
    insert(_el$3, channelNames);
    effect(() => className(_el$3, style(props.appearanceKey, cn("nt-text-sm nt-text-foreground-alpha-600 nt-text-start", props.class))));
    return _el$3;
  })();
};
var PreferencesRow = (props) => {
  const style = useStyle();
  const [isOpenDescription, setIsOpenDescription] = createSignal(true);
  const [isOpenChannels, setIsOpenChannels] = createSignal(false);
  const {
    t
  } = useLocalization();
  const channels = createMemo(() => Object.keys(props.channels));
  return createComponent(Show, {
    get when() {
      return channels().length > 0;
    },
    get children() {
      var _el$4 = _tmpl$310(), _el$5 = _el$4.firstChild, _el$6 = _el$5.firstChild, _el$7 = _el$6.firstChild, _el$8 = _el$6.nextSibling;
      _el$5.$$click = () => {
        setIsOpenChannels((prev) => !prev);
        setIsOpenDescription((prev) => !prev);
      };
      insert(_el$7, () => t(props.localizationKey));
      insert(_el$6, createComponent(Collapsible, {
        get open() {
          return isOpenDescription();
        },
        get children() {
          return createComponent(WorkflowDescription, {
            get channels() {
              return props.channels;
            },
            appearanceKey: "workflowDescription",
            "class": "nt-overflow-hidden"
          });
        }
      }), null);
      insert(_el$8, createComponent(ArrowDropDown, {
        get ["class"]() {
          return style("workflowArrow__icon", "nt-text-foreground-alpha-600 nt-size-4");
        }
      }));
      insert(_el$4, createComponent(Collapsible, {
        get open() {
          return isOpenChannels();
        },
        get children() {
          var _el$9 = _tmpl$45();
          insert(_el$9, createComponent(For, {
            get each() {
              return channels();
            },
            children: (channel) => createComponent(ChannelRow, {
              channel,
              get enabled() {
                return !!props.channels[channel];
              },
              get workflowId() {
                return props.workflowId;
              },
              get onChange() {
                return props.onChange;
              }
            })
          }));
          effect(() => className(_el$9, style("channelsContainer", "nt-flex nt-bg-background nt-border nt-border-neutral-alpha-50 nt-rounded-lg nt-p-2 nt-flex-col nt-gap-1 nt-overflow-hidden")));
          return _el$9;
        }
      }), null);
      effect((_p$) => {
        var _v$ = style("workflowContainer", `nt-p-1 nt-bg-neutral-alpha-25 nt-rounded-lg`), _v$2 = isOpenChannels(), _v$3 = style("workflowLabelContainer", "nt-flex nt-justify-between nt-p-1 nt-flex-nowrap nt-self-stretch nt-cursor-pointer nt-items-center nt-overflow-hidden"), _v$4 = style("workflowLabelHeader", "nt-overflow-hidden"), _v$5 = style("workflowLabel", "nt-text-sm nt-font-semibold nt-truncate"), _v$6 = props.localizationKey, _v$7 = isOpenChannels(), _v$8 = style("workflowContainerRight__icon", `nt-text-foreground-alpha-600 nt-transition-all nt-duration-200 data-[open=true]:nt-transform data-[open=true]:nt-rotate-180`), _v$9 = isOpenChannels();
        _v$ !== _p$.e && className(_el$4, _p$.e = _v$);
        _v$2 !== _p$.t && setAttribute(_el$4, "data-open", _p$.t = _v$2);
        _v$3 !== _p$.a && className(_el$5, _p$.a = _v$3);
        _v$4 !== _p$.o && className(_el$6, _p$.o = _v$4);
        _v$5 !== _p$.i && className(_el$7, _p$.i = _v$5);
        _v$6 !== _p$.n && setAttribute(_el$7, "data-localization", _p$.n = _v$6);
        _v$7 !== _p$.s && setAttribute(_el$7, "data-open", _p$.s = _v$7);
        _v$8 !== _p$.h && className(_el$8, _p$.h = _v$8);
        _v$9 !== _p$.r && setAttribute(_el$8, "data-open", _p$.r = _v$9);
        return _p$;
      }, {
        e: void 0,
        t: void 0,
        a: void 0,
        o: void 0,
        i: void 0,
        n: void 0,
        s: void 0,
        h: void 0,
        r: void 0
      });
      return _el$4;
    }
  });
};
delegateEvents(["click"]);
var _tmpl$46 = /* @__PURE__ */ template(`<div><div data-localization=preferences.title>`);
var PreferencesHeader = (props) => {
  const style = useStyle();
  const {
    t
  } = useLocalization();
  return (() => {
    var _el$ = _tmpl$46(), _el$2 = _el$.firstChild;
    insert(_el$, createComponent(Show, {
      get when() {
        return props.navigateToNotifications;
      },
      children: (navigateToNotifications) => createComponent(Button, {
        appearanceKey: "preferencesHeader__back__button",
        "class": "nt-text-foreground-alpha-600",
        variant: "unstyled",
        size: "none",
        get onClick() {
          return navigateToNotifications();
        },
        get children() {
          return createComponent(ArrowLeft, {
            get ["class"]() {
              return style("preferencesHeader__back__button__icon", "nt-size-4");
            }
          });
        }
      })
    }), _el$2);
    insert(_el$2, () => t("preferences.title"));
    effect((_p$) => {
      var _v$ = style("preferencesHeader", "nt-flex nt-bg-neutral-alpha-25 nt-shrink-0 nt-border-b nt-border-border nt-items-center nt-py-3.5 nt-px-4 nt-gap-2"), _v$2 = style("preferencesHeader__title", "nt-text-base nt-font-medium");
      _v$ !== _p$.e && className(_el$, _p$.e = _v$);
      _v$2 !== _p$.t && className(_el$2, _p$.t = _v$2);
      return _p$;
    }, {
      e: void 0,
      t: void 0
    });
    return _el$;
  })();
};
var useTabsDropdown = ({ tabs }) => {
  const [tabsList, setTabsList] = createSignal();
  const [visibleTabs, setVisibleTabs] = createSignal([]);
  const [dropdownTabs, setDropdownTabs] = createSignal([]);
  onMount(() => {
    const tabsListEl = tabsList();
    if (!tabsListEl) return;
    const tabsElements = [...tabsListEl.querySelectorAll('[role="tab"]')];
    const observer = new IntersectionObserver(
      (entries) => {
        let visibleTabIds = entries.filter((entry) => entry.isIntersecting && entry.intersectionRatio === 1).map((entry) => entry.target.id);
        if (tabsElements.length === visibleTabIds.length) {
          setVisibleTabs(tabs.filter((tab) => visibleTabIds.includes(tab.label)));
          observer.disconnect();
          return;
        }
        visibleTabIds = visibleTabIds.slice(0, -1);
        setVisibleTabs(tabs.filter((tab) => visibleTabIds.includes(tab.label)));
        setDropdownTabs(tabs.filter((tab) => !visibleTabIds.includes(tab.label)));
        observer.disconnect();
      },
      { root: tabsListEl }
    );
    for (const tabElement of tabsElements) {
      observer.observe(tabElement);
    }
  });
  return { dropdownTabs, setTabsList, visibleTabs };
};
var _tmpl$47 = /* @__PURE__ */ template(`<svg viewBox="0 0 20 20"fill=none xmlns=http://www.w3.org/2000/svg><path d="M10.0001 10.879L13.7126 7.1665L14.7731 8.227L10.0001 13L5.22705 8.227L6.28755 7.1665L10.0001 10.879Z"fill=currentColor>`);
var ArrowDown = (props) => {
  return (() => {
    var _el$ = _tmpl$47();
    spread(_el$, props, true, true);
    return _el$;
  })();
};
var _tmpl$48 = /* @__PURE__ */ template(`<svg viewBox="0 0 12 12"fill=none xmlns=http://www.w3.org/2000/svg><g clip-path=url(#clip0_3188_15050)><path d="M6 3V6L8 7M11 6C11 8.76142 8.76142 11 6 11C3.23858 11 1 8.76142 1 6C1 3.23858 3.23858 1 6 1C8.76142 1 11 3.23858 11 6Z"stroke=currentColor stroke-linecap=round stroke-linejoin=round>`);
var Clock = (props) => {
  return (() => {
    var _el$ = _tmpl$48();
    spread(_el$, props, true, true);
    return _el$;
  })();
};
var _tmpl$49 = /* @__PURE__ */ template(`<strong>`);
var _tmpl$213 = /* @__PURE__ */ template(`<p>`);
var Bold = (props) => {
  const style = useStyle();
  return (() => {
    var _el$ = _tmpl$49();
    insert(_el$, () => props.children);
    effect(() => className(_el$, style(props.appearanceKey || "strong", "nt-font-semibold")));
    return _el$;
  })();
};
var Text = (props) => props.children;
var Markdown = (props) => {
  const [local, rest] = splitProps(props, ["class", "children", "appearanceKey", "strongAppearanceKey"]);
  const style = useStyle();
  const tokens = createMemo(() => parseMarkdownIntoTokens(local.children));
  return (() => {
    var _el$2 = _tmpl$213();
    spread(_el$2, mergeProps({
      get ["class"]() {
        return style(local.appearanceKey, cn(local.class));
      }
    }, rest), false, true);
    insert(_el$2, createComponent(For, {
      get each() {
        return tokens();
      },
      children: (token) => {
        if (token.type === "bold") {
          return createComponent(Bold, {
            get appearanceKey() {
              return local.strongAppearanceKey;
            },
            get children() {
              return token.content;
            }
          });
        } else {
          return createComponent(Text, {
            get children() {
              return token.content;
            }
          });
        }
      }
    }));
    return _el$2;
  })();
};
var Markdown_default = Markdown;
var _tmpl$50 = /* @__PURE__ */ template(`<span>`);
var badgeVariants = cva(cn("nt-inline-flex nt-flex-row nt-gap-1 nt-items-center"), {
  variants: {
    variant: {
      secondary: "nt-bg-neutral-alpha-50"
    },
    size: {
      default: "nt-px-1 nt-py-px nt-rounded-sm nt-text-xs nt-px-1"
    }
  },
  defaultVariants: {
    variant: "secondary",
    size: "default"
  }
});
var Badge = (props) => {
  const [local, rest] = splitProps(props, ["class", "appearanceKey"]);
  const style = useStyle();
  return (() => {
    var _el$ = _tmpl$50();
    spread(_el$, mergeProps({
      get ["data-variant"]() {
        return props.variant;
      },
      get ["data-size"]() {
        return props.size;
      },
      get ["class"]() {
        return style(local.appearanceKey || "badge", cn(badgeVariants({
          variant: props.variant,
          size: props.size
        }), local.class));
      }
    }, rest), false, false);
    return _el$;
  })();
};
var _tmpl$51 = /* @__PURE__ */ template(`<svg viewBox="0 0 10 10"fill=none xmlns=http://www.w3.org/2000/svg><path d="M4.99992 2.91634V4.99967M4.79992 5.39616L3.27392 6.46553M1.66659 1.66634L8.33325 8.33301M9.16658 4.99967C9.16658 7.30086 7.30111 9.16634 4.99992 9.16634C2.69873 9.16634 0.833252 7.30086 0.833252 4.99967C0.833252 2.69849 2.69873 0.833008 4.99992 0.833008C7.30111 0.833008 9.16658 2.69849 9.16658 4.99967Z"stroke=currentColor stroke-linecap=round stroke-linejoin=round>`);
var Unsnooze = (props) => {
  return (() => {
    var _el$ = _tmpl$51();
    spread(_el$, props, true, true);
    return _el$;
  })();
};
var TooltipContext = createContext(void 0);
function TooltipRoot(props) {
  const [reference, setReference] = createSignal(null);
  const [floating, setFloating] = createSignal(null);
  const position = useFloating(reference, floating, {
    placement: props.placement || "top",
    strategy: "absolute",
    whileElementsMounted: autoUpdate,
    middleware: [offset(10), flip({
      fallbackPlacements: props.fallbackPlacements || ["bottom"]
    }), shift()]
  });
  const [isOpen, setIsOpen] = useUncontrolledState({
    value: props.open,
    fallbackValue: false
  });
  return createComponent(TooltipContext.Provider, {
    value: {
      reference,
      setReference,
      floating,
      setFloating,
      open: isOpen,
      setOpen: setIsOpen,
      floatingStyles: () => {
        var _a, _b;
        return {
          position: position.strategy,
          top: `${(_a = position.y) != null ? _a : 0}px`,
          left: `${(_b = position.x) != null ? _b : 0}px`
        };
      }
    },
    get children() {
      return props.children;
    }
  });
}
function useTooltip() {
  const context = useContext(TooltipContext);
  if (!context) {
    throw new Error("useTooltip must be used within Tooltip.Root component");
  }
  return context;
}

// src/ui/components/primitives/Tooltip/TooltipContent.tsx
var _tmpl$52 = /* @__PURE__ */ template(`<div>`);
var tooltipContentVariants = () => "nt-bg-foreground nt-p-2 nt-shadow-tooltip nt-rounded-lg nt-text-background nt-text-xs";
var TooltipContentBody = (props) => {
  const {
    open,
    setFloating,
    floating,
    floatingStyles
  } = useTooltip();
  const {
    setActive,
    removeActive
  } = useFocusManager();
  const [local, rest] = splitProps(props, ["class", "appearanceKey", "style"]);
  const style = useStyle();
  onMount(() => {
    const floatingEl = floating();
    setActive(floatingEl);
    onCleanup(() => {
      removeActive(floatingEl);
    });
  });
  return (() => {
    var _el$ = _tmpl$52();
    use(setFloating, _el$);
    spread(_el$, mergeProps({
      get ["class"]() {
        return memo(() => !!local.class)() ? local.class : style(local.appearanceKey || "tooltipContent", tooltipContentVariants());
      },
      get style() {
        return __spreadProps(__spreadValues({}, floatingStyles()), {
          "z-index": 99999
        });
      },
      get ["data-open"]() {
        return open();
      }
    }, rest), false, false);
    return _el$;
  })();
};
var TooltipContent = (props) => {
  const {
    open
  } = useTooltip();
  return createComponent(Show, {
    get when() {
      return open();
    },
    get children() {
      return createComponent(Portal$1, {
        get children() {
          return createComponent(Root, {
            get children() {
              return createComponent(TooltipContentBody, props);
            }
          });
        }
      });
    }
  });
};
var _tmpl$53 = /* @__PURE__ */ template(`<button>`);
var TooltipTrigger = (props) => {
  const {
    setReference,
    setOpen
  } = useTooltip();
  const style = useStyle();
  const [local, rest] = splitProps(props, ["appearanceKey", "asChild", "onClick", "onMouseEnter", "onMouseLeave", "ref"]);
  const handleMouseEnter = (e) => {
    if (typeof local.onMouseEnter === "function") {
      local.onMouseEnter(e);
    }
    setOpen(true);
  };
  const ref = createMemo(() => local.ref ? mergeRefs(setReference, local.ref) : setReference);
  const handleMouseLeave = (e) => {
    if (typeof local.onMouseLeave === "function") {
      local.onMouseLeave(e);
    }
    setOpen(false);
  };
  if (local.asChild) {
    return createComponent(Dynamic, mergeProps({
      get component() {
        return local.asChild;
      },
      ref(r$) {
        var _ref$ = ref();
        typeof _ref$ === "function" && _ref$(r$);
      },
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave
    }, rest));
  }
  return (() => {
    var _el$ = _tmpl$53();
    _el$.addEventListener("mouseleave", () => {
      setOpen(false);
    });
    _el$.addEventListener("mouseenter", () => {
      setOpen(true);
    });
    var _ref$2 = ref();
    typeof _ref$2 === "function" && use(_ref$2, _el$);
    spread(_el$, mergeProps({
      get ["class"]() {
        return style(local.appearanceKey || "tooltipTrigger");
      }
    }, rest), false, true);
    insert(_el$, () => props.children);
    return _el$;
  })();
};

// src/ui/components/primitives/Tooltip/index.ts
var Tooltip = {
  Root: TooltipRoot,
  /**
   * Tooltip.Trigger renders a `button` and has no default styling.
   */
  Trigger: TooltipTrigger,
  /**
   * Tooltip.Content renders a `div` and has popover specific styling.
   */
  Content: TooltipContent
};
var _tmpl$54 = /* @__PURE__ */ template(`<svg viewBox="0 0 20 20"fill=none xmlns=http://www.w3.org/2000/svg><path d="M10.7957 10.0009L7.08325 6.2884L8.14375 5.2279L12.9168 10.0009L8.14375 14.7739L7.08325 13.7134L10.7957 10.0009Z"fill=currentColor>`);
var ArrowRight = (props) => {
  return (() => {
    var _el$ = _tmpl$54();
    spread(_el$, props, true, true);
    return _el$;
  })();
};

// src/ui/components/primitives/DatePicker.tsx
var _tmpl$55 = /* @__PURE__ */ template(`<div>`);
var _tmpl$214 = /* @__PURE__ */ template(`<div><span>`);
var DatePickerContext = createContext({
  currentDate: () => /* @__PURE__ */ new Date(),
  setCurrentDate: () => {
  },
  viewMonth: () => /* @__PURE__ */ new Date(),
  setViewMonth: () => {
  },
  selectedDate: () => null,
  setSelectedDate: () => {
  },
  maxDays: () => 0
});
var useDatePicker = () => useContext(DatePickerContext);
var DatePicker = (props) => {
  const [local, rest] = splitProps(props, ["children", "value", "onDateChange", "class", "maxDays"]);
  const style = useStyle();
  const today = /* @__PURE__ */ new Date();
  today.setHours(0, 0, 0, 0);
  const [currentDate, setCurrentDate] = createSignal(today);
  const [viewMonth, setViewMonth] = createSignal(today);
  const [selectedDate, setSelectedDate] = createSignal(local.value ? new Date(local.value) : null);
  const handleDateSelect = (date) => {
    setSelectedDate(date);
    if (local.onDateChange) {
      local.onDateChange(date);
    }
  };
  return createComponent(DatePickerContext.Provider, {
    value: {
      currentDate,
      setCurrentDate,
      viewMonth,
      setViewMonth,
      selectedDate,
      setSelectedDate: handleDateSelect,
      maxDays: () => props.maxDays
    },
    get children() {
      var _el$ = _tmpl$55();
      spread(_el$, mergeProps({
        get ["class"]() {
          return style("datePicker", cn("nt-p-2", local.class));
        }
      }, rest), false, true);
      insert(_el$, () => local.children);
      return _el$;
    }
  });
};
var DatePickerHeader = (props) => {
  const [local, rest] = splitProps(props, ["class", "appearanceKey", "children"]);
  const style = useStyle();
  const {
    viewMonth,
    setViewMonth,
    currentDate,
    maxDays
  } = useDatePicker();
  const handlePrevMonth = () => {
    const date = new Date(viewMonth());
    date.setMonth(date.getMonth() - 1);
    const currentMonth = currentDate();
    if (date.getFullYear() < currentMonth.getFullYear() || date.getFullYear() === currentMonth.getFullYear() && date.getMonth() < currentMonth.getMonth()) {
      return;
    }
    setViewMonth(date);
  };
  const handleNextMonth = () => {
    const date = new Date(viewMonth());
    date.setMonth(date.getMonth() + 1);
    const maxDaysValue = maxDays();
    if (maxDaysValue > 0) {
      const maxDate = new Date(currentDate());
      maxDate.setDate(maxDate.getDate() + maxDaysValue);
      if (date.getFullYear() > maxDate.getFullYear() || date.getFullYear() === maxDate.getFullYear() && date.getMonth() > maxDate.getMonth()) {
        return;
      }
    }
    setViewMonth(date);
  };
  const isPrevDisabled = () => {
    const current = currentDate();
    const view = viewMonth();
    return view.getFullYear() === current.getFullYear() && view.getMonth() === current.getMonth();
  };
  const isNextDisabled = () => {
    const maxDaysValue = maxDays();
    if (maxDaysValue === 0) return false;
    const view = viewMonth();
    const maxDate = new Date(currentDate());
    maxDate.setDate(maxDate.getDate() + maxDaysValue);
    return view.getFullYear() === maxDate.getFullYear() && view.getMonth() === maxDate.getMonth();
  };
  return (() => {
    var _el$2 = _tmpl$214(), _el$3 = _el$2.firstChild;
    spread(_el$2, mergeProps({
      get ["class"]() {
        return style(local.appearanceKey || "datePickerControl", cn("nt-flex nt-items-center nt-justify-between nt-gap-1.5 nt-h-7 nt-p-1 nt-mb-2 nt-rounded-lg nt-bg-background", local.class));
      }
    }, rest), false, true);
    insert(_el$2, createComponent(Button, {
      appearanceKey: "datePickerControlPrevTrigger",
      variant: "ghost",
      onClick: (e) => {
        e.stopPropagation();
        handlePrevMonth();
      },
      get disabled() {
        return isPrevDisabled();
      },
      "class": "nt-flex nt-justify-center nt-items-center nt-gap-0.5 nt-w-5 nt-h-5 nt-p-0 nt-rounded-md nt-bg-background nt-shadow-[0px_1px_2px_0px_rgba(10,13,20,0.03)]",
      get children() {
        return createComponent(ArrowLeft, {
          get ["class"]() {
            return style("datePickerControlPrevTrigger__icon", "nt-size-4 nt-text-foreground-alpha-700");
          }
        });
      }
    }), _el$3);
    insert(_el$3, () => viewMonth().toLocaleDateString("en-US", {
      month: "long",
      year: "numeric"
    }));
    insert(_el$2, createComponent(Button, {
      appearanceKey: "datePickerControlNextTrigger",
      variant: "ghost",
      onClick: (e) => {
        e.stopPropagation();
        handleNextMonth();
      },
      get disabled() {
        return isNextDisabled();
      },
      "class": "nt-flex nt-justify-center nt-items-center nt-gap-0.5 nt-w-5 nt-h-5 nt-p-0 nt-rounded-md nt-bg-background nt-shadow-[0px_1px_2px_0px_rgba(10,13,20,0.03)]",
      get children() {
        return createComponent(ArrowRight, {
          get ["class"]() {
            return style("datePickerControlNextTrigger__icon", "nt-size-4 nt-text-foreground-alpha-700");
          }
        });
      }
    }), null);
    effect(() => className(_el$3, style("datePickerHeaderMonth", "nt-text-sm nt-font-medium nt-text-foreground-alpha-700")));
    return _el$2;
  })();
};
var DatePickerGridCellTrigger = (props) => {
  const [local, rest] = splitProps(props, ["class", "appearanceKey", "date"]);
  const {
    selectedDate,
    viewMonth,
    setSelectedDate,
    currentDate,
    maxDays
  } = useDatePicker();
  const {
    t
  } = useLocalization();
  const isCurrentMonth = props.date.getMonth() === viewMonth().getMonth();
  const isPastDate = () => {
    const today = currentDate();
    return props.date < today;
  };
  const isFutureDate = () => {
    const maxDaysValue = maxDays();
    if (maxDaysValue === 0) return false;
    const maxDate = new Date(currentDate());
    maxDate.setDate(maxDate.getDate() + maxDaysValue);
    return props.date > maxDate;
  };
  const isDisabled = !isCurrentMonth || isPastDate() || isFutureDate();
  const isExceedingLimit = () => {
    return isCurrentMonth && isFutureDate();
  };
  const buttonElement = createComponent(Button, mergeProps({
    appearanceKey: "datePickerCalendarDay__button",
    variant: "ghost",
    disabled: isDisabled,
    onClick: (e) => {
      e.stopPropagation();
      setSelectedDate(local.date);
    },
    get ["class"]() {
      var _a;
      return cn("nt-size-8 nt-w-full nt-rounded-md nt-flex nt-items-center nt-justify-center", {
        "nt-text-muted-foreground disabled:nt-opacity-20": !isCurrentMonth || isPastDate(),
        "nt-text-foreground-alpha-700": isCurrentMonth && !isPastDate() && !isFutureDate()
      }, {
        "nt-bg-primary-alpha-300 hover:nt-bg-primary-alpha-400": ((_a = selectedDate()) == null ? void 0 : _a.toDateString()) === local.date.toDateString()
      });
    }
  }, rest, {
    get children() {
      return local.date.getDate();
    }
  }));
  if (isExceedingLimit()) {
    return createComponent(Tooltip.Root, {
      get children() {
        return [createComponent(Tooltip.Trigger, {
          children: buttonElement
        }), createComponent(Tooltip.Content, {
          get children() {
            return t("snooze.datePicker.exceedingLimitTooltip", {
              days: maxDays()
            });
          }
        })];
      }
    });
  }
  return buttonElement;
};
var DatePickerCalendar = (props) => {
  const [local, rest] = splitProps(props, ["class", "appearanceKey"]);
  const style = useStyle();
  const {
    viewMonth
  } = useDatePicker();
  const getDaysInMonth = () => {
    const year = viewMonth().getFullYear();
    const month = viewMonth().getMonth();
    const firstDay = new Date(year, month, 1);
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const startingDay = firstDay.getDay();
    const days = [];
    for (let i = 0; i < startingDay; i += 1) {
      const prevMonthDay = new Date(year, month, -i);
      days.unshift(prevMonthDay);
    }
    for (let i = 1; i <= daysInMonth; i += 1) {
      days.push(new Date(year, month, i));
    }
    const remainingCells = 7 - days.length % 7;
    if (remainingCells < 7) {
      for (let i = 1; i <= remainingCells; i += 1) {
        days.push(new Date(year, month + 1, i));
      }
    }
    return days;
  };
  return (() => {
    var _el$8 = _tmpl$55();
    _el$8.$$click = (e) => e.stopPropagation();
    spread(_el$8, mergeProps({
      get ["class"]() {
        return style(local.appearanceKey || "datePickerCalendar", cn("nt-grid nt-grid-cols-7 nt-gap-1", local.class));
      }
    }, rest), false, true);
    insert(_el$8, () => getDaysInMonth().map((date) => {
      return createComponent(DatePickerGridCellTrigger, {
        date
      });
    }));
    return _el$8;
  })();
};
delegateEvents(["click"]);
var _tmpl$56 = /* @__PURE__ */ template(`<input>`);
var inputVariants = cva(cn(`focus-visible:nt-outline-none focus-visible:nt-ring-2 focus-visible:nt-rounded-md focus-visible:nt-ring-ring focus-visible:nt-ring-offset-2`), {
  variants: {
    variant: {
      default: "nt-border nt-border-neutral-200 nt-rounded-md nt-p-1 nt-bg-background"
    },
    size: {
      default: "nt-h-9",
      sm: "nt-h-8 nt-text-sm"
    }
  },
  defaultVariants: {
    variant: "default",
    size: "default"
  }
});
var Input = (props) => {
  const [local, rest] = splitProps(props, ["class", "appearanceKey"]);
  const style = useStyle();
  return (() => {
    var _el$ = _tmpl$56();
    spread(_el$, mergeProps({
      get ["data-variant"]() {
        return props.variant;
      },
      get ["data-size"]() {
        return props.size;
      },
      get ["class"]() {
        return style(local.appearanceKey || "input", cn(inputVariants({
          variant: props.variant,
          size: props.size
        }), local.class));
      }
    }, rest), false, false);
    return _el$;
  })();
};

// src/ui/components/primitives/TimePicker.tsx
var _tmpl$57 = /* @__PURE__ */ template(`<div><span>:</span><select><option value=AM>AM</option><option value=PM>PM`);
var TimePicker = (props) => {
  const [local, rest] = splitProps(props, ["value", "onChange", "class", "appearanceKey"]);
  const style = useStyle();
  const initialValue = local.value || {
    hour: 12,
    minute: 0,
    isPM: true
  };
  const [hour, setHour] = createSignal(initialValue.hour);
  const [minute, setMinute] = createSignal(initialValue.minute);
  const [isPM, setIsPM] = createSignal(initialValue.isPM);
  const notifyChange = () => {
    if (local.onChange) {
      local.onChange({
        hour: hour(),
        minute: minute(),
        isPM: isPM()
      });
    }
  };
  const handleHourChange = (newHour) => {
    setHour(newHour);
    notifyChange();
  };
  const handleMinuteChange = (newMinute) => {
    setMinute(newMinute);
    notifyChange();
  };
  const handlePeriodChange = (newIsPM) => {
    setIsPM(newIsPM);
    notifyChange();
  };
  const handleKeyDown = (e) => {
    const allowedKeys = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown", "Backspace", "Delete", "Tab"];
    if (!allowedKeys.includes(e.key)) {
      e.preventDefault();
    }
  };
  return (() => {
    var _el$ = _tmpl$57(), _el$2 = _el$.firstChild, _el$3 = _el$2.nextSibling;
    _el$.$$click = (e) => e.stopPropagation();
    spread(_el$, mergeProps({
      get ["class"]() {
        return style(local.appearanceKey || "timePicker", cn("nt-flex nt-items-center nt-gap-1", local.class));
      }
    }, rest), false, true);
    insert(_el$, createComponent(Input, {
      size: "sm",
      type: "number",
      min: "1",
      max: "12",
      onKeyDown: (e) => {
        e.stopPropagation();
        handleKeyDown(e);
      },
      get value() {
        return hour().toString();
      },
      onInput: (e) => {
        e.stopPropagation();
        enforceMinMax(e.currentTarget);
        handleHourChange(Number(e.currentTarget.value));
      },
      get ["class"]() {
        return style("timePickerHour__input", "nt-flex nt-font-mono nt-justify-center nt-items-center nt-text-center nt-h-7 nt-w-[calc(2ch+2rem)] nt-px-2");
      }
    }), _el$2);
    insert(_el$, createComponent(Input, {
      size: "sm",
      type: "number",
      min: "0",
      max: "59",
      onKeyDown: (e) => {
        e.stopPropagation();
        handleKeyDown(e);
      },
      get value() {
        return minute().toString().padStart(2, "0");
      },
      onInput: (e) => {
        e.stopPropagation();
        enforceMinMax(e.currentTarget);
        handleMinuteChange(Number(e.currentTarget.value));
      },
      get ["class"]() {
        return style("timePickerHour__input", "nt-flex nt-font-mono nt-justify-center nt-items-center nt-text-center nt-h-7 nt-w-[calc(2ch+2rem)] nt-px-2");
      }
    }), _el$3);
    _el$3.addEventListener("change", (e) => {
      e.stopPropagation();
      handlePeriodChange(e.target.value === "PM");
    });
    _el$3.$$click = (e) => e.stopPropagation();
    effect((_p$) => {
      var _v$ = style("timePicker__separator", "nt-text-xl"), _v$2 = style("timePicker__periodSelect", `${inputVariants({
        size: "sm"
      })} nt-h-7 nt-font-mono`);
      _v$ !== _p$.e && className(_el$2, _p$.e = _v$);
      _v$2 !== _p$.t && className(_el$3, _p$.t = _v$2);
      return _p$;
    }, {
      e: void 0,
      t: void 0
    });
    effect(() => _el$3.value = isPM() ? "PM" : "AM");
    return _el$;
  })();
};
var enforceMinMax = (el) => {
  if (el.value !== "") {
    const value = parseInt(el.value, 10);
    const min = parseInt(el.min, 10);
    const max = parseInt(el.max, 10);
    if (value < min || value > max) {
      el.value = el.value.slice(0, -1);
      const newValue = parseInt(el.value, 10);
      if (Number.isNaN(newValue) || newValue < min) {
        el.value = el.min;
      } else if (newValue > max) {
        el.value = el.max;
      }
    }
  }
};
delegateEvents(["click"]);

// src/ui/components/Notification/SnoozeDateTimePicker.tsx
var _tmpl$58 = /* @__PURE__ */ template(`<div><div><p></p></div><div>`);
var fiveMinutesFromNow = () => {
  const futureTime = new Date(Date.now() + 5 * 60 * 1e3);
  const hours = futureTime.getHours();
  const isPM = hours >= 12;
  let hour;
  if (hours === 0) {
    hour = 12;
  } else if (hours === 12) {
    hour = 12;
  } else {
    hour = hours % 12;
  }
  return {
    hour,
    minute: futureTime.getMinutes(),
    isPM
  };
};
var convertTo24Hour = (time) => {
  if (time.isPM) {
    return time.hour === 12 ? 12 : time.hour + 12;
  } else {
    return time.hour === 12 ? 0 : time.hour;
  }
};
var REFRESH_INTERVAL = 5e3;
var SnoozeDateTimePicker = (props) => {
  const style = useStyle();
  const {
    t
  } = useLocalization();
  const [selectedDate, setSelectedDate] = createSignal(null);
  const [timeValue, setTimeValue] = createSignal(fiveMinutesFromNow());
  const [currentTime, setCurrentTime] = createSignal(/* @__PURE__ */ new Date());
  createEffect(() => {
    const interval = setInterval(() => {
      setCurrentTime(/* @__PURE__ */ new Date());
    }, REFRESH_INTERVAL);
    onCleanup(() => clearInterval(interval));
  });
  const onDateTimeSelect = () => {
    var _a;
    if (selectedDate() && timeValue()) {
      const date = new Date(selectedDate());
      const hours = convertTo24Hour(timeValue());
      date.setHours(hours, timeValue().minute, 0, 0);
      (_a = props.onSelect) == null ? void 0 : _a.call(props, date);
    }
  };
  const maxDays = () => {
    if (!props.maxDurationHours) return 0;
    return Math.ceil(props.maxDurationHours / 24);
  };
  const getSelectedDateTime = () => {
    if (!selectedDate() || !timeValue()) return null;
    const date = new Date(selectedDate());
    const hours = convertTo24Hour(timeValue());
    date.setHours(hours, timeValue().minute, 0, 0);
    return date;
  };
  const isTimeInPast = createMemo(() => {
    const dateTime = getSelectedDateTime();
    if (!dateTime) return false;
    const minAllowedDateTime = new Date(currentTime().getTime() + 3 * 60 * 1e3);
    return dateTime < minAllowedDateTime;
  });
  const isTimeExceedingMaxDuration = createMemo(() => {
    const dateTime = getSelectedDateTime();
    if (!dateTime || !props.maxDurationHours) return false;
    const maxAllowedDateTime = new Date(currentTime().getTime() + props.maxDurationHours * 60 * 60 * 1e3);
    return dateTime > maxAllowedDateTime;
  });
  const applyButtonEnabled = createMemo(() => {
    if (!selectedDate() || !timeValue()) {
      return false;
    }
    if (isTimeInPast()) {
      return false;
    }
    if (props.maxDurationHours && isTimeExceedingMaxDuration()) {
      return false;
    }
    return true;
  });
  const getTooltipMessage = createMemo(() => {
    if (isTimeInPast()) {
      return t("snooze.datePicker.pastDateTooltip");
    }
    if (isTimeExceedingMaxDuration()) {
      return t("snooze.datePicker.exceedingLimitTooltip", {
        days: maxDays()
      });
    }
    return t("snooze.datePicker.noDateSelectedTooltip");
  });
  return (() => {
    var _el$ = _tmpl$58(), _el$2 = _el$.firstChild, _el$3 = _el$2.firstChild, _el$4 = _el$2.nextSibling;
    _el$.$$click = (e) => e.stopPropagation();
    insert(_el$, createComponent(DatePicker, {
      onDateChange: (date) => setSelectedDate(date),
      get maxDays() {
        return maxDays();
      },
      get children() {
        return [createComponent(DatePickerHeader, {}), createComponent(DatePickerCalendar, {})];
      }
    }), _el$2);
    insert(_el$3, () => t("snooze.datePicker.timePickerLabel"));
    insert(_el$2, createComponent(TimePicker, {
      get value() {
        return timeValue();
      },
      onChange: setTimeValue
    }), null);
    insert(_el$4, createComponent(Button, {
      appearanceKey: "snoozeDatePickerCancel__button",
      variant: "secondary",
      "class": "nt-h-7 nt-w-[60px] nt-px-2",
      get onClick() {
        return props.onCancel;
      },
      get children() {
        return t("snooze.datePicker.cancel");
      }
    }), null);
    insert(_el$4, createComponent(Show, {
      get when() {
        return applyButtonEnabled();
      },
      get fallback() {
        return createComponent(Tooltip.Root, {
          get children() {
            return [createComponent(Tooltip.Trigger, {
              asChild: (props2) => createComponent(Button, mergeProps({
                appearanceKey: "snoozeDatePickerApply__button",
                "class": "nt-h-7 nt-w-[60px] nt-px-2 !nt-pointer-events-auto",
                onClick: onDateTimeSelect,
                disabled: true
              }, props2, {
                get children() {
                  return t("snooze.datePicker.apply");
                }
              }))
            }), createComponent(Tooltip.Content, {
              get children() {
                return getTooltipMessage();
              }
            })];
          }
        });
      },
      get children() {
        return createComponent(Button, {
          appearanceKey: "snoozeDatePickerApply__button",
          "class": "nt-h-7 nt-w-[60px] nt-px-2",
          onClick: onDateTimeSelect,
          get children() {
            return t("snooze.datePicker.apply");
          }
        });
      }
    }), null);
    effect((_p$) => {
      var _v$ = style("snoozeDatePicker", "nt-bg-background nt-rounded-md nt-shadow-lg nt-w-[260px]"), _v$2 = style("snoozeDatePicker__timePickerContainer", "nt-flex nt-flex-row nt-justify-between nt-p-2 nt-items-center nt-border-t nt-border-neutral-200 nt-border-b"), _v$3 = style("snoozeDatePicker__timePickerLabel", "nt-text-sm nt-font-medium nt-text-foreground-alpha-700 nt-p-2"), _v$4 = style("snoozeDatePicker__actions", "nt-flex nt-flex-row nt-justify-end nt-gap-2 nt-p-2");
      _v$ !== _p$.e && className(_el$, _p$.e = _v$);
      _v$2 !== _p$.t && className(_el$2, _p$.t = _v$2);
      _v$3 !== _p$.a && className(_el$3, _p$.a = _v$3);
      _v$4 !== _p$.o && className(_el$4, _p$.o = _v$4);
      return _p$;
    }, {
      e: void 0,
      t: void 0,
      a: void 0,
      o: void 0
    });
    return _el$;
  })();
};
delegateEvents(["click"]);

// src/ui/components/Notification/NotificationActions.tsx
var _tmpl$59 = /* @__PURE__ */ template(`<div><span>`);
var _tmpl$215 = /* @__PURE__ */ template(`<span>`);
var SNOOZE_PRESETS = [{
  key: "snooze.options.anHourFromNow",
  hours: 1,
  getDate: () => new Date(Date.now() + 1 * 60 * 60 * 1e3)
}, {
  key: "snooze.options.inOneDay",
  hours: 24,
  getDate: () => {
    const date = new Date(Date.now() + 1 * 24 * 60 * 60 * 1e3);
    date.setHours(9, 0, 0, 0);
    return date;
  }
}, {
  key: "snooze.options.inOneWeek",
  hours: 168,
  getDate: () => {
    const date = new Date(Date.now() + 7 * 24 * 60 * 60 * 1e3);
    date.setHours(9, 0, 0, 0);
    return date;
  }
}];
var formatSnoozeOption = (preset, t, locale) => {
  const date = preset.getDate();
  const dayName = new Intl.DateTimeFormat(locale, {
    weekday: "short"
  }).format(date);
  const dateMonth = new Intl.DateTimeFormat(locale, {
    day: "numeric",
    month: "short"
  }).format(date);
  const timeString = new Intl.DateTimeFormat(locale, {
    hour: "numeric",
    minute: "numeric"
  }).format(date);
  return {
    label: t(preset.key),
    time: `${dayName}, ${dateMonth}, ${timeString}`
  };
};
var SnoozeDropdownItem = (props) => {
  const style = useStyle();
  const content = [(() => {
    var _el$ = _tmpl$59(), _el$2 = _el$.firstChild;
    insert(_el$, createComponent(Clock, {
      get ["class"]() {
        return style("notificationSnooze__dropdownItem__icon", "nt-size-3 nt-text-foreground-alpha-400 nt-mr-2");
      }
    }), _el$2);
    insert(_el$2, () => props.label);
    effect((_p$) => {
      var _v$ = style("dropdownItem", "nt-flex nt-items-center nt-flex-1"), _v$2 = style("dropdownItemLabel");
      _v$ !== _p$.e && className(_el$, _p$.e = _v$);
      _v$2 !== _p$.t && className(_el$2, _p$.t = _v$2);
      return _p$;
    }, {
      e: void 0,
      t: void 0
    });
    return _el$;
  })(), (() => {
    var _el$3 = _tmpl$215();
    insert(_el$3, () => props.time);
    effect(() => className(_el$3, style("dropdownItemRight__icon", "nt-text-foreground-alpha-300 nt-ml-2 nt-text-xs")));
    return _el$3;
  })()];
  if (props.asChild) {
    return props.asChild({
      class: style("notificationSnooze__dropdownItem", dropdownItemVariants()),
      onClick: props.onClick,
      children: content
    });
  }
  return createComponent(Dropdown.Item, {
    appearanceKey: "notificationSnooze__dropdownItem",
    get onClick() {
      return props.onClick;
    },
    get ["class"]() {
      return style("dropdownItem", "nt-justify-between");
    },
    children: content
  });
};
var ReadButton = (props) => {
  const style = useStyle();
  const {
    t
  } = useLocalization();
  return createComponent(Tooltip.Root, {
    get children() {
      return [createComponent(Tooltip.Trigger, {
        asChild: (childProps) => createComponent(Button, mergeProps({
          appearanceKey: "notificationRead__button",
          size: "iconSm",
          variant: "ghost"
        }, childProps, {
          onClick: (e) => __async(this, null, function* () {
            e.stopPropagation();
            yield props.notification.read();
          }),
          get children() {
            return createComponent(MarkAsRead, {
              get ["class"]() {
                return style("notificationRead__icon", "nt-size-3");
              }
            });
          }
        }))
      }), createComponent(Tooltip.Content, {
        "data-localization": "notification.actions.read.tooltip",
        get children() {
          return t("notification.actions.read.tooltip");
        }
      })];
    }
  });
};
var UnreadButton = (props) => {
  const style = useStyle();
  const {
    t
  } = useLocalization();
  return createComponent(Tooltip.Root, {
    get children() {
      return [createComponent(Tooltip.Trigger, {
        asChild: (childProps) => createComponent(Button, mergeProps({
          appearanceKey: "notificationUnread__button",
          size: "iconSm",
          variant: "ghost"
        }, childProps, {
          onClick: (e) => __async(this, null, function* () {
            e.stopPropagation();
            yield props.notification.unread();
          }),
          get children() {
            return createComponent(MarkAsUnread, {
              get ["class"]() {
                return style("notificationUnread__icon", "nt-size-3");
              }
            });
          }
        }))
      }), createComponent(Tooltip.Content, {
        "data-localization": "notification.actions.unread.tooltip",
        get children() {
          return t("notification.actions.unread.tooltip");
        }
      })];
    }
  });
};
var ArchiveButton = (props) => {
  const style = useStyle();
  const {
    t
  } = useLocalization();
  return createComponent(Tooltip.Root, {
    get children() {
      return [createComponent(Tooltip.Trigger, {
        asChild: (childProps) => createComponent(Button, mergeProps({
          appearanceKey: "notificationArchive__button",
          size: "iconSm",
          variant: "ghost"
        }, childProps, {
          onClick: (e) => __async(this, null, function* () {
            e.stopPropagation();
            yield props.notification.archive();
          }),
          get children() {
            return createComponent(MarkAsArchived, {
              get ["class"]() {
                return style("notificationArchive__icon", "nt-size-3");
              }
            });
          }
        }))
      }), createComponent(Tooltip.Content, {
        "data-localization": "notification.actions.archive.tooltip",
        get children() {
          return t("notification.actions.archive.tooltip");
        }
      })];
    }
  });
};
var UnarchiveButton = (props) => {
  const style = useStyle();
  const {
    t
  } = useLocalization();
  return createComponent(Tooltip.Root, {
    get children() {
      return [createComponent(Tooltip.Trigger, {
        asChild: (childProps) => createComponent(Button, mergeProps({
          appearanceKey: "notificationUnarchive__button",
          size: "iconSm",
          variant: "ghost"
        }, childProps, {
          onClick: (e) => __async(this, null, function* () {
            e.stopPropagation();
            yield props.notification.unarchive();
          }),
          get children() {
            return createComponent(MarkAsUnarchived, {
              get ["class"]() {
                return style("notificationArchive__icon", "nt-size-3");
              }
            });
          }
        }))
      }), createComponent(Tooltip.Content, {
        "data-localization": "notification.actions.unarchive.tooltip",
        get children() {
          return t("notification.actions.unarchive.tooltip");
        }
      })];
    }
  });
};
var UnsnoozeButton = (props) => {
  const style = useStyle();
  const {
    t
  } = useLocalization();
  return createComponent(Tooltip.Root, {
    get children() {
      return [createComponent(Tooltip.Trigger, {
        asChild: (childProps) => createComponent(Button, mergeProps({
          appearanceKey: "notificationUnsnooze__button",
          size: "iconSm",
          variant: "ghost"
        }, childProps, {
          onClick: (e) => __async(this, null, function* () {
            e.stopPropagation();
            yield props.notification.unsnooze();
          }),
          get children() {
            return createComponent(Unsnooze, {
              get ["class"]() {
                return style("notificationUnsnooze__icon", "nt-size-3");
              }
            });
          }
        }))
      }), createComponent(Tooltip.Content, {
        "data-localization": "notification.actions.unsnooze.tooltip",
        get children() {
          return t("notification.actions.unsnooze.tooltip");
        }
      })];
    }
  });
};
var SnoozeButton = (props) => {
  const style = useStyle();
  const {
    t,
    locale
  } = useLocalization();
  const {
    maxSnoozeDurationHours
  } = useInboxContext();
  const [isSnoozeDateTimePickerOpen, setIsSnoozeDateTimePickerOpen] = createSignal(false);
  const availableSnoozePresets = createMemo(() => {
    if (!maxSnoozeDurationHours()) return SNOOZE_PRESETS;
    return SNOOZE_PRESETS.filter((preset) => preset.hours <= maxSnoozeDurationHours());
  });
  return createComponent(Tooltip.Root, {
    get children() {
      return [createComponent(Tooltip.Trigger, {
        asChild: (tooltipProps) => createComponent(Dropdown.Root, {
          get children() {
            return [createComponent(Dropdown.Trigger, mergeProps(tooltipProps, {
              asChild: (popoverProps) => createComponent(Button, mergeProps({
                appearanceKey: "notificationSnooze__button",
                size: "iconSm",
                variant: "ghost"
              }, popoverProps, {
                onClick: (e) => {
                  var _a;
                  e.stopPropagation();
                  (_a = popoverProps.onClick) == null ? void 0 : _a.call(popoverProps, e);
                },
                get children() {
                  return createComponent(Snooze, {
                    get ["class"]() {
                      return style("notificationSnooze__icon", "nt-size-3");
                    }
                  });
                }
              }))
            })), createComponent(Dropdown.Content, {
              portal: true,
              appearanceKey: "notificationSnooze__dropdownContent",
              get children() {
                return [createComponent(For, {
                  get each() {
                    return availableSnoozePresets();
                  },
                  children: (preset) => {
                    const option = formatSnoozeOption(preset, t, locale());
                    return createComponent(SnoozeDropdownItem, {
                      get label() {
                        return option.label;
                      },
                      get time() {
                        return option.time;
                      },
                      onClick: (e) => __async(this, null, function* () {
                        e.stopPropagation();
                        yield props.notification.snooze(preset.getDate().toISOString());
                      })
                    });
                  }
                }), createComponent(Popover.Root, {
                  get open() {
                    return isSnoozeDateTimePickerOpen();
                  },
                  onOpenChange: setIsSnoozeDateTimePickerOpen,
                  placement: "bottom-start",
                  get children() {
                    return [createComponent(SnoozeDropdownItem, {
                      get label() {
                        return t("snooze.options.customTime");
                      },
                      time: "",
                      asChild: (childProps) => createComponent(Popover.Trigger, mergeProps(childProps, {
                        onClick: (e) => {
                          var _a;
                          e.stopPropagation();
                          (_a = childProps.onClick) == null ? void 0 : _a.call(childProps, e);
                        }
                      }))
                    }), createComponent(Popover.Content, {
                      portal: true,
                      get ["class"]() {
                        return style("notificationSnoozeCustomTime_popoverContent", "nt-size-fit nt-w-[260px]");
                      },
                      get children() {
                        return createComponent(SnoozeDateTimePicker, {
                          get maxDurationHours() {
                            return maxSnoozeDurationHours();
                          },
                          onSelect: (date) => __async(this, null, function* () {
                            yield props.notification.snooze(date.toISOString());
                          }),
                          onCancel: () => {
                            setIsSnoozeDateTimePickerOpen(false);
                          }
                        });
                      }
                    })];
                  }
                })];
              }
            })];
          }
        })
      }), createComponent(Tooltip.Content, {
        "data-localization": "notification.actions.snooze.tooltip",
        get children() {
          return t("notification.actions.snooze.tooltip");
        }
      })];
    }
  });
};
var renderNotificationActions = (notification, status) => {
  const {
    isSnoozeEnabled
  } = useInboxContext();
  if (notification.isSnoozed) {
    return createComponent(UnsnoozeButton, {
      notification
    });
  }
  if (notification.isArchived) {
    return createComponent(UnarchiveButton, {
      notification
    });
  }
  return [memo(() => memo(() => status() !== "archived" /* ARCHIVED */)() && (notification.isRead ? createComponent(UnreadButton, {
    notification
  }) : createComponent(ReadButton, {
    notification
  }))), memo(() => memo(() => !!isSnoozeEnabled())() && createComponent(SnoozeButton, {
    notification
  })), createComponent(ArchiveButton, {
    notification
  })];
};

// src/ui/components/Notification/DefaultNotification.tsx
var _tmpl$60 = /* @__PURE__ */ template(`<img>`);
var _tmpl$216 = /* @__PURE__ */ template(`<div>`);
var _tmpl$311 = /* @__PURE__ */ template(`<span>`);
var _tmpl$410 = /* @__PURE__ */ template(`<a><div><div></div><div></div><div>`);
var DefaultNotification = (props) => {
  const style = useStyle();
  const {
    t,
    locale
  } = useLocalization();
  const {
    navigate,
    status
  } = useInboxContext();
  const [minutesPassed, setMinutesPassed] = createSignal(0);
  const createdAt = createMemo(() => {
    minutesPassed();
    return formatToRelativeTime({
      fromDate: new Date(props.notification.createdAt),
      locale: locale()
    });
  });
  const snoozedUntil = createMemo(() => {
    minutesPassed();
    if (!props.notification.snoozedUntil) {
      return null;
    }
    return formatSnoozedUntil({
      untilDate: new Date(props.notification.snoozedUntil),
      locale: locale()
    });
  });
  const deliveredAt = createMemo(() => {
    minutesPassed();
    if (!props.notification.deliveredAt || !Array.isArray(props.notification.deliveredAt)) {
      return null;
    }
    return props.notification.deliveredAt.map((date) => formatToRelativeTime({
      fromDate: new Date(date),
      locale: locale()
    }));
  });
  createEffect(() => {
    const interval = setInterval(() => {
      setMinutesPassed((prev) => prev + 1);
    }, 1e3 * 60);
    return () => clearInterval(interval);
  });
  const handleNotificationClick = (e) => __async(void 0, null, function* () {
    var _a, _b, _c;
    e.stopPropagation();
    e.preventDefault();
    if (!props.notification.isRead) {
      yield props.notification.read();
    }
    (_a = props.onNotificationClick) == null ? void 0 : _a.call(props, props.notification);
    navigate((_b = props.notification.redirect) == null ? void 0 : _b.url, (_c = props.notification.redirect) == null ? void 0 : _c.target);
  });
  const handleActionButtonClick = (action, e) => __async(void 0, null, function* () {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
    e.stopPropagation();
    if (action === "primary" /* PRIMARY */) {
      yield props.notification.completePrimary();
      (_a = props.onPrimaryActionClick) == null ? void 0 : _a.call(props, props.notification);
      navigate((_c = (_b = props.notification.primaryAction) == null ? void 0 : _b.redirect) == null ? void 0 : _c.url, (_e = (_d = props.notification.primaryAction) == null ? void 0 : _d.redirect) == null ? void 0 : _e.target);
    } else {
      yield props.notification.completeSecondary();
      (_f = props.onSecondaryActionClick) == null ? void 0 : _f.call(props, props.notification);
      navigate((_h = (_g = props.notification.secondaryAction) == null ? void 0 : _g.redirect) == null ? void 0 : _h.url, (_j = (_i = props.notification.secondaryAction) == null ? void 0 : _i.redirect) == null ? void 0 : _j.target);
    }
  });
  return (() => {
    var _el$ = _tmpl$410(), _el$3 = _el$.firstChild, _el$4 = _el$3.firstChild, _el$5 = _el$4.nextSibling, _el$7 = _el$5.nextSibling;
    _el$.$$click = handleNotificationClick;
    insert(_el$, createComponent(Show, {
      get when() {
        return props.notification.avatar;
      },
      get fallback() {
        return (() => {
          var _el$9 = _tmpl$216();
          effect(() => className(_el$9, style("notificationImageLoadingFallback", "nt-size-8 nt-rounded-lg nt-shrink-0 nt-aspect-square")));
          return _el$9;
        })();
      },
      get children() {
        var _el$2 = _tmpl$60();
        effect((_p$) => {
          var _v$ = style("notificationImage", "nt-size-8 nt-rounded-lg nt-object-cover nt-aspect-square"), _v$2 = props.notification.avatar;
          _v$ !== _p$.e && className(_el$2, _p$.e = _v$);
          _v$2 !== _p$.t && setAttribute(_el$2, "src", _p$.t = _v$2);
          return _p$;
        }, {
          e: void 0,
          t: void 0
        });
        return _el$2;
      }
    }), _el$3);
    insert(_el$4, createComponent(Show, {
      get when() {
        return props.renderSubject;
      },
      get fallback() {
        return createComponent(Show, {
          get when() {
            return props.notification.subject;
          },
          children: (subject) => createComponent(Markdown_default, {
            appearanceKey: "notificationSubject",
            "class": "nt-text-start nt-font-medium",
            strongAppearanceKey: "notificationSubject__strong",
            get children() {
              return subject();
            }
          })
        });
      },
      children: (renderSubject) => createComponent(ExternalElementRenderer, {
        render: (el) => renderSubject()(el, props.notification)
      })
    }), null);
    insert(_el$4, createComponent(Show, {
      get when() {
        return props.renderBody;
      },
      get fallback() {
        return createComponent(Markdown_default, {
          appearanceKey: "notificationBody",
          strongAppearanceKey: "notificationBody__strong",
          "class": "nt-text-start nt-whitespace-pre-wrap nt-text-foreground-alpha-600",
          get children() {
            return props.notification.body;
          }
        });
      },
      children: (renderBody) => createComponent(ExternalElementRenderer, {
        render: (el) => renderBody()(el, props.notification)
      })
    }), null);
    insert(_el$5, () => renderNotificationActions(props.notification, status));
    insert(_el$3, createComponent(Show, {
      get when() {
        return props.notification.primaryAction || props.notification.secondaryAction;
      },
      get children() {
        var _el$6 = _tmpl$216();
        insert(_el$6, createComponent(Show, {
          get when() {
            return props.notification.primaryAction;
          },
          keyed: true,
          children: (primaryAction) => createComponent(Button, {
            appearanceKey: "notificationPrimaryAction__button",
            variant: "default",
            onClick: (e) => handleActionButtonClick("primary" /* PRIMARY */, e),
            get children() {
              return primaryAction.label;
            }
          })
        }), null);
        insert(_el$6, createComponent(Show, {
          get when() {
            return props.notification.secondaryAction;
          },
          keyed: true,
          children: (secondaryAction) => createComponent(Button, {
            appearanceKey: "notificationSecondaryAction__button",
            variant: "secondary",
            onClick: (e) => handleActionButtonClick("secondary" /* SECONDARY */, e),
            get children() {
              return secondaryAction.label;
            }
          })
        }), null);
        effect(() => className(_el$6, style("notificationCustomActions", "nt-flex nt-flex-wrap nt-gap-2")));
        return _el$6;
      }
    }), _el$7);
    insert(_el$7, createComponent(Show, {
      get when() {
        return snoozedUntil();
      },
      get fallback() {
        return createComponent(Show, {
          get when() {
            return deliveredAt();
          },
          get fallback() {
            return memo(createdAt);
          },
          children: (deliveredAt2) => createComponent(Show, {
            get when() {
              return deliveredAt2().length >= 2;
            },
            get children() {
              return [" ", createComponent(For, {
                get each() {
                  return deliveredAt2().slice(-2);
                },
                children: (date, index) => [createComponent(Show, {
                  get when() {
                    return index() === 0;
                  },
                  get children() {
                    return [date, " \xB7"];
                  }
                }), createComponent(Show, {
                  get when() {
                    return index() === 1;
                  },
                  get children() {
                    return createComponent(Badge, {
                      appearanceKey: "notificationDeliveredAt__badge",
                      get children() {
                        return [createComponent(Clock, {
                          get ["class"]() {
                            return style("notificationDeliveredAt__icon", "nt-size-3");
                          }
                        }), date];
                      }
                    });
                  }
                })]
              })];
            }
          })
        });
      },
      children: (snoozedUntil2) => [createComponent(Clock, {
        get ["class"]() {
          return style("notificationSnoozedUntil__icon", "nt-size-3");
        }
      }), memo(() => t("notification.snoozedUntil")), " \xB7 ", memo(snoozedUntil2)]
    }));
    insert(_el$, createComponent(Show, {
      get when() {
        return !props.notification.isRead;
      },
      get children() {
        var _el$8 = _tmpl$311();
        effect(() => className(_el$8, style("notificationDot", "nt-size-1.5 nt-bg-primary nt-rounded-full nt-shrink-0")));
        return _el$8;
      }
    }), null);
    effect((_p$) => {
      var _a;
      var _v$3 = style("notification", cn("nt-w-full nt-text-sm hover:nt-bg-primary-alpha-25 nt-group nt-relative nt-flex nt-items-start nt-p-4 nt-gap-2", "[&:not(:first-child)]:nt-border-t nt-border-neutral-alpha-100", {
        "nt-cursor-pointer": !props.notification.isRead || !!((_a = props.notification.redirect) == null ? void 0 : _a.url)
      })), _v$4 = style("notificationContent", "nt-flex nt-flex-col nt-gap-2 nt-w-full"), _v$5 = style("notificationTextContainer"), _v$6 = style("notificationDefaultActions", `nt-absolute nt-transition nt-duration-100 nt-ease-out nt-gap-0.5 nt-flex nt-shrink-0 nt-opacity-0 group-hover:nt-opacity-100 group-focus-within:nt-opacity-100 nt-justify-center nt-items-center nt-bg-background/90 nt-right-3 nt-top-3 nt-border nt-border-neutral-alpha-100 nt-rounded-lg nt-backdrop-blur-lg nt-p-0.5`), _v$7 = style("notificationDate", "nt-text-foreground-alpha-400 nt-flex nt-items-center nt-gap-1");
      _v$3 !== _p$.e && className(_el$, _p$.e = _v$3);
      _v$4 !== _p$.t && className(_el$3, _p$.t = _v$4);
      _v$5 !== _p$.a && className(_el$4, _p$.a = _v$5);
      _v$6 !== _p$.o && className(_el$5, _p$.o = _v$6);
      _v$7 !== _p$.i && className(_el$7, _p$.i = _v$7);
      return _p$;
    }, {
      e: void 0,
      t: void 0,
      a: void 0,
      o: void 0,
      i: void 0
    });
    return _el$;
  })();
};
delegateEvents(["click"]);

// src/ui/components/Notification/Notification.tsx
var Notification = (props) => {
  return createComponent(Show, {
    get when() {
      return props.renderNotification;
    },
    get fallback() {
      return createComponent(DefaultNotification, {
        get notification() {
          return props.notification;
        },
        get renderSubject() {
          return props.renderSubject;
        },
        get renderBody() {
          return props.renderBody;
        },
        get onNotificationClick() {
          return props.onNotificationClick;
        },
        get onPrimaryActionClick() {
          return props.onPrimaryActionClick;
        },
        get onSecondaryActionClick() {
          return props.onSecondaryActionClick;
        }
      });
    },
    get children() {
      return createComponent(ExternalElementRenderer, {
        render: (el) => props.renderNotification(el, props.notification)
      });
    }
  });
};
var NewMessagesCta = (props) => {
  const shouldRender = createMemo(() => !!props.count);
  const {
    t
  } = useLocalization();
  return createComponent(Show, {
    get when() {
      return shouldRender();
    },
    get children() {
      return createComponent(Button, {
        appearanceKey: "notificationListNewNotificationsNotice__button",
        "class": "nt-absolute nt-w-fit nt-h-fit nt-top-0 nt-mx-auto nt-inset-2 nt-z-10 nt-rounded-full hover:nt-bg-primary-600 nt-animate-in nt-slide-in-from-top-2 nt-fade-in",
        get onClick() {
          return props.onClick;
        },
        "data-localization": "notifications.newNotifications",
        get children() {
          return t("notifications.newNotifications", {
            notificationCount: props.count
          });
        }
      });
    }
  });
};
var _tmpl$61 = /* @__PURE__ */ template(`<div>`);
var NotificationListSkeleton = (props) => {
  const style = useStyle();
  const {
    t
  } = useLocalization();
  return (() => {
    var _el$ = _tmpl$61();
    insert(_el$, createComponent(Motion.div, {
      get animate() {
        return {
          scale: props.loading ? 1 : 0.7
        };
      },
      transition: {
        duration: 0.6,
        easing: [0.39, 0.24, 0.3, 1],
        delay: 0.3
      },
      get ["class"]() {
        return style("notificationList__skeleton", "nt-flex nt-relative nt-mx-auto nt-flex-col nt-w-full nt-mb-4");
      },
      get children() {
        return [memo(() => Array.from({
          length: 5
        }).map((_, i) => createComponent(Motion.div, {
          get animate() {
            return {
              marginBottom: props.loading ? 0 : "16px",
              borderWidth: props.loading ? 0 : "1px",
              borderRadius: props.loading ? 0 : "var(--nv-radius-lg)"
            };
          },
          transition: {
            duration: 0.5,
            delay: 0.3,
            easing: "ease-in-out"
          },
          get ["class"]() {
            return style("notificationList__skeletonContent", "nt-flex nt-border-neutral-alpha-50 nt-items-center nt-gap-3 nt-p-3 nt-bg-neutral-alpha-25");
          },
          get children() {
            return [createComponent(SkeletonAvatar, {
              appearanceKey: "notificationList__skeletonAvatar",
              "class": "nt-w-8 nt-h-8 nt-rounded-full nt-bg-neutral-alpha-100"
            }), (() => {
              var _el$3 = _tmpl$61();
              insert(_el$3, createComponent(SkeletonText, {
                appearanceKey: "notificationList__skeletonText",
                "class": "nt-h-2 nt-w-1/3 nt-bg-neutral-alpha-50 nt-rounded"
              }), null);
              insert(_el$3, createComponent(SkeletonText, {
                appearanceKey: "notificationList__skeletonText",
                "class": "nt-h-2 nt-w-2/3 nt-bg-neutral-alpha-50 nt-rounded"
              }), null);
              effect(() => className(_el$3, style("notificationList__skeletonItem", "nt-flex nt-flex-col nt-gap-2 nt-flex-1")));
              return _el$3;
            })()];
          }
        }))), (() => {
          var _el$2 = _tmpl$61();
          effect(() => className(_el$2, style("notificationListEmptyNoticeOverlay", "nt-absolute nt-size-full nt-z-10 nt-inset-0 nt-bg-gradient-to-b nt-from-transparent nt-to-background")));
          return _el$2;
        })()];
      }
    }), null);
    insert(_el$, createComponent(Show, {
      get when() {
        return !props.loading;
      },
      get children() {
        return createComponent(Motion.p, {
          initial: {
            opacity: 0,
            y: -4,
            filter: "blur(4px)"
          },
          get animate() {
            return {
              opacity: props.loading ? 0 : 1,
              y: 0,
              filter: "blur(0px)"
            };
          },
          transition: {
            duration: 0.7,
            easing: [0.39, 0.24, 0.3, 1],
            delay: 0.6
          },
          get ["class"]() {
            return style("notificationListEmptyNotice", "nt-text-center");
          },
          "data-localization": "notifications.emptyNotice",
          get children() {
            return t("notifications.emptyNotice");
          }
        });
      }
    }), null);
    effect(() => className(_el$, style("notificationListEmptyNoticeContainer", "nt-flex nt-flex-col nt-items-center nt-h-fit nt-w-full nt-text-sm nt-text-foreground-alpha-400 nt-text-center")));
    return _el$;
  })();
};

// src/ui/components/Notification/NotificationList.tsx
var _tmpl$62 = /* @__PURE__ */ template(`<div>`);
var _tmpl$217 = /* @__PURE__ */ template(`<div><div>`);
var NotificationList = (props) => {
  var _a, _b;
  const options = createMemo(() => __spreadProps(__spreadValues({}, props.filter), {
    limit: props.limit
  }));
  const style = useStyle();
  const {
    data,
    setEl,
    end,
    refetch,
    initialLoading
  } = useNotificationsInfiniteScroll({
    options
  });
  const {
    count,
    reset: resetNewMessagesCount
  } = useNewMessagesCount({
    filter: {
      tags: (_b = (_a = props.filter) == null ? void 0 : _a.tags) != null ? _b : []
    }
  });
  const {
    setLimit
  } = useInboxContext();
  const ids = createMemo(() => data().map((n) => n.id));
  let notificationListElement;
  createEffect(() => {
    setLimit(props.limit || DEFAULT_LIMIT);
  });
  const handleOnNewMessagesClick = (e) => __async(void 0, null, function* () {
    e.stopPropagation();
    resetNewMessagesCount();
    refetch({
      filter: props.filter
    });
    notificationListElement.scrollTo({
      top: 0
    });
  });
  return (() => {
    var _el$ = _tmpl$217(), _el$2 = _el$.firstChild;
    insert(_el$, createComponent(NewMessagesCta, {
      get count() {
        return count();
      },
      onClick: handleOnNewMessagesClick
    }), _el$2);
    use((el) => {
      notificationListElement = el;
    }, _el$2);
    insert(_el$2, createComponent(Show, {
      get when() {
        return data().length > 0;
      },
      get fallback() {
        return createComponent(NotificationListSkeleton, {
          get loading() {
            return initialLoading();
          }
        });
      },
      get children() {
        return [createComponent(For, {
          get each() {
            return ids();
          },
          children: (_, index) => {
            const notification = () => data()[index()];
            return createComponent(Notification, {
              get notification() {
                return notification();
              },
              get renderNotification() {
                return props.renderNotification;
              },
              get renderSubject() {
                return props.renderSubject;
              },
              get renderBody() {
                return props.renderBody;
              },
              get onNotificationClick() {
                return props.onNotificationClick;
              },
              get onPrimaryActionClick() {
                return props.onPrimaryActionClick;
              },
              get onSecondaryActionClick() {
                return props.onSecondaryActionClick;
              }
            });
          }
        }), createComponent(Show, {
          get when() {
            return !end();
          },
          get children() {
            var _el$3 = _tmpl$62();
            use(setEl, _el$3);
            insert(_el$3, createComponent(NotificationListSkeleton, {
              loading: true
            }));
            return _el$3;
          }
        })];
      }
    }));
    effect((_p$) => {
      var _v$ = style("notificationListContainer", "nt-relative nt-border-t nt-border-t-neutral-alpha-200 nt-h-full nt-overflow-hidden"), _v$2 = style("notificationList", "nt-relative nt-h-full nt-flex nt-flex-col nt-overflow-y-auto");
      _v$ !== _p$.e && className(_el$, _p$.e = _v$);
      _v$2 !== _p$.t && className(_el$2, _p$.t = _v$2);
      return _p$;
    }, {
      e: void 0,
      t: void 0
    });
    return _el$;
  })();
};
var _tmpl$63 = /* @__PURE__ */ template(`<span>`);
var getDisplayCount = (count) => count >= 100 ? "99+" : count;
var InboxTabUnreadNotificationsCount = (props) => {
  const style = useStyle();
  const displayCount = createMemo(() => getDisplayCount(props.count));
  return (() => {
    var _el$ = _tmpl$63();
    insert(_el$, displayCount);
    effect(() => className(_el$, style("notificationsTabsTriggerCount", "nt-rounded-full nt-bg-counter nt-px-[6px] nt-text-counter-foreground nt-text-sm")));
    return _el$;
  })();
};
var InboxTab = (props) => {
  const {
    status
  } = useInboxContext();
  const style = useStyle();
  const unreadCount = useUnreadCount({
    filter: {
      tags: getTagsFromTab(props)
    }
  });
  return createComponent(Tabs.Trigger, {
    get value() {
      return props.label;
    },
    get ["class"]() {
      return style("notificationsTabs__tabsTrigger", cn(tabsTriggerVariants(), "nt-flex nt-gap-2", props.class));
    },
    get children() {
      return [(() => {
        var _el$2 = _tmpl$63();
        insert(_el$2, () => props.label);
        effect(() => className(_el$2, style("notificationsTabsTriggerLabel", "nt-text-sm nt-font-medium")));
        return _el$2;
      })(), createComponent(Show, {
        get when() {
          return memo(() => status() !== "archived" /* ARCHIVED */)() && unreadCount();
        },
        get children() {
          return createComponent(InboxTabUnreadNotificationsCount, {
            get count() {
              return unreadCount();
            }
          });
        }
      })];
    }
  });
};
var InboxDropdownTab = (props) => {
  const {
    status
  } = useInboxContext();
  const style = useStyle();
  const unreadCount = useUnreadCount({
    filter: {
      tags: getTagsFromTab(props)
    }
  });
  return createComponent(Dropdown.Item, {
    get ["class"]() {
      return style("moreTabs__dropdownItem", cn(dropdownItemVariants(), "nt-flex nt-justify-between nt-gap-2"));
    },
    get onClick() {
      return props.onClick;
    },
    get children() {
      return [(() => {
        var _el$3 = _tmpl$63();
        insert(_el$3, () => props.label);
        effect(() => className(_el$3, style("moreTabs__dropdownItemLabel", "nt-mr-auto")));
        return _el$3;
      })(), memo(() => props.rightIcon), createComponent(Show, {
        get when() {
          return memo(() => status() !== "archived" /* ARCHIVED */)() && unreadCount();
        },
        get children() {
          return createComponent(InboxTabUnreadNotificationsCount, {
            get count() {
              return unreadCount();
            }
          });
        }
      })];
    }
  });
};

// src/ui/components/InboxTabs/InboxTabs.tsx
var tabsDropdownTriggerVariants = () => `nt-relative after:nt-absolute after:nt-content-[''] after:nt-bottom-0 after:nt-left-0 after:nt-w-full after:nt-h-[2px] after:nt-border-b-2 nt-mb-[0.625rem]`;
var InboxTabs = (props) => {
  const style = useStyle();
  const {
    activeTab,
    status,
    setActiveTab,
    filter
  } = useInboxContext();
  const {
    dropdownTabs,
    setTabsList,
    visibleTabs
  } = useTabsDropdown({
    tabs: props.tabs
  });
  const dropdownTabsUnreadCounts = useUnreadCounts({
    filters: dropdownTabs().map((tab) => ({
      tags: getTagsFromTab(tab)
    }))
  });
  const options = createMemo(() => dropdownTabs().map((tab) => __spreadProps(__spreadValues({}, tab), {
    rightIcon: tab.label === activeTab() ? createComponent(Check, {
      get ["class"]() {
        return style("moreTabs__dropdownItemRight__icon", "nt-size-3");
      }
    }) : void 0
  })));
  const dropdownTabsUnreadSum = createMemo(() => dropdownTabsUnreadCounts().reduce((accumulator, currentValue) => accumulator + currentValue, 0));
  const isTabsDropdownActive = createMemo(() => dropdownTabs().map((tab) => tab.label).includes(activeTab()));
  return createComponent(Tabs.Root, {
    appearanceKey: "notificationsTabs__tabsRoot",
    "class": "nt-flex nt-flex-col nt-flex-1 nt-min-h-0",
    get value() {
      return activeTab();
    },
    onChange: setActiveTab,
    get children() {
      return [createComponent(Show, {
        get when() {
          return visibleTabs().length > 0;
        },
        get fallback() {
          return createComponent(Tabs.List, {
            ref: setTabsList,
            appearanceKey: "notificationsTabs__tabsList",
            "class": "nt-bg-neutral-alpha-25 nt-px-4",
            get children() {
              return props.tabs.map((tab) => createComponent(InboxTab, mergeProps(tab, {
                "class": "nt-invisible"
              })));
            }
          });
        },
        get children() {
          return createComponent(Tabs.List, {
            appearanceKey: "notificationsTabs__tabsList",
            "class": "nt-bg-neutral-alpha-25 nt-px-4",
            get children() {
              return [createComponent(For, {
                get each() {
                  return visibleTabs();
                },
                children: (tab) => createComponent(InboxTab, tab)
              }), createComponent(Show, {
                get when() {
                  return dropdownTabs().length > 0;
                },
                get children() {
                  return createComponent(Dropdown.Root, {
                    get children() {
                      return [createComponent(Dropdown.Trigger, {
                        appearanceKey: "moreTabs__dropdownTrigger",
                        asChild: (triggerProps) => createComponent(Button, mergeProps({
                          variant: "unstyled",
                          size: "iconSm",
                          appearanceKey: "moreTabs__button"
                        }, triggerProps, {
                          get ["class"]() {
                            return cn(tabsDropdownTriggerVariants(), "nt-ml-auto", isTabsDropdownActive() ? "after:nt-border-b-primary" : "after:nt-border-b-transparent nt-text-foreground-alpha-700");
                          },
                          get children() {
                            return [createComponent(ArrowDown, {
                              get ["class"]() {
                                return style("moreTabs__icon", "nt-size-5");
                              }
                            }), createComponent(Show, {
                              get when() {
                                return memo(() => status() !== "archived" /* ARCHIVED */)() && dropdownTabsUnreadSum();
                              },
                              get children() {
                                return createComponent(InboxTabUnreadNotificationsCount, {
                                  get count() {
                                    return dropdownTabsUnreadSum();
                                  }
                                });
                              }
                            })];
                          }
                        }))
                      }), createComponent(Dropdown.Content, {
                        appearanceKey: "moreTabs__dropdownContent",
                        get children() {
                          return createComponent(For, {
                            get each() {
                              return options();
                            },
                            children: (option) => createComponent(InboxDropdownTab, mergeProps({
                              onClick: () => setActiveTab(option.label)
                            }, option))
                          });
                        }
                      })];
                    }
                  });
                }
              })];
            }
          });
        }
      }), memo(() => props.tabs.map((tab) => createComponent(Tabs.Content, {
        get value() {
          return tab.label;
        },
        get ["class"]() {
          return style("notificationsTabs__tabsContent", cn(activeTab() === tab.label ? "nt-block" : "nt-hidden", "nt-overflow-auto nt-flex-1 nt-flex nt-flex-col nt-min-h-0"));
        },
        get children() {
          return createComponent(NotificationList, {
            get renderNotification() {
              return props.renderNotification;
            },
            get renderSubject() {
              return props.renderSubject;
            },
            get renderBody() {
              return props.renderBody;
            },
            get onNotificationClick() {
              return props.onNotificationClick;
            },
            get onPrimaryActionClick() {
              return props.onPrimaryActionClick;
            },
            get onSecondaryActionClick() {
              return props.onSecondaryActionClick;
            },
            get filter() {
              return __spreadProps(__spreadValues({}, filter()), {
                tags: getTagsFromTab(tab)
              });
            }
          });
        }
      })))];
    }
  });
};

// src/ui/components/Inbox.tsx
var _tmpl$64 = /* @__PURE__ */ template(`<div>`);
var InboxPage = /* @__PURE__ */ function(InboxPage2) {
  InboxPage2["Notifications"] = "notifications";
  InboxPage2["Preferences"] = "preferences";
  return InboxPage2;
}({});
var InboxContent = (props) => {
  const [currentPage, setCurrentPage] = createSignal(props.initialPage || InboxPage.Notifications);
  const {
    tabs,
    filter
  } = useInboxContext();
  const style = useStyle();
  const navigateToPage = createMemo(() => (page) => {
    if (props.hideNav) {
      return void 0;
    }
    return () => {
      setCurrentPage(page);
    };
  });
  return (() => {
    var _el$ = _tmpl$64();
    insert(_el$, createComponent(Switch$1, {
      get children() {
        return [createComponent(Match, {
          get when() {
            return currentPage() === InboxPage.Notifications;
          },
          get children() {
            return [createComponent(Header, {
              get navigateToPreferences() {
                return navigateToPage()(InboxPage.Preferences);
              }
            }), createComponent(Show, {
              keyed: true,
              get when() {
                return memo(() => !!tabs())() && tabs().length > 0;
              },
              get fallback() {
                return createComponent(NotificationList, {
                  get renderNotification() {
                    return props.renderNotification;
                  },
                  get renderSubject() {
                    return props.renderSubject;
                  },
                  get renderBody() {
                    return props.renderBody;
                  },
                  get onNotificationClick() {
                    return props.onNotificationClick;
                  },
                  get onPrimaryActionClick() {
                    return props.onPrimaryActionClick;
                  },
                  get onSecondaryActionClick() {
                    return props.onSecondaryActionClick;
                  },
                  get filter() {
                    return filter();
                  }
                });
              },
              get children() {
                return createComponent(InboxTabs, {
                  get renderNotification() {
                    return props.renderNotification;
                  },
                  get renderSubject() {
                    return props.renderSubject;
                  },
                  get renderBody() {
                    return props.renderBody;
                  },
                  get onNotificationClick() {
                    return props.onNotificationClick;
                  },
                  get onPrimaryActionClick() {
                    return props.onPrimaryActionClick;
                  },
                  get onSecondaryActionClick() {
                    return props.onSecondaryActionClick;
                  },
                  get tabs() {
                    return tabs();
                  }
                });
              }
            })];
          }
        }), createComponent(Match, {
          get when() {
            return currentPage() === InboxPage.Preferences;
          },
          get children() {
            return [createComponent(PreferencesHeader, {
              get navigateToNotifications() {
                return navigateToPage()(InboxPage.Notifications);
              }
            }), createComponent(Preferences, {})];
          }
        })];
      }
    }), null);
    insert(_el$, createComponent(Footer, {}), null);
    effect(() => className(_el$, style("inboxContent", "nt-h-full nt-flex nt-flex-col")));
    return _el$;
  })();
};
var Inbox = (props) => {
  const style = useStyle();
  const {
    isOpened,
    setIsOpened
  } = useInboxContext();
  const isOpen = () => {
    var _a;
    return (_a = props == null ? void 0 : props.open) != null ? _a : isOpened();
  };
  return createComponent(Popover.Root, {
    get open() {
      return isOpen();
    },
    onOpenChange: setIsOpened,
    get placement() {
      return props.placement;
    },
    get offset() {
      return props.placementOffset;
    },
    get children() {
      return [createComponent(Popover.Trigger, {
        asChild: (triggerProps) => createComponent(Button, mergeProps({
          get ["class"]() {
            return style("inbox__popoverTrigger");
          },
          variant: "ghost",
          size: "icon"
        }, triggerProps, {
          get children() {
            return createComponent(Bell2, {
              get renderBell() {
                return props.renderBell;
              }
            });
          }
        }))
      }), createComponent(Popover.Content, {
        appearanceKey: "inbox__popoverContent",
        portal: true,
        get children() {
          return createComponent(Show, {
            get when() {
              return props.renderNotification;
            },
            get fallback() {
              return createComponent(InboxContent, {
                get renderSubject() {
                  return props.renderSubject;
                },
                get renderBody() {
                  return props.renderBody;
                },
                get onNotificationClick() {
                  return props.onNotificationClick;
                },
                get onPrimaryActionClick() {
                  return props.onPrimaryActionClick;
                },
                get onSecondaryActionClick() {
                  return props.onSecondaryActionClick;
                }
              });
            },
            get children() {
              return createComponent(InboxContent, {
                get renderNotification() {
                  return props.renderNotification;
                },
                get onNotificationClick() {
                  return props.onNotificationClick;
                },
                get onPrimaryActionClick() {
                  return props.onPrimaryActionClick;
                },
                get onSecondaryActionClick() {
                  return props.onSecondaryActionClick;
                }
              });
            }
          });
        }
      })];
    }
  });
};

// src/ui/components/Renderer.tsx
var novuComponents = {
  Inbox,
  InboxContent,
  Bell: Bell2,
  Notifications: (props) => {
    if (props.renderNotification) {
      const _a = props, propsWithoutBodyAndSubject = __objRest(_a, [
        "renderBody",
        "renderSubject"
      ]);
      return createComponent(InboxContent, mergeProps(propsWithoutBodyAndSubject, {
        hideNav: true,
        get initialPage() {
          return InboxPage.Notifications;
        }
      }));
    }
    const _b = props, propsWithoutRenderNotification = __objRest(_b, [
      "renderNotification"
    ]);
    return createComponent(InboxContent, mergeProps(propsWithoutRenderNotification, {
      hideNav: true,
      get initialPage() {
        return InboxPage.Notifications;
      }
    }));
  },
  Preferences: (props) => {
    if (props.renderNotification) {
      const _a = props, propsWithoutBodyAndSubject = __objRest(_a, [
        "renderBody",
        "renderSubject"
      ]);
      return createComponent(InboxContent, mergeProps(propsWithoutBodyAndSubject, {
        hideNav: true,
        get initialPage() {
          return InboxPage.Preferences;
        }
      }));
    }
    const _b = props, propsWithoutRenderNotification = __objRest(_b, [
      "renderNotification"
    ]);
    return createComponent(InboxContent, mergeProps(propsWithoutRenderNotification, {
      hideNav: true,
      get initialPage() {
        return InboxPage.Preferences;
      }
    }));
  }
};
var Renderer = (props) => {
  const nodes = () => [...props.nodes.keys()];
  onMount(() => {
    const id = "novu-default-css";
    const el = document.getElementById(id);
    if (el) {
      return;
    }
    const styleEl = document.createElement("style");
    styleEl.id = id;
    document.head.insertBefore(styleEl, document.head.firstChild);
    styleEl.innerHTML = ui_default;
    onCleanup(() => {
      const element = document.getElementById(id);
      element == null ? void 0 : element.remove();
    });
  });
  return createComponent(NovuProvider, {
    get options() {
      return props.options;
    },
    get novu() {
      return props.novu;
    },
    get children() {
      return createComponent(LocalizationProvider, {
        get localization() {
          return props.localization;
        },
        get children() {
          return createComponent(AppearanceProvider, {
            get id() {
              return props.novuUI.id;
            },
            get appearance() {
              return props.appearance;
            },
            get children() {
              return createComponent(FocusManagerProvider, {
                get children() {
                  return createComponent(InboxProvider, {
                    get tabs() {
                      return props.tabs;
                    },
                    get preferencesFilter() {
                      return props.preferencesFilter;
                    },
                    get routerPush() {
                      return props.routerPush;
                    },
                    get children() {
                      return createComponent(CountProvider, {
                        get children() {
                          return createComponent(For, {
                            get each() {
                              return nodes();
                            },
                            children: (node) => {
                              const novuComponent = () => props.nodes.get(node);
                              let portalDivElement;
                              const Component = novuComponents[novuComponent().name];
                              onMount(() => {
                                if (!["Notifications", "Preferences", "InboxContent"].includes(novuComponent().name)) return;
                                if (node instanceof HTMLElement) {
                                  node.style.height = "100%";
                                }
                                if (portalDivElement) {
                                  portalDivElement.style.height = "100%";
                                }
                              });
                              return createComponent(Portal$1, {
                                mount: node,
                                ref: (el) => {
                                  portalDivElement = el;
                                },
                                get children() {
                                  return createComponent(Root, {
                                    get children() {
                                      return createComponent(Component, mergeProps(() => novuComponent().props));
                                    }
                                  });
                                }
                              });
                            }
                          });
                        }
                      });
                    }
                  });
                }
              });
            }
          });
        }
      });
    }
  });
};

// src/ui/novuUI.tsx
var _dispose, _rootElement, _mountedElements, _setMountedElements, _appearance, _setAppearance, _localization, _setLocalization, _options, _setOptions, _tabs, _setTabs, _routerPush, _setRouterPush, _preferencesFilter, _setPreferencesFilter, _predefinedNovu, _NovuUI_instances, mountComponentRenderer_fn, updateComponentProps_fn;
var NovuUI = class {
  constructor(props) {
    __privateAdd(this, _NovuUI_instances);
    __privateAdd(this, _dispose, null);
    __privateAdd(this, _rootElement);
    __privateAdd(this, _mountedElements);
    __privateAdd(this, _setMountedElements);
    __privateAdd(this, _appearance);
    __privateAdd(this, _setAppearance);
    __privateAdd(this, _localization);
    __privateAdd(this, _setLocalization);
    __privateAdd(this, _options);
    __privateAdd(this, _setOptions);
    __privateAdd(this, _tabs);
    __privateAdd(this, _setTabs);
    __privateAdd(this, _routerPush);
    __privateAdd(this, _setRouterPush);
    __privateAdd(this, _preferencesFilter);
    __privateAdd(this, _setPreferencesFilter);
    __privateAdd(this, _predefinedNovu);
    var _a;
    this.id = generateRandomString(16);
    const [appearance, setAppearance] = createSignal(props.appearance);
    const [localization, setLocalization] = createSignal(props.localization);
    const [options, setOptions] = createSignal(props.options);
    const [mountedElements, setMountedElements] = createSignal(/* @__PURE__ */ new Map());
    const [tabs, setTabs] = createSignal((_a = props.tabs) != null ? _a : []);
    const [preferencesFilter, setPreferencesFilter] = createSignal(props.preferencesFilter);
    const [routerPush, setRouterPush] = createSignal(props.routerPush);
    __privateSet(this, _mountedElements, mountedElements);
    __privateSet(this, _setMountedElements, setMountedElements);
    __privateSet(this, _appearance, appearance);
    __privateSet(this, _setAppearance, setAppearance);
    __privateSet(this, _localization, localization);
    __privateSet(this, _setLocalization, setLocalization);
    __privateSet(this, _options, options);
    __privateSet(this, _setOptions, setOptions);
    __privateSet(this, _tabs, tabs);
    __privateSet(this, _setTabs, setTabs);
    __privateSet(this, _routerPush, routerPush);
    __privateSet(this, _setRouterPush, setRouterPush);
    __privateSet(this, _predefinedNovu, props.novu);
    __privateSet(this, _preferencesFilter, preferencesFilter);
    __privateSet(this, _setPreferencesFilter, setPreferencesFilter);
    __privateMethod(this, _NovuUI_instances, mountComponentRenderer_fn).call(this);
  }
  mountComponent({
    name,
    element,
    props: componentProps
  }) {
    if (__privateGet(this, _mountedElements).call(this).has(element)) {
      return __privateMethod(this, _NovuUI_instances, updateComponentProps_fn).call(this, element, componentProps);
    }
    __privateGet(this, _setMountedElements).call(this, (oldNodes) => {
      const newNodes = new Map(oldNodes);
      newNodes.set(element, {
        name,
        props: componentProps
      });
      return newNodes;
    });
  }
  unmountComponent(element) {
    __privateGet(this, _setMountedElements).call(this, (oldMountedElements) => {
      const newMountedElements = new Map(oldMountedElements);
      newMountedElements.delete(element);
      return newMountedElements;
    });
  }
  updateAppearance(appearance) {
    __privateGet(this, _setAppearance).call(this, appearance);
  }
  updateLocalization(localization) {
    __privateGet(this, _setLocalization).call(this, localization);
  }
  updateOptions(options) {
    __privateGet(this, _setOptions).call(this, options);
  }
  updateTabs(tabs) {
    __privateGet(this, _setTabs).call(this, tabs != null ? tabs : []);
  }
  updatePreferencesFilter(preferencesFilter) {
    __privateGet(this, _setPreferencesFilter).call(this, preferencesFilter);
  }
  updateRouterPush(routerPush) {
    __privateGet(this, _setRouterPush).call(this, () => routerPush);
  }
  unmount() {
    var _a, _b;
    (_a = __privateGet(this, _dispose)) == null ? void 0 : _a.call(this);
    __privateSet(this, _dispose, null);
    (_b = __privateGet(this, _rootElement)) == null ? void 0 : _b.remove();
  }
};
_dispose = new WeakMap();
_rootElement = new WeakMap();
_mountedElements = new WeakMap();
_setMountedElements = new WeakMap();
_appearance = new WeakMap();
_setAppearance = new WeakMap();
_localization = new WeakMap();
_setLocalization = new WeakMap();
_options = new WeakMap();
_setOptions = new WeakMap();
_tabs = new WeakMap();
_setTabs = new WeakMap();
_routerPush = new WeakMap();
_setRouterPush = new WeakMap();
_preferencesFilter = new WeakMap();
_setPreferencesFilter = new WeakMap();
_predefinedNovu = new WeakMap();
_NovuUI_instances = new WeakSet();
mountComponentRenderer_fn = function() {
  if (__privateGet(this, _dispose) !== null) {
    return;
  }
  __privateSet(this, _rootElement, document.createElement("div"));
  __privateGet(this, _rootElement).setAttribute("id", `novu-ui-${this.id}`);
  document.body.appendChild(__privateGet(this, _rootElement));
  const dispose = render(() => {
    const _self$ = this;
    return createComponent(Renderer, {
      novuUI: _self$,
      get nodes() {
        var _a;
        return __privateGet(_a = _self$, _mountedElements).call(_a);
      },
      get options() {
        var _a;
        return __privateGet(_a = _self$, _options).call(_a);
      },
      get appearance() {
        var _a;
        return __privateGet(_a = _self$, _appearance).call(_a);
      },
      get localization() {
        var _a;
        return __privateGet(_a = _self$, _localization).call(_a);
      },
      get tabs() {
        var _a;
        return __privateGet(_a = _self$, _tabs).call(_a);
      },
      get preferencesFilter() {
        var _a;
        return __privateGet(_a = _self$, _preferencesFilter).call(_a);
      },
      get routerPush() {
        var _a;
        return __privateGet(_a = _self$, _routerPush).call(_a);
      },
      get novu() {
        return __privateGet(_self$, _predefinedNovu);
      }
    });
  }, __privateGet(this, _rootElement));
  __privateSet(this, _dispose, dispose);
};
updateComponentProps_fn = function(element, props) {
  __privateGet(this, _setMountedElements).call(this, (oldMountedElements) => {
    const newMountedElements = new Map(oldMountedElements);
    const mountedElement = newMountedElements.get(element);
    if (mountedElement) {
      newMountedElements.set(element, __spreadProps(__spreadValues({}, mountedElement), {
        props
      }));
    }
    return newMountedElements;
  });
};

export { NotificationStatus, NovuUI };
